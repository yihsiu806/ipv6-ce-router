#!/usr/bin/perl
#
# Copyright (C) 2013, 2014, 2015
# Chunghwa Telecommunication Labratories (CHT-TL)
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $CHT-TL: v6LC_2_1_13_B-v3_8_2.seq,v 1.1 2015/04/28  weifen Exp $
#
########################################################################
BEGIN{
	$V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_2 $';
}

use nd;

use lib '../';
use CPE6_config;
use DHCPv6_common;

my $Link0='Link0';

startNdiscWorld($Link0);

if (setupCommon11($Link0) < 0) {
	exitInitFail();
	#NOTREACHED
}

$SeekTime = 0;

if ($STATEFUL_CLIENT) {
  vCPP("-D\'NUT_ADDR=NUT_GLOBAL_ADDR_From_IANA' ");
}

my @na = ndSetNa4ucastNs();

vLogHTML('<FONT COLOR="#FF0000" SIZE="5"><U><B>Procedure'.
	'</B></U></FONT><BR>');

if(ndSendNsRecvNaStale($Link0, 'nd_ucast_ns_sll', \@na) < 0) {
	exitInitFail();
	#NOTREACHED
}

if(ndOfflinkEchoDelay($Link0) < 0) {
	exitFail();
	#NOTREACHED
}

exitPass();
#NOTREACHED

#------------------------------#
# setupCommon11()              #
#------------------------------#
sub setupCommon11 {
    my ($Link) = @_;
                 
    $NEED_COMMON_CLEANUP = 1;
     
    vLogHTML('<FONT COLOR="#FF0000" SIZE="5"><U><B>Common Test Setup 1.1</B></U></FONT><BR>');


    my %nd_hash = (
	'ns_l2l'        => 'na_l2l',
	'ns_g2l'        => 'na_l2g',
    );

    vClear($Link);
    if ($STATEFUL_CLIENT) {
			my ($ret,$param) = cpe_initialization_1_2('mcast_ra_commonsetup_m1',$Link0,"",$STATEFUL_CLIENT,0);
			if ($ret==1) {
	  		vLogHTML('<FONT COLOR="#FF0000"><B>Fail to initialize CPE!</B></FONT><BR>');
	  		exitFail();
		}
    } else {
      vSend($Link, 'mcast_ra_commonsetup');
    }
    ignoreDAD($Link);

    $tr1_default = 1;
    my $ereq = 'setup_echo_request';
    my $erep = 'setup_echo_reply';
    my @frames = ('ns_l2l', 'ns_g2l');

    my $mcast_ns    = '';

    vClear($Link);
    vSend($Link, $ereq);

    my %ret1 = vRecvWrapper($Link, $TimeOut, 0, 0, @frames);
	if($ret1{'recvCount'}) {
	    foreach my $frame (@frames) {
		if($ret1{'recvFrame'} eq $frame) {
		    $mcast_ns = $frame;
		    last;
		}
	    }
	}

	if($mcast_ns eq '') {
	    vLogHTML('<FONT COLOR="#FF0000"><B>Could\'t observe NS</B></FONT><BR>');
	    return(-1);
	}

	my $na = $nd_hash{$mcast_ns};

	vClear($Link);
	vSend($Link, $na);
	$tr1_cache = 1;

	my %ret2 = vRecvWrapper($Link, $TimeOut, 0, 0, $erep);
	if($ret2{'recvCount'}) {
	    if($ret2{'recvFrame'} ne $erep) {
		return(-1);
	    }
	}

    return(0);
}

#
# perldoc
#
########################################################################
__END__

=head1 NAME

  Neighbor Solicitation Processing, IsRouterFlag 
  Part B: Unicast Neighbor Solicitation with a SLLA

=head1 Purpose

  Verify that a host does not modify the isRouter flag after receiving a Neighbor Solicitation.

=head1 References

[RFC 7084],W-3
[RFC 4861],Sections 7.2.3
[RFC 4291],Section 2.6.1, 2.8

=head1 Resource Requirements

  * Packet generator
  * Monitor to capture packets

=head1 Test Setup

  Common Test Setup 1.2 is performed The Common Test Cleanup procedure is performed
  after each part.

=begin html

<BLOCKQUOTE>

<TABLE BORDER>
<Caption>Packet A</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58<br>
        Source Address: TN3's off-link Address<br>
	Destination Address: CE-Router's Global Address
</TD>
</TR>
<TR>
<TD>ICMPv6 Echo Request</TD>
</TR>
</TABLE>

<br>

<TABLE BORDER>
<Caption>Neighbor Advertisement B</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58<br>
        Destination Address: CE-Router's Link-local Address<br>
        Source Address: TR1's Link-local Address<br>
</TD>
</TR>
<TR>
<TD>
        Neighbor Solicitation<br>
	Target Address: CE-Router's Link-local Address
</TD>
</TR>
</TABLE>

<br>

<TABLE>
<TR>

<TD>
<TABLE BORDER>
<Caption>Neighbor Solicitation C</Caption>
<TR>
<TD>
	IPv6 Header<br>
	Next Header: 58<br>
	Destination Address: CE-Router's Link-local Address<br>
	Source Address: TR1's Link-local Address
</TD>
</TR>
<TR>
<TD>
	Neighbor Solicitation<br>
	Target Address: CE-Router's Link-local Address<br>
	Source Link-Layer Address: TR1's Ethernet address
</TD>
</TR>
</TABLE>
</TD>

<TD>
<TABLE BORDER>
<Caption>Neighbor Solicitation D</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58<br>
	Destination Address: NUT's Solicited-node Multicast Link-local Address<br>
        Source Address: TR1's Link-local Address
</TD>
</TR>
<TR>
<TD>
	Neighbor Solicitation<br>
        Target Address: NUT's Link-local Address<br>
        Source Link-Layer Address: TR2's Ethernet address
</TD>
</TR>
</TABLE>
</TD>

</TR>
</TABLE>
</BLOCKQUOTE>

=end html


=head1 Procedure

  Part B: Unicast Neighbor Solicitation with a SLLA
   4. TR1 transmits Neighbor Solicitation C.
   5. TN3 transmits Packet A to the CE-Router.
   6. Observe the packets transmitted by the CE-Router.

=head1 Observable Results

  Part B
   Step 6: The CE-Router should transmit an Echo Reply using TR1 as its default router. The CE-Router
   should not update the isRouter flag after receiving the NS.

=head1 Possible Problems

  * None.

=cut

