//
// Copyright (C) 2013
// Chunghwa Telecommunication Labratories (CHT-TL)
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $CHT-TL: ndisc_echo.def,v 1.0 2013/08/19 weifen Exp $
//
////////////////////////////////////////////////////////////////

#ifndef HAVE_NDISC_ECHO_DEF
#define HAVE_NDISC_ECHO_DEF

Payload payload8 {
	data	= hexstr("0123456789abcdef", 8);
}

//
// Echo Request: H0 -> NUT
//
////////////////////////////////

FEM_icmp6_echo_request(
	ndisc_ereq_offlink,
	_HETHER_tr1_to_nut,
	{
		_SRC(tn2v6(LINK1_PREFIX, LINK1_PREFIXLEN));
		_DST(NUT_ADDR);
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	ndisc_ereq_offlink_diff,
	_HETHER_h02nut,
	{
		_SRC(v6(H0_GLOBAL_LINK1));
		_DST(NUT_ADDR);
	},
	{
		payload	= payload8;
	}
)

//
// Echo Request: H0 -> TN
//
////////////////////////////////

FEM_icmp6_echo_request(
	nd_ereq_forwarding,
	_HETHER_h02nut,
	{
		_SRC(v6(H0_GLOBAL_LINK1));
		_DST(tn2v6(LINK0_PREFIX, LINK0_PREFIXLEN, "Link0"));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	nd_ereq_forwarding_link0,
	_HETHER_nut2tn,
	{
		_SRC(v6(H0_GLOBAL_LINK1));
		_DST(tn2v6(LINK0_PREFIX, LINK0_PREFIXLEN, "Link0"));
	},
	{
		payload	= payload8;
	}
)

//
// Echo Reply: NUT -> H0
//
////////////////////////////////

FEM_icmp6_echo_reply(
	ndisc_erep_offlink,
	_HETHER_nut2r0,
	{
		_SRC(NUT_ADDR);
		_DST(tn2v6(LINK1_PREFIX, LINK1_PREFIXLEN));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	ndisc_erep_offlink_diff,
	_HETHER_nut2h0,
	{
		_SRC(NUT_ADDR);
		_DST(v6(H0_GLOBAL_LINK1));
	},
	{
		payload	= payload8;
	}
)

//
// Echo Request: TN -> NUT
//
////////////////////////////////

FEM_icmp6_echo_request(
	ndisc_ereq_LL,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	ndisc_ereq_GG,
	_HETHER_tn2nut,
	{
		_SRC(tn2v6(LINK0_PREFIX, LINK0_PREFIXLEN));
		_DST(NUT_ADDR);
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	ndisc_ereq_LG,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(NUT_ADDR);
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	ndisc_ereq_GL,
	_HETHER_tn2nut,
	{
		_SRC(tn2v6(LINK0_PREFIX, LINK0_PREFIXLEN));
		_DST(nutv6());
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	tr1_ereq_global,
	_HETHER_tr1_to_nut,
	{
		_SRC(v6(R0_GLOBAL));
		_DST(nutv6());
	},
	{
		payload	= payload8;
	}
)

//
// Echo Reply: NUT -> TN
//
////////////////////////////////

FEM_icmp6_echo_reply(
	ndisc_erep_LL,
	_HETHER_nut2tn,
	{
		_SRC(nutv6());
		_DST(tnv6());
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	ndisc_erep_GG,
	_HETHER_nut2tn,
	{
		_SRC(NUT_ADDR);
		_DST(tn2v6(LINK0_PREFIX, LINK0_PREFIXLEN));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	ndisc_erep_GL,
	_HETHER_nut2tn,
	{
		_SRC(NUT_ADDR);
		_DST(tnv6());
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	ndisc_erep_LG,
	_HETHER_nut2tn,
	{
		_SRC(nutv6());
		_DST(tn2v6(LINK0_PREFIX, LINK0_PREFIXLEN));
	},
	{
		payload	= payload8;
	}
)

//
// Echo Request: H0 -> NUT
//
////////////////////////////////

FEM_icmp6_echo_request(
	ndisc_ereq_LL_x,
	_HETHER_h02nut,
	{
		_SRC(v6(H0_LINKLOCAL));
		_DST(nutv6());
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	ndisc_ereq_GG_x,
	_HETHER_h02nut,
	{
		_SRC(v6(H0_GLOBAL));
		_DST(NUT_ADDR);
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	ndisc_ereq_LG_x,
	_HETHER_h02nut,
	{
		_SRC(v6(H0_LINKLOCAL));
		_DST(NUT_ADDR);
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	ndisc_ereq_GL_x,
	_HETHER_h02nut,
	{
		_SRC(v6(H0_GLOBAL));
		_DST(nutv6());
	},
	{
		payload	= payload8;
	}
)

//
// Echo Reply: NUT -> H0
//
////////////////////////////////

FEM_icmp6_echo_reply(
	ndisc_erep_LL_x,
	_HETHER_nut2h0,
	{
		_SRC(nutv6());
		_DST(v6(H0_LINKLOCAL));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	ndisc_erep_GG_x,
	_HETHER_nut2h0,
	{
		_SRC(NUT_ADDR);
		_DST(v6(H0_GLOBAL));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	ndisc_erep_GL_x,
	_HETHER_nut2h0,
	{
		_SRC(NUT_ADDR);
		_DST(v6(H0_LINKLOCAL));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	ndisc_erep_LG_x,
	_HETHER_nut2h0,
	{
		_SRC(nutv6());
		_DST(v6(H0_GLOBAL));
	},
	{
		payload	= payload8;
	}
)

//
// Echo Request: TN -> NUT (diff)
//
////////////////////////////////

FEM_icmp6_echo_request(
	ndisc_ereq_LL_diff,
	_HETHER_h02nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	ndisc_ereq_GG_diff,
	_HETHER_h02nut,
	{
		_SRC(tn2v6(LINK0_PREFIX, LINK0_PREFIXLEN));
		_DST(NUT_ADDR);
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	ndisc_ereq_LG_diff,
	_HETHER_h02nut,
	{
		_SRC(tnv6());
		_DST(NUT_ADDR);
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	ndisc_ereq_GL_diff,
	_HETHER_h02nut,
	{
		_SRC(tn2v6(LINK0_PREFIX, LINK0_PREFIXLEN));
		_DST(nutv6());
	},
	{
		payload	= payload8;
	}
)

//
// Echo Reply: NUT -> TN (diff)
//
////////////////////////////////

FEM_icmp6_echo_reply(
	ndisc_erep_LL_diff,
	_HETHER_nut2h0,
	{
		_SRC(nutv6());
		_DST(tnv6());
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	ndisc_erep_GG_diff,
	_HETHER_nut2h0,
	{
		_SRC(NUT_ADDR);
		_DST(tn2v6(LINK0_PREFIX, LINK0_PREFIXLEN));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	ndisc_erep_GL_diff,
	_HETHER_nut2h0,
	{
		_SRC(NUT_ADDR);
		_DST(tnv6());
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	ndisc_erep_LG_diff,
	_HETHER_nut2h0,
	{
		_SRC(nutv6());
		_DST(tn2v6(LINK0_PREFIX, LINK0_PREFIXLEN));
	},
	{
		payload	= payload8;
	}
)



//
// Echo Request: TR1 -> NUT
//
////////////////////////////////

FEM_icmp6_echo_request(
	tr1_ereq_linklocal,
	_HETHER_tr1_to_nut,
	{
		_SRC(v6(TR1_LINKLOCAL));
		_DST(nutv6());
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	tr1_erep_linklocal,
	_HETHER_nut2r0,
	{
		_SRC(nutv6());
		_DST(v6(TR1_LINKLOCAL));
	},
	{
		payload	= payload8;
	}
)
#endif	// HAVE_NDISC_ECHO_DEF
