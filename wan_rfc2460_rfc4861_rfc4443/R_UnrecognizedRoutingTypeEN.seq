#!/usr/bin/perl
#
# Copyright (C) 2013, 2014, 2015
# Chunghwa Telecommunication Labratories (CHT-TL)
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $CHT-TL: R_UnrecognizedRoutingTypeEN.seq,v 1.1 2015/04/28  weifen Exp $
#
######################################################################
BEGIN {
	$V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_2 $';
}

use V6evalTool;
use CommonSPEC;
use lib '../';
use CPE6_config;
use DHCPv6_common;

$pktdesc{'echo_request_rh'}	= 'Send Echo Request with Routing Header contains unrecognized Routing Type';
$pktdesc{'echo_reply'}		= 'Recv Echo Reply';
$pktdesc{'echo_reply_rh_rv'}	= 'Recv Echo Reply with reversal of Routing Header';

$endStatus = $V6evalTool::exitPass;
$IF0 = 'Link0';

vCapture($IF0);
#======================================================================
if ($STATEFUL_CLIENT) {
	my ($ret,$param) = cpe_initialization('ra_MsetOset',$IF0,"",$STATEFUL_CLIENT,0);
	if ($ret==1) {
		vLogHTML('<FONT COLOR="#FF0000"><B>Fail to initialize CPE!</B></FONT><BR>');
		exitFail();
	}
} else {
	vSend($IF0, 'ra_MclearOset');
}
vSleep(5);
#======================================================================
vSend($IF0, 'echo_request_rh');
%ret = nd_vRecv_EN($IF0, $CommonSPEC::wait_reply, 0, 0, 'echo_reply', 'echo_reply_rh_rv','ns_nut_to_tn3');

if ($ret{'status'} == 0) {
	if ($ret{'recvFrame'} eq 'echo_reply') {
		vLogHTML('OK<BR>');
	} elsif ($ret{'recvFrame'} eq 'echo_reply_rh_rv') {
		vLogHTML('Received Reversal of Routing Header<BR>');
		vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
		$endStatus = $V6evalTool::exitFail;
	} else {
	  vSend($IF0, 'na_local');
	  my %ret1 = nd_vRecv_EN($IF0, $CommonSPEC::wait_reply, 0, 0, 'echo_reply', 'echo_reply_rh_rv');
	  if ($ret1{'status'} == 0) {
	    if ($ret1{'recvFrame'} eq 'echo_reply') {
	      vLogHTML('OK<BR>');
	    } elsif ($ret1{'recvFrame'} eq 'echo_reply_rh_rv') {
	      vLogHTML('Received Reversal of Routing Header<BR>');
	      vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
	      $endStatus = $V6evalTool::exitFail;
	    }
	  } else {
	    vLogHTML('Cannot receive Echo Reply<BR>');
	    vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
	    $endStatus = $V6evalTool::exitFail;
	  }
	}
} else {
	vLogHTML('Cannot receive Echo Reply<BR>');
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
	$endStatus = $V6evalTool::exitFail;
}
#----- end test

vStop($IF0);
vRemote('reboot.rmt','');
exit($endStatus);


######################################################################
__END__

=head1 NAME

  Unrecognized Routing Type
  Part A: Unrecognized Routing Type 33

=head1 TARGET

  CE-Router

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./R_UnrecognizedRoutingTypeEN.seq">R_UnrecognizedRoutingTypeEN.seq</A> [-tooloption ...] -pkt <A HREF="./R_UnrecognizedRoutingTypeEN.def">R_UnrecognizedRoutingTypeEN.def</A>
    -tooloption : v6eval tool option
</PRE>

=end html

=head1 INITIALIZATION

  Common Test Setup is performed at the beginning of this test part. 
  The Common Test Cleanup procedure is performed after each part.

=head1 TEST PROCEDURE

Verify that a node properly processes an IPv6 packet destined for it that contains a Routing header with an unrecognized Routing Type value.

   TR                          CE-Router
    |                           |
    |-------------------------->|
    |   ICMP Echo Request       |
    |                           |
    |<--------------------------|
    |   ICMP Echo Reply         |
    |                           |
    v                           v

  1. TR forwards an Echo Request that has a Routing header 
     with a Routing Type valude of 33 and Segments Left value of 0.
     The Echo Request is destined for the CE-Router.
  2. Observe the packets transmitted by the CE-Router.


  Network topology

                                                      (Link0)
                                                 TR           
    Host1 ------ Router1 ------ Router2 ------ Router3 ------ CE-Router
         Global 6       Global 4       Global 2       Global 0

  ICMP Echo Request is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 72
            NextHeader         = 43 (Routing Header)
            SourceAddress      = Global 6 Address (Host1)
            DestinationAddress = CE-Router's Global 0 Address 

        Routing Header
            NextHeader      = 58 (ICMPv6)
            HeaderExtLength = 6
            RoutingType     = 33 (unknown)
            SegmentsLeft    = 0
            Address[1]      = Global 6 Address (Router1)
            Address[2]      = Global 4 Address (Router2)
            Address[3]      = TR's Global 2 Address (Router3)

        ICMP Echo Request
            Type = 128 (Echo Request)

=head1 JUDGEMENT

  PASS: The CE-Router must ignore the unrecognized Routing Type value 
        and should respond to the Request by sending an Echo Reply 
        to Host1 using TR as the first-hop.

    ICMP Echo Reply is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 16
            NextHeader         = 58 (ICMPv6)
            SourceAddress      = CE-Router's Global 0 Address
            DestinationAddress = Global 6 Address (Host1)

        ICMP Echo Reply
            Type = 129 (Echo Reply)

=head1 CLEANUP

Common Test Cleanup

=cut

# =head1 REFERENCE
# 
# RFC2460
# 
# 4.4  Routing Header
# 
#    If, while processing a received packet, a node encounters a Routing
#    header with an unrecognized Routing Type value, the required behavior
#    of the node depends on the value of the Segments Left field, as
#    follows:
# 
# =begin html
# <PRE>
#       <B>If Segments Left is zero, the node must ignore the Routing header
#       and proceed to process the next header in the packet, whose type
#       is identified by the Next Header field in the Routing header.</B>
# </PRE>
# 
# =end html
# 
#       If Segments Left is non-zero, the node must discard the packet and
#       send an ICMP Parameter Problem, Code 0, message to the packet's
#       Source Address, pointing to the unrecognized Routing Type.
# 
# 8.4 Responding to Packets Carrying Routing Headers
# 
#    When an upper-layer protocol sends one or more packets in response to
#    a received packet that included a Routing header, the response
#    packet(s) must not include a Routing header that was automatically
#    derived by "reversing" the received Routing header UNLESS the
#    integrity and authenticity of the received Source Address and Routing
#    header have been verified (e.g., via the use of an Authentication
#    header in the received packet).  In other words, only the following
#    kinds of packets are permitted in response to a received packet
#    bearing a Routing header:
# 
# =begin html
# <PRE>
#       o  <B>Response packets that do not carry Routing headers.</B>
# </PRE>
# 
# =end html
# 
#       o  Response packets that carry Routing headers that were NOT
#          derived by reversing the Routing header of the received packet
#          (for example, a Routing header supplied by local
#          configuration).
# 
#       o  Response packets that carry Routing headers that were derived
#          by reversing the Routing header of the received packet IF AND
#          ONLY IF the integrity and authenticity of the Source Address
#          and Routing header from the received packet have been verified
#          by the responder.
# 

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
[RFC 7084],G-1
[RFC 2460],Sections 4.4
[RFC 5095],Section 3
</PRE>
</BLOCKQUOTE>

=end html

=head1 SEE ALSO

  perldoc V6evalTool

=cut

