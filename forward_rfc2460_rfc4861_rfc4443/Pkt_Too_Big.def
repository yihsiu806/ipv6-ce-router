//
// Copyright (C) 2013
// Chunghwa Telecommunication Labratories (CHT-TL)
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $CHT-TL: Pkt_Too_Big.def,v 1.0 2013/08/19 weifen Exp $

#include "icmp.def"

#define HAS_MULTIPLE_INTERFACES 1
//----------------------------------------------------------------------
// addresses
//----------------------------------------------------------------------
#define PTB_OFFLINK_ADDR v6merge(_GLOBAL1_UCAST_PRFX, _GLOBAL1_UCAST_PRFXLEN, v6("::1"))
#define NUT_GLOBAL_LINK1 v6merge(_GLOBAL1_UCAST_PRFX, _GLOBAL1_UCAST_PRFXLEN, nutv6("Link1"))
#define NUT_ONEOF_ADDR oneof(NUT_GLOBAL_LINK1)
//#define NUT_ONEOF_ADDR oneof(NUT_GLOBAL, nutv6("Link1"), NUT_GLOBAL_LINK1)

//-------mac addr define //for clean cash
#if HAS_MULTIPLE_INTERFACES != 0
_HETHER_define(CLEAN_HETHER1, nutether("Link1"), ether("00:11:22:33:44:55"))
#else	// HAS_MULTIPLE_INTERFACES
_HETHER_define(CLEAN_HETHER1, nutether("Link0"), ether("00:11:22:33:44:55"))
#endif	// HAS_MULTIPLE_INTERFACES

//----------------------------------------------------------------------
// define packets
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Echo Request & Reply
//----------------------------------------------------------------------
#if HAS_MULTIPLE_INTERFACES != 0
_HETHER_define(HETHER_tn2nut_link1, tnether("Link1"), nutether("Link1"))
_HETHER_define(HETHER_nut2tn_link1, nutether("Link1"), tnether("Link1"))
#else	// HAS_MULTIPLE_INTERFACES
_HETHER_define(HETHER_tn2nut_link1, tnether("Link0"), nutether("Link0"))
_HETHER_define(HETHER_nut2tn_link1, nutether("Link0"), tnether("Link0"))
#endif	// HAS_MULTIPLE_INTERFACES

//----------------------------------------------------------------------
// Echo Request
// Link-local address (link1)
//----------------------------------------------------------------------

#if HAS_MULTIPLE_INTERFACES != 0
FEM_icmp6_echo_request (
	echo_request_local_link1,
	HETHER_tn2nut_link1,
	{
		_SRC(tnv6("Link1"));
		_DST(nutv6("Link1"));
	},
	{
		payload = ping_data;
	}
)
#else	// HAS_MULTIPLE_INTERFACES
FEM_icmp6_echo_request (
	echo_request_local_link1,
	HETHER_tn2nut_link1,
	{
		_SRC(tnv6("Link0"));
		_DST(nutv6("Link0"));
	},
	{
		payload = ping_data;
	}
)
#endif	// HAS_MULTIPLE_INTERFACES

//----------------------------------------------------------------------
// Echo Reply
// Link-local address (link1)
//----------------------------------------------------------------------

#if HAS_MULTIPLE_INTERFACES != 0
FEM_icmp6_echo_reply (
	echo_reply_local_link1,
	HETHER_nut2tn_link1,
	{
		_SRC(nutv6("Link1"));
		_DST(tnv6("Link1"));
	},
	{
		payload = ping_data;
	}
)
#else	// HAS_MULTIPLE_INTERFACES
FEM_icmp6_echo_reply (
	echo_reply_local_link1,
	HETHER_nut2tn_link1,
	{
		_SRC(nutv6("Link0"));
		_DST(tnv6("Link0"));
	},
	{
		payload = ping_data;
	}
)
#endif	// HAS_MULTIPLE_INTERFACES

//----------------------------------------------------------------------
// (clean) Echo Reply 
// Link-local address
//----------------------------------------------------------------------

#if HAS_MULTIPLE_INTERFACES != 0
FEM_icmp6_echo_reply(
	clean_echo_reply_link_local_link1,
	CLEAN_HETHER1,
	{
		_SRC(nutv6("Link1"));
		_DST(tnv6("Link1"));
	},
	{
		payload = ping_data;
	}
)
#else	// HAS_MULTIPLE_INTERFACES
FEM_icmp6_echo_reply(
	clean_echo_reply_link_local_link1,
	CLEAN_HETHER1,
	{
		_SRC(nutv6("Link0"));
		_DST(tnv6("Link0"));
	},
	{
		payload = ping_data;
	}
)
#endif	// HAS_MULTIPLE_INTERFACES

//----------------------------------------------------------------------
// Echo request
// TN --> offlink host (link0 side)
//----------------------------------------------------------------------

FEM_icmp6_echo_request (
	echo_request_fwd_link0,
	_HETHER_tn2_to_nut,
	{
		_SRC(TN_GLOBAL);
		_DST(PTB_OFFLINK_ADDR);
		HopLimit = 64;
	},
	{
		payload = ping_data;
	}
)

//----------------------------------------------------------------------
// Echo request
// TN --> offlink host (link1 side)
//----------------------------------------------------------------------

FEM_icmp6_echo_request (
	echo_request_fwd_link1,
	HETHER_nut2tn_link1,
	{
		_SRC(TN_GLOBAL);
		_DST(PTB_OFFLINK_ADDR);
		HopLimit = 63;
	},
	{
		payload = ping_data;
	}
)

//----------------------------------------------------------------------
// Echo reply
// TN <-- offlink host (link0 side)
//----------------------------------------------------------------------

FEM_icmp6_echo_reply (
	echo_reply_fwd_link0,
	_HETHER_nut_to_tn2,
	{
		_SRC(PTB_OFFLINK_ADDR);
		_DST(TN_GLOBAL);
		HopLimit = 63;
	},
	{
		payload = ping_data;
	}
)

//----------------------------------------------------------------------
// Echo reply
// TN <-- offlink host (link1 side)
//----------------------------------------------------------------------

FEM_icmp6_echo_reply (
	echo_reply_fwd_link1,
	HETHER_tn2nut_link1,
	{
		_SRC(PTB_OFFLINK_ADDR);
		_DST(TN_GLOBAL);
		HopLimit = 64;
	},
	{
		payload = ping_data;
	}
)


//----------------------------------------------------------------------
// Echo request
// TN --> offlink host w/ 1500 byte (link0 side)
//----------------------------------------------------------------------

FEM_icmp6_echo_request (
	echo_request_tn2_1500,
	_HETHER_tn2_to_nut,
	{
		_SRC(TN_GLOBAL);
		_DST(PTB_OFFLINK_ADDR);
		HopLimit = 64;
	},
	{
		payload = ping_data_1452;
	}
)

//----------------------------------------------------------------------
// Echo request
// TN --> offlink host (link1 side)
//----------------------------------------------------------------------

FEM_icmp6_echo_request (
	echo_request_1500_link1,
	HETHER_nut2tn_link1,
	{
		_SRC(TN_GLOBAL);
		_DST(PTB_OFFLINK_ADDR);
		HopLimit = 63;
	},
	{
		payload = ping_data_1452;
	}
)

//----------------------------------------------------------------------
// payload
//----------------------------------------------------------------------

Payload ping_data_1452 {
	data = repeat(0xff, 1452);
}

//----------------------------------------------------------------------
// Packet Too Big Message
//----------------------------------------------------------------------
#if HAS_MULTIPLE_INTERFACES != 0
FEM_icmp6_packet_too_big (
	pkt_too_big_link0,
	_HETHER_nut_to_tn2,
	{
		_SRC(NUT_GLOBAL_LINK1);
		_DST(TN_GLOBAL);
		PayloadLength <= MAX_PAYLOAD;
	},
	{
		MTU = 1280;
		payload = any;
	}
)
#else	// HAS_MULTIPLE_INTERFACES
// XXX
#endif	// HAS_MULTIPLE_INTERFACES

Payload err_link0 {
	data = left(_PACKET_IPV6_NAME(echo_request_tn2_1500), 1232);
}

#if HAS_MULTIPLE_INTERFACES != 0
FEM_icmp6_packet_too_big (
	pkt_too_big_link1,
	_HETHER_nut_to_tn2,
	{
		_SRC(oneof(nutv6("Link1"),NUT_GLOBAL));
		_DST(TN_GLOBAL);
		PayloadLength <= MAX_PAYLOAD;
	},
	{
		MTU = 1280;
		payload = any;
	}
)
#else	// HAS_MULTIPLE_INTERFACES
FEM_icmp6_packet_too_big (
	pkt_too_big_link1,
	_HETHER_nut_to_tn2,
	{
		PayloadLength	<= MAX_PAYLOAD;
		_SRC(oneof(nutv6("Link0"),NUT_GLOBAL));
		_DST(TN_GLOBAL);
	},
	{
		MTU	<= 1460;
		payload	= any;
	}
)
#endif	// HAS_MULTIPLE_INTERFACES

#if HAS_MULTIPLE_INTERFACES != 0
FEM_icmp6_packet_too_big (
	pkt_too_big_link1_any,
	_HETHER_nut_to_tn2,
	{
		_SRC(
			oneof(
				nutv6("Link1"),
				NUT_GLOBAL,
				NUT_GLOBAL_LINK1
			)
		);
		_DST(TN_GLOBAL);
		PayloadLength <= MAX_PAYLOAD;
	},
	{
		MTU = 1280;
		payload = any;
	}
)
#else	// HAS_MULTIPLE_INTERFACES
FEM_icmp6_packet_too_big (
	pkt_too_big_link1_any,
	_HETHER_nut_to_tn2,
	{
		_SRC(
			oneof(
				nutv6("Link1"),
				NUT_GLOBAL,
			)
		);
		_DST(TN_GLOBAL);
		PayloadLength <= MAX_PAYLOAD;
	},
	{
		MTU = 1280;
		payload = any;
	}
)
#endif	// HAS_MULTIPLE_INTERFACES

Payload err_link1 {
	data = left(_PACKET_IPV6_NAME(echo_request_1500_link1), 1232);
}
//----------------------------------------------------------------------
// Neighbor Solicitation Messages
//----------------------------------------------------------------------
#if HAS_MULTIPLE_INTERFACES != 0
_HETHER_define(HETHER_nut2tn_oneof_link1, nutether("Link1"), oneof(tnether("Link1"), _ETHER_SOLNODE_MCAST(tnv6("Link1"))))
#else	// HAS_MULTIPLE_INTERFACES
// XXX
#endif	// HAS_MULTIPLE_INTERFACES

#if HAS_MULTIPLE_INTERFACES != 0
_SLLOPT_define(SLLOPT_nut_link1, nutether("Link1"))
#else	// HAS_MULTIPLE_INTERFACES
// XXX
#endif	// HAS_MULTIPLE_INTERFACES

//----------------------------------------------------------------------
// TN <-- NUT (link local address)
// TargetAddress: TN's link local address of link1
// Option: Source link layer address
//----------------------------------------------------------------------

#if HAS_MULTIPLE_INTERFACES != 0
FEM_icmp6_ns (
	ns_local_sll_link1,
	HETHER_nut2tn_oneof,
	{
		_SRC(oneof(nutv6("Link1"), NUT_GLOBAL_LINK1));
		_DST(oneof(_IPV6_SOLNODE_MCAST(tnv6("Link1")), tnv6("Link1")));
		HopLimit = 255;
	},
	{
		TargetAddress = tnv6("Link1");
		option = SLLOPT_nut_link1;
	}
)
#else	// HAS_MULTIPLE_INTERFACES
// XXX
#endif	// HAS_MULTIPLE_INTERFACES

//----------------------------------------------------------------------
// TN <-- NUT (link local address)
// TargetAddress: TN's link local address of link1
// Option: none
//----------------------------------------------------------------------

#if HAS_MULTIPLE_INTERFACES != 0
FEM_icmp6_ns (
	ns_local_link1,
	HETHER_nut2tn_oneof,
	{
		_SRC(oneof(nutv6("Link1"), NUT_GLOBAL_LINK1));
		_DST(oneof(_IPV6_SOLNODE_MCAST(tnv6("Link1")), tnv6("Link1")));
		HopLimit = 255;
	},
	{
		TargetAddress = tnv6("Link1");
	}
)
#else	// HAS_MULTIPLE_INTERFACES
// XXX
#endif	// HAS_MULTIPLE_INTERFACES


//----------------------------------------------------------------------
// (clean)
// TN  <-- NUT (link local address)
// TargetAddress: TN's link local address
// Option : Source link layer address
//----------------------------------------------------------------------

#if HAS_MULTIPLE_INTERFACES != 0
FEM_icmp6_ns(
	clean_ns_local_sll_link1,
	CLEAN_HETHER1,
	{
		_SRC(nutv6("Link1"));
		_DST(tnv6("Link1"));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(TN2_LINKLOCAL);
		option = SLLOPT_nut_link1;
	}
)
#else	// HAS_MULTIPLE_INTERFACES
// XXX
#endif	// HAS_MULTIPLE_INTERFACES


//----------------------------------------------------------------------
// Neighbor Advertisement Messages
//----------------------------------------------------------------------
#if HAS_MULTIPLE_INTERFACES != 0
_TLLOPT_define(TLLOPT_tn_link1, tnether("Link1"))
#else	// HAS_MULTIPLE_INTERFACES
// XXX
#endif	// HAS_MULTIPLE_INTERFACES

//----------------------------------------------------------------------
// TN --> NUT (link local address)
// TargetAddress: TN's link local address of link1
//----------------------------------------------------------------------

#if HAS_MULTIPLE_INTERFACES != 0
FEM_icmp6_na (
	na_local_link1,
	HETHER_tn2nut_link1,
	{
		_SRC(tnv6("Link1"));
		_DST(nutv6("Link1"));
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = tnv6("Link1");
		option = TLLOPT_tn_link1;
	}
)
#else	// HAS_MULTIPLE_INTERFACES
// XXX
#endif	// HAS_MULTIPLE_INTERFACES

//-------mac addr define
//_TLLOPT_define(CLEAN_ETHER,  ether("00:11:22:33:44:55"))

//----------------------------------------------------------------------
// TN --> NUT (link local address)
// TargetAddress: TN's link local address of link1
//----------------------------------------------------------------------

#if HAS_MULTIPLE_INTERFACES != 0
FEM_icmp6_na (
	clean_na_local_link1,
	HETHER_tn2nut_link1,
	{
		_SRC(tnv6("Link1"));
		_DST(nutv6("Link1"));
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 0;
		OFlag = 1;
		TargetAddress = tnv6("Link1");
		//option = TLLOPT_tn_link1;
		option = CLEAN_ETHER;
	}
)
#else	// HAS_MULTIPLE_INTERFACES
// XXX
#endif	// HAS_MULTIPLE_INTERFACES

#define TN_GLOBAL_LINK1 v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL))

#define NUT_GLOBAL_LINK1 v6merge(PREFIX_FROM_PD,64,nutv6("Link1"))

#if HAS_MULTIPLE_INTERFACES != 0
_HETHER_define(
	HETHER_nut2tn_oneof_link1_alt,
	nutether("Link1"),
	oneof(
		TN2_LINKLOCAL,
		_ETHER_SOLNODE_MCAST(TN_GLOBAL_LINK1),
		_ETHER_SOLNODE_MCAST(v6(TN2_LINKLOCAL))
	)
)

FEM_icmp6_echo_request(
	echo_request_global_link1,
	_HETHER_tn2_to_nut,
	{
		_SRC(TN_GLOBAL_LINK1);
		_DST(NUT_GLOBAL_LINK1);
	},
	{
		payload	= ping_data;
	}
)

FEM_icmp6_ns(
	ns_global_link1,
	HETHER_nut2tn_oneof_link1_alt,
	{
		_SRC(oneof(nutv6("Link1"), NUT_GLOBAL_LINK1));
		_DST(oneof(_IPV6_SOLNODE_MCAST(TN_GLOBAL_LINK1),
			TN_GLOBAL_LINK1));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GLOBAL_LINK1;
	}
)

FEM_icmp6_ns(
	ns_global_sll_link1,
	HETHER_nut2tn_oneof_link1_alt,
	{
		_SRC(oneof(nutv6("Link1"), NUT_GLOBAL_LINK1));
		_DST(oneof(
			_IPV6_SOLNODE_MCAST(TN_GLOBAL_LINK1), TN_GLOBAL_LINK1));

		HopLimit	= 255;
	},
	{
		TargetAddress = TN_GLOBAL_LINK1;
		option	= opt_sll_nut_lan;
	}
)

FEM_icmp6_na(
	na_global_link1,
	_HETHER_tn2_to_nut,
	{
		_SRC(TN_GLOBAL_LINK1);
		_DST(NUT_GLOBAL_LINK1);
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = TN_GLOBAL_LINK1;
		option = opt_tll_tn2;
	}
)

FEM_icmp6_echo_reply(
	echo_reply_global_link1,
	_HETHER_nut_to_tn2,
	{
		_SRC(NUT_GLOBAL_LINK1);
		_DST(TN_GLOBAL_LINK1);
	},
	{
		payload = ping_data;
	}
)

FEM_icmp6_na(
	clean_na_global_link1,
	_HETHER_tn2allnodes,
	{
		_SRC(TN_GLOBAL_LINK1);
		_DST(v6(_ALLNODES_MCAST_ADDR));
		HopLimit = 255; 
	},
	{
		RFlag = 1;
		SFlag = 0;
		OFlag = 1;
		TargetAddress = TN_GLOBAL_LINK1;
		option = CLEAN_ETHER;
	}
)
#else	// HAS_MULTIPLE_INTERFACES
#ifndef _GLOBAL10_UCAST_PRFXLEN
#define _GLOBAL10_UCAST_PRFXLEN	64
#endif	// _GLOBAL10_UCAST_PRFXLEN

FEM_hdr_ipv6_exth(
	echo_request_global_link1,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL)));
		_DST(v6merge(PREFIX_FROM_PD,64,nutv6("Link1")));
	},
	{
		header	= _HDR_IPV6_NAME(echo_request_global_link1);
		upper	= _PACKET_IPV6_NAME(echo_request_global_link1_inner);
	}
)

FEM_icmp6_echo_request(
	echo_request_global_link1_inner,
	_HETHER_tn2_to_nut,
	{
		_SRC(TN_GLOBAL_LINK1);
		_DST(NUT_GLOBAL);
	},
	{
		payload	= ping_data;
	}
)

FEM_hdr_ipv6_exth(
	echo_reply_global_link1,
	_HETHER_nut_to_tn2,
	{
		_SRC(v6merge(PREFIX_FROM_PD,64,nutv6("Link1")));
		_DST(v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL)));
	},
	{
		header	= _HDR_IPV6_NAME(echo_reply_global_link1);
		upper	= _PACKET_IPV6_NAME(echo_reply_global_link1_inner);
	}
)

FEM_icmp6_echo_reply(
	echo_reply_global_link1_inner,
	_HETHER_nut_to_tn2,
	{
		_SRC(NUT_GLOBAL);
		_DST(TN_GLOBAL_LINK1);
	},
	{
		payload = ping_data;
	}
)

FEM_hdr_ipv6_exth(
	ns_global_link1,
	_HETHER_nut_to_tn2,
	{
		_SRC(v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL)));
		_DST(v6merge(PREFIX_FROM_PD,64,nutv6("Link1")));
	},
	{
		header	= _HDR_IPV6_NAME(ns_global_link1);
		upper	= _PACKET_IPV6_NAME(ns_global_link1_inner);
	}
)

FEM_icmp6_ns(
	ns_global_link1_inner,
	HETHER_nut2tn_oneof_link1_alt,
	{
		_SRC(oneof(nutv6("Link1"), NUT_GLOBAL));
		_DST(oneof(_IPV6_SOLNODE_MCAST(TN_GLOBAL_LINK1),
			TN_GLOBAL_LINK1));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GLOBAL_LINK1;
	}
)

FEM_hdr_ipv6_exth(
	ns_global_sll_link1,
	_HETHER_nut_to_tn2,
	{
		_SRC(v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL)));
		_DST(v6merge(PREFIX_FROM_PD,64,nutv6("Link1")));
	},
	{
		header	= _HDR_IPV6_NAME(ns_global_sll_link1);
		upper	= _PACKET_IPV6_NAME(ns_global_sll_link1_inner);
	}
)

FEM_icmp6_ns(
	ns_global_sll_link1_inner,
	HETHER_nut2tn_oneof_link1_alt,
	{
		_SRC(oneof(nutv6("Link1"), NUT_GLOBAL));
		_DST(oneof(
			_IPV6_SOLNODE_MCAST(TN_GLOBAL_LINK1), TN_GLOBAL_LINK1));

		HopLimit	= 255;
	},
	{
		TargetAddress = TN_GLOBAL_LINK1;
		option	= opt_sll_nut_lan;
	}
)

FEM_hdr_ipv6_exth(
	na_global_link1,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL)));
		_DST(v6merge(PREFIX_FROM_PD,64,nutv6("Link1")));
	},
	{
		header	= _HDR_IPV6_NAME(na_global_link1);
		upper	= _PACKET_IPV6_NAME(na_global_link1_inner);
	}
)

FEM_icmp6_na(
	na_global_link1_inner,
	_HETHER_tn2_to_nut,
	{
		_SRC(TN_GLOBAL_LINK1);
		_DST(NUT_GLOBAL);
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = TN_GLOBAL_LINK1;
		option = opt_tll_tn2;
	}
)

FEM_hdr_ipv6_exth(
	clean_na_global_link1,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL)));
		_DST(v6merge(PREFIX_FROM_PD,64,nutv6("Link1")));
	},
	{
		header	= _HDR_IPV6_NAME(clean_na_global_link1);
		upper	= _PACKET_IPV6_NAME(clean_na_global_link1_inner);
	}
)

FEM_icmp6_na(
	clean_na_global_link1_inner,
	_HETHER_tn2allnodes,
	{
		_SRC(TN_GLOBAL_LINK1);
		_DST(v6(_ALLNODES_MCAST_ADDR));
		HopLimit = 255; 
	},
	{
		RFlag = 1;
		SFlag = 0;
		OFlag = 1;
		TargetAddress = TN_GLOBAL_LINK1;
		option = CLEAN_ETHER;
	}
)
#endif	// HAS_MULTIPLE_INTERFACES

Opt_ICMPv6_MTU opt_mtu_ra_1280 {
	MTU = 1280;
}

//================================================================
//  CE-Router Advertisement with prefix information option
//                       which M flags is 1 and O flag is 1
FEM_icmp6_ra(
	ra_MsetOset_local,
	_HETHER_tr1_to_allnodes,
	{
		_SRC(v6(TR1_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
		HopLimit	= 255;
	},
	{
		CurHopLimit	= 64;
		MFlag		= 1;
		OFlag		= 1;
		LifeTime	= 600;
		ReachableTime	= _Default_AdvReachableTime;
		RetransTimer	= _Default_AdvRetransTimer;
		option		= opt_sll_tr1;
		option		= opt_prefix_LsetAclear;
		option    = opt_mtu_ra_1280;
	}
)

//================================================================
//  CE-Router Advertisement with prefix information option
//                       which M flags is 0 and O flag is 1
FEM_icmp6_ra(
	ra_MclearOset_local,
	_HETHER_tr1_to_allnodes,
	{
		_SRC(v6(TR1_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
		HopLimit	= 255;
	},
	{
		CurHopLimit	= 64;
		MFlag		= 0;
		OFlag		= 1;
		LifeTime	= 600;
		ReachableTime	= _Default_AdvReachableTime;
		RetransTimer	= _Default_AdvRetransTimer;
		option		= opt_sll_tr1;
		option		= opt_prefix_LsetAset;
		option    = opt_mtu_ra_1280;
	}
)

// NS  NUT -> TN2
FEM_icmp6_ns (
	ns_nut_lla_to_any_tn2_ga,
	_HETHER_any,
	{
	    _SRC(any);
	    _DST(any);
	    HopLimit = 255;
	},
	{
	    TargetAddress = v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL));
	    option = any;
	}
)

// NA  NUT <- TN2
FEM_icmp6_na (
	na_tn2_to_nut,
	_HETHER_tn2_to_nut,
	{
	    _SRC(v6(TN2_LINKLOCAL));
	    _DST(nutv6("Link1"));	    
	    HopLimit = 255;
	},
	{
	    RFlag = 0;
	    SFlag = 1;
	    OFlag = 1;
	    TargetAddress = v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL));
	    option = opt_tll_tn2;
	}
)
