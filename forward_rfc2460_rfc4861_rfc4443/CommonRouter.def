//
// Copyright (C) 2013
// Chunghwa Telecommunication Labratories (CHT-TL)
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $CHT-TL: CommonRouter.def,v 1.0 2013/08/19 weifen Exp $
//

#include "./CommonHost.def"


#define TN_GL1_ADDR v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL))
#define NUT_GL1_ADDR v6merge(PREFIX_FROM_PD,64,nutv6("Link1"))

#define	CLEANUP_ETHER_LINK1	"00:11:33:66:00:55"

#ifndef	IS_ROUTER_LINK1
#define	IS_ROUTER_LINK1		0
#endif

//================ for ND (Link1) ================//

//===== Neighbor Solicitation

// NS; Global to Link-Local
FEM_icmp6_ns(
	ns_g2l_link1,
	_HETHER_nut_to_tn2solnode,
	{
		_SRC(NUT_GL1_ADDR);
		_DST(_IPV6_SOLNODE_MCAST(v6(TN2_LINKLOCAL)));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(TN2_LINKLOCAL);
		option = opt_sll_nut_lan;
	}
)

FEM_icmp6_ns(
	u_ns_g2l_link1,
	_HETHER_nut_to_tn2,
	{
		_SRC(NUT_GL1_ADDR);
		_DST(v6(TN2_LINKLOCAL));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(TN2_LINKLOCAL);
		option = opt_sll_nut_lan;
	}
)

FEM_icmp6_ns(
	u_ns_g2l_wo_link1,
	_HETHER_nut_to_tn2,
	{
		_SRC(NUT_GL1_ADDR);
		_DST(v6(TN2_LINKLOCAL));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(TN2_LINKLOCAL);
	}
)

// NS; Link-Local to Global
FEM_icmp6_ns(
	ns_l2g_link1,
	_HETHER_nut_to_tn2solnode,
	{
		_SRC(nutv6("Link1"));
		_DST(_IPV6_SOLNODE_MCAST(TN_GL1_ADDR));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL1_ADDR;
		option = opt_sll_nut_lan;
	}
)

FEM_icmp6_ns(
	u_ns_l2g_link1,
	_HETHER_nut_to_tn2,
	{
		_SRC(nutv6("Link1"));
		_DST(TN_GL1_ADDR);
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL1_ADDR;
		option = opt_sll_nut_lan;
	}
)

FEM_icmp6_ns(
	u_ns_l2g_wo_link1,
	_HETHER_nut_to_tn2,
	{
		_SRC(nutv6("Link1"));
		_DST(TN_GL1_ADDR);
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL1_ADDR;
	}
)

// NS; Global to Global
FEM_icmp6_ns(
	ns_g2g_link1,
	_HETHER_nut_to_tn2solnode,
	{
		_SRC(NUT_GL1_ADDR);
		_DST(_IPV6_SOLNODE_MCAST(TN_GL1_ADDR));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL1_ADDR;
		option = opt_sll_nut_lan;
	}
)

FEM_icmp6_ns(
	u_ns_g2g_link1,
	_HETHER_nut_to_tn2,
	{
		_SRC(NUT_GL1_ADDR);
		_DST(TN_GL1_ADDR);
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL1_ADDR;
		option = opt_sll_nut_lan;
	}
)

FEM_icmp6_ns(
	u_ns_g2g_wo_link1,
	_HETHER_nut_to_tn2,
	{
		_SRC(NUT_GL1_ADDR);
		_DST(TN_GL1_ADDR);
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL1_ADDR;
	}
)


//===== Neighbor Advertisement

// NA; Link-Local to Link-Local
FEM_icmp6_na(
	na_l2l_link1,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
		HopLimit = 255;
	},
	{
		RFlag = IS_ROUTER_LINK1;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = v6(TN2_LINKLOCAL);
		option = opt_tll_tn2;
	}
)

// NA; Link-Local to Global
FEM_icmp6_na(
	na_l2g_link1,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(NUT_GL1_ADDR);
		HopLimit = 255;
	},
	{
		RFlag = IS_ROUTER_LINK1;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = v6(TN2_LINKLOCAL);
		option = opt_tll_tn2;
	}
)

// NA; Global to Link-Local
FEM_icmp6_na(
	na_g2l_link1,
	_HETHER_tn2_to_nut,
	{
		_SRC(TN_GL1_ADDR);
		_DST(nutv6("Link1"));
		HopLimit = 255;
	},
	{
		RFlag = IS_ROUTER_LINK1;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = TN_GL1_ADDR;
		option = opt_tll_tn2;
	}
)

// NA; Global to Global
FEM_icmp6_na(
	na_g2g_link1,
	_HETHER_tn2_to_nut,
	{
		_SRC(TN_GL1_ADDR);
		_DST(NUT_GL1_ADDR);
		HopLimit = 255;
	},
	{
		RFlag = IS_ROUTER_LINK1;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = TN_GL1_ADDR;
		option = opt_tll_tn2;
	}
)


//================ for Common Setup ================//

// none


//================ for Common Cleanup ================//
//===== Neighbor Advertisement

// NA; Link-Local
FEM_icmp6_na(
	cleanup_na_1,
	_HETHER_tn2allnodes,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
		HopLimit = 255;
	},
	{
		RFlag = IS_ROUTER_LINK1;
		SFlag = 0;
		OFlag = 1;
		TargetAddress = v6(TN2_LINKLOCAL);
		option = DifferentLLA_1;
	}
)

// NA; Global
FEM_icmp6_na(
	cleanup_na_g_1,
	_HETHER_tn2allnodes,
	{
		_SRC(TN_GL1_ADDR);
		_DST(v6(_ALLNODES_MCAST_ADDR));
		HopLimit = 255;
	},
	{
		RFlag = IS_ROUTER_LINK1;
		SFlag = 0;
		OFlag = 1;
		TargetAddress = TN_GL1_ADDR;
		option = DifferentLLA_1;
	}
)

Opt_ICMPv6_TLL DifferentLLA_1 {
        LinkLayerAddress = ether(CLEANUP_ETHER_LINK1);
}

//===== Echo Request

FEM_icmp6_echo_request(
	cleanup_echo_request_1,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
		HopLimit = 255;
	},
	{
		payload = setup_echo_data8;
	}
)

FEM_icmp6_echo_request(
	cleanup_echo_request_g_1,
	_HETHER_tn2_to_nut,
	{
		_SRC(TN_GL1_ADDR);
		_DST(NUT_GL1_ADDR);
		HopLimit = 255;
	},
	{
		payload = setup_echo_data8;
	}
)


//======================================================================
//
// Payload Data
//

// Payload setup_echo_data8 {	### defined in CommonHost.def ###
// 	data = {1, 2, 3, 4, 5, 6, 7, 8};
// }


// NS  NUT -> TN1
FEM_icmp6_ns (
	ns_nut_lla_to_any_tn1_ga,
	_HETHER_any,
	{
	    _SRC(any);
	    _DST(any);
	    HopLimit = 255;
	},
	{
	    TargetAddress = v6merge(_PF2_PREFIX,64,v6(TN1_LINKLOCAL));
	    option = any;
	}
)

// NA  NUT <- TN1
FEM_icmp6_na (
	na_tn1_to_nut,
	_HETHER_tn1_to_nut,
	{
	    _SRC(v6(TN1_LINKLOCAL));
	    _DST(nutv6());	    
	    HopLimit = 255;
	},
	{
	    RFlag = 0;
	    SFlag = 1;
	    OFlag = 1;
	    TargetAddress = v6merge(_PF2_PREFIX,64,v6(TN1_LINKLOCAL));
	    option = opt_tll_tn1;
	}
)
