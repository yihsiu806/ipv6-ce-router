//
// Copyright (C) 2013
// Chunghwa Telecommunication Labratories (CHT-TL)
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $CHT-TL: To_ICMPErr_Dst_Unreach_0.def,v 1.0 2013/08/19 weifen Exp $
//

#include "icmp.def"
//----------------------------------------------------------------------
// ICMP echo request
//----------------------------------------------------------------------

FEM_icmp6_echo_request(
	echo_request,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		payload = ping_data1232;
	}
)
//----------------------------------------------------------------------
// payload  data
//----------------------------------------------------------------------

Payload ping_data1232 {
	data = repeat(0xff,1232);
}

//----------------------------------------------------------------------
// ICMP echo reply
//----------------------------------------------------------------------

FEM_icmp6_echo_reply(
	echo_reply,
	_HETHER_nut_to_tn2,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TN2_LINKLOCAL));
	},
	{
		payload = ping_data;
	}
)



//----------------------------------------------------------------------
// Destination Unreachable
//----------------------------------------------------------------------

#define UNKNOWN_ADDR v6merge(PREFIX_FROM_PD, 64, v6("::777"))

FEM_icmp6_destination_unreachable(
	dst_unreach,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(UNKNOWN_ADDR);
	},
	{
		Code = 0;
		payload = unreach0;
	}
)

Payload unreach0 {
	data = right(_PACKET_IPV6_NAME(echo_reply), 0);
}

// ICMP error from NUT
FEM_icmp6_destination_unreachable(
	dst_unreach_from_nut,
	_HETHER_nut_to_tn2,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TN2_LINKLOCAL));
	},
	{
		Code = 3;
		//payload = unreach1;
		payload = any;
	}
)

Payload unreach1 {
	data = right(_PACKET_IPV6_NAME(dst_unreach), 0);
}

//----------------------------------------------------------------------
// ICMP Parameter Problem and data
//----------------------------------------------------------------------

FEM_icmp6_parameter_problem(
	parameter_problem,
	_HETHER_nut_to_tn2,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TN2_LINKLOCAL));
	},
	{
		Code = 1;	// unrecognized Next Header type encounted
		Pointer = 40;
		payload = any;
	}
)

//----------------------------------------------------------------------
// Neighbor Solicitation and Neighbor Advertisement
//----------------------------------------------------------------------

// NS  NUT -> TN2
FEM_icmp6_ns (
	ns_nut_lla_to_any_tn2_ga,
	_HETHER_any,
	{
	    _SRC(any);
	    _DST(any);
	    HopLimit = 255;
	},
	{
	    TargetAddress = v6(TN2_LINKLOCAL);
	    option = any;
	}
)

// NA  NUT <- TN2
FEM_icmp6_na (
	na_tn2_to_nut,
	_HETHER_tn2_to_nut,
	{
	    _SRC(v6(TN2_LINKLOCAL));
	    _DST(nutv6("Link1"));	    
	    HopLimit = 255;
	},
	{
	    RFlag = 0;
	    SFlag = 1;
	    OFlag = 1;
	    TargetAddress = v6(TN2_LINKLOCAL);
	    option = opt_tll_tn2;
	}
)
