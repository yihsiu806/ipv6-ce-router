//
// Copyright (C) 2013
// Chunghwa Telecommunication Labratories (CHT-TL)
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $CHT-TL: CommonHost.def,v 1.0 2013/08/19 weifen Exp $
//

#include "../CPE6_common.def"

#define TN_GL0_ADDR tn2v6(_GLOBAL0_UCAST_PRFX,_GLOBAL0_UCAST_PRFXLEN,"Link0")
#define NUT_GL0_ADDR nut2v6(_GLOBAL0_UCAST_PRFX,_GLOBAL0_UCAST_PRFXLEN,"Link0")

#define	PING_ID	0xffff
#define	PING_SN	0x0001

#define	CLEANUP_ETHER_LINK0	"00:11:33:77:55:11"

#ifndef	IS_ROUTER_LINK0
#define	IS_ROUTER_LINK0		0
#endif

//================ for ND ================//

// ===== Neighbor Solicitation

// NS; Link-Local to Link-Local
FEM_icmp6_ns(
	ns_l2l,
	_HETHER_nut2tnsolnode,
	{
		_SRC(nutv6());
		_DST(_IPV6_SOLNODE_MCAST(tnv6()));
		HopLimit = 255;
	},
	{
		TargetAddress = tnv6();
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_ns(
	u_ns_l2l,
	_HETHER_nut2tn,
	{
		_SRC(nutv6());
		_DST(tnv6());
		HopLimit = 255;
	},
	{
		TargetAddress = tnv6();
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_ns(
	u_ns_l2l_wo,
	_HETHER_nut2tn,
	{
		_SRC(nutv6());
		_DST(tnv6());
		HopLimit = 255;
	},
	{
		TargetAddress = tnv6();
	}
)

// NS; Global to Link-Local
FEM_icmp6_ns(
	ns_g2l,
	_HETHER_nut2tnsolnode,
	{
		_SRC(NUT_GL0_ADDR);
		_DST(_IPV6_SOLNODE_MCAST(tnv6()));
		HopLimit = 255;
	},
	{
		TargetAddress = tnv6();
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_ns(
	u_ns_g2l,
	_HETHER_nut2tn,
	{
		_SRC(NUT_GL0_ADDR);
		_DST(tnv6());
		HopLimit = 255;
	},
	{
		TargetAddress = tnv6();
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_ns(
	u_ns_g2l_wo,
	_HETHER_nut2tn,
	{
		_SRC(NUT_GL0_ADDR);
		_DST(tnv6());
		HopLimit = 255;
	},
	{
		TargetAddress = tnv6();
	}
)

// NS; Link-Local to Global
FEM_icmp6_ns(
	ns_l2g,
	_HETHER_nut2tnsolnode,
	{
		_SRC(nutv6());
		_DST(_IPV6_SOLNODE_MCAST(TN_GL0_ADDR));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL0_ADDR;
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_ns(
	u_ns_l2g,
	_HETHER_nut2tn,
	{
		_SRC(nutv6());
		_DST(TN_GL0_ADDR);
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL0_ADDR;
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_ns(
	u_ns_l2g_wo,
	_HETHER_nut2tn,
	{
		_SRC(nutv6());
		_DST(TN_GL0_ADDR);
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL0_ADDR;
	}
)

// NS; Global to Global
FEM_icmp6_ns(
	ns_g2g,
	_HETHER_nut2tnsolnode,
	{
		_SRC(NUT_GL0_ADDR);
		_DST(_IPV6_SOLNODE_MCAST(TN_GL0_ADDR));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL0_ADDR;
		option = _SLLOPT_nut;
	}
)

// Unicast NS; Global to Global
FEM_icmp6_ns(
	u_ns_g2g,
	_HETHER_nut2tn,
	{
		_SRC(NUT_GL0_ADDR);
		_DST(TN_GL0_ADDR);
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL0_ADDR;
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_ns(
	u_ns_g2g_wo,
	_HETHER_nut2tn,
	{
		_SRC(NUT_GL0_ADDR);
		_DST(TN_GL0_ADDR);
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL0_ADDR;
	}
)


//===== Neighbor Advertisement

// NA; Link-Local to Link-Local
FEM_icmp6_na(
	na_l2l,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
		HopLimit = 255;
	},
	{
		RFlag = IS_ROUTER_LINK0;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = tnv6();
		option = _TLLOPT_tn;
	}
)

// NA; Link-Local to Global
FEM_icmp6_na(
	na_l2g,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(NUT_GL0_ADDR);
		HopLimit = 255;
	},
	{
		RFlag = IS_ROUTER_LINK0;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = tnv6();
		option = _TLLOPT_tn;
	}
)

// NA; Global to Link-Local
FEM_icmp6_na(
	na_g2l,
	_HETHER_tn2nut,
	{
		_SRC(TN_GL0_ADDR);
		_DST(nutv6());
		HopLimit = 255;
	},
	{
		RFlag = IS_ROUTER_LINK0;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = TN_GL0_ADDR;
		option = _TLLOPT_tn;
	}
)

// NA; Global to Global
FEM_icmp6_na(
	na_g2g,
	_HETHER_tn2nut,
	{
		_SRC(TN_GL0_ADDR);
		_DST(NUT_GL0_ADDR);
		HopLimit = 255;
	},
	{
		RFlag = IS_ROUTER_LINK0;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = TN_GL0_ADDR;
		option = _TLLOPT_tn;
	}
)


//================ for Common Setup ================//
//======================================================================
//
// RA / DADNS
//

FEM_icmp6_ra(
	setup_ra,
	_HETHER_tn2allnodes,
	{
		_SRC(tnv6());
		_DST(v6(_ALLNODES_MCAST_ADDR));
		HopLimit = 255;
	},
	{
		CurHopLimit = 64;
		LifeTime = 1805;
		ReachableTime = 30005;
		RetransTimer = 1005;
		option = _SLLOPT_src;
		option = setup_prefixopt;
	}
)

Opt_ICMPv6_Prefix setup_prefixopt {
	PrefixLength = 64;
	LFlag = 1;
	AFlag = 1;
	ValidLifetime = 10000;
	PreferredLifetime = 10000;
	Prefix = v6(_GLOBAL0_UCAST_PRFX);
}

FEM_icmp6_ns (
	setup_dadns,
	_HETHER_nut2nutsolnode,
	{
		_SRC(v6(_UNSPEC_ADDR));
		_DST(_IPV6_SOLNODE_MCAST(NUT_GL0_ADDR));
		HopLimit = 255;
	},
	{
		TargetAddress = NUT_GL0_ADDR;
	}
)


//======================================================================
//
// Echo Request
//

FEM_icmp6_echo_request(
	setup_echo_request_g,
	_HETHER_tn2nut,
	{
		_SRC(TN_GL0_ADDR);
		_DST(NUT_GL0_ADDR);
		HopLimit = 255;
	},
	{
		payload = setup_echo_data8;
	}
)

FEM_icmp6_echo_request(
	setup_echo_request,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
		HopLimit = 255;
	},
	{
		payload = setup_echo_data8;
	}
)


//======================================================================
//
// Echo Reply
//

FEM_icmp6_echo_reply(
	setup_echo_reply_g,
	_HETHER_nut2tn,
	{
		_SRC(NUT_GL0_ADDR);
		_DST(TN_GL0_ADDR);
	},
	{
		payload = setup_echo_data8;
	}
)

FEM_icmp6_echo_reply(
	setup_echo_reply,
	_HETHER_nut2tn,
	{
		_SRC(nutv6());
		_DST(tnv6());
	},
	{
		payload = setup_echo_data8;
	}
)


// for test setup and cleanup CERouter.1.3.2

#ifndef TR1_MAC
#define TR1_MAC         A0N_MAC_ADDR
#endif  // TR1_MAC

_HETHER_define(
        _HETHER_nut_to_tr1solnode,
        nutether(),
        _ETHER_SOLNODE_MCAST(v6(TR1_LINKLOCAL))
)

FEM_icmp6_echo_request(
	setup_echo_request_tr1,
	_HETHER_tr1_to_nut,
	{
		_SRC(v6(TR1_LINKLOCAL));
		_DST(nutv6());
		HopLimit = 255;
	},
	{
		payload = setup_echo_data8;
	}
)

FEM_icmp6_echo_reply(
	setup_echo_reply_tr1,
	_HETHER_nut_to_tr1,
	{
		_SRC(nutv6());
		_DST(v6(TR1_LINKLOCAL));
	},
	{
		payload = setup_echo_data8;
	}
)

FEM_icmp6_ra(
	setup_ra_tr1,
	_HETHER_tr1_to_allnodes,
	{
		_SRC(v6(TR1_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
		HopLimit = 255;
	},
	{
		CurHopLimit = 64;
		LifeTime = 1805;
		ReachableTime = 30005;
		RetransTimer = 1005;
		option = setup_prefixopt;
	}
)

FEM_icmp6_ns(
	ns_l2l_tr1,
	_HETHER_nut_to_tr1solnode,
	{
		_SRC(nutv6());
		_DST(_IPV6_SOLNODE_MCAST(v6(TR1_LINKLOCAL)));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(TR1_LINKLOCAL);
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_ns(
	ns_g2l_tr1,
	_HETHER_nut_to_tr1solnode,
	{
		_SRC(NUT_GL0_ADDR);
		_DST(_IPV6_SOLNODE_MCAST(v6(TR1_LINKLOCAL)));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(TR1_LINKLOCAL);
		option = _SLLOPT_nut;
	}
)

// NA; Link-Local to Link-Local
FEM_icmp6_na(
	na_l2l_tr1,
	_HETHER_tr1_to_nut,
	{
		_SRC(v6(TR1_LINKLOCAL));
		_DST(nutv6());
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = v6(TR1_LINKLOCAL);
		option = TLLOPT_tr1;
	}
)

// NA; Link-Local to Global
FEM_icmp6_na(
	na_l2g_tr1,
	_HETHER_tr1_to_nut,
	{
		_SRC(v6(TR1_LINKLOCAL));
		_DST(NUT_GL0_ADDR);
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = v6(TR1_LINKLOCAL);
		option = TLLOPT_tr1;
	}
)

Opt_ICMPv6_TLL TLLOPT_tr1 {
	LinkLayerAddress = ether(TR1_MAC);
}

FEM_icmp6_ra(
	cleanup_ra_tr1,
	_HETHER_tr1_to_allnodes,
	{
		_SRC(v6(TR1_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
		HopLimit = 255;
	},
	{
		CurHopLimit = 64;
		LifeTime = 0;
		ReachableTime = 30005;
		RetransTimer = 1005;
		//		option = _SLLOPT_src;
		option = cleanup_prefixopt;
	}
)

// NA; Link-Local
FEM_icmp6_na(
	cleanup_na_tr1,
	_HETHER_tr1_to_allnodes,
	{
		_SRC(v6(TR1_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 0;
		OFlag = 1;
		TargetAddress = v6(TR1_LINKLOCAL);
		option = DifferentLLA;
	}
)

FEM_icmp6_echo_request(
	cleanup_echo_request_tr1,
	_HETHER_tr1_to_nut,
	{
		_SRC(v6(TR1_LINKLOCAL));
		_DST(nutv6());
		HopLimit = 255;
	},
	{
		payload = setup_echo_data8;
	}
)
