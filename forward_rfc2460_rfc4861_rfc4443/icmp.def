//
// Copyright (C) 2013
// Chunghwa Telecommunication Labratories (CHT-TL)
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $CHT-TL: icmp.def,v 1.0 2013/08/19 weifen Exp $
//
#include "../CPE6_common.def"

//----------------------------------------------------------------------
// Address
//----------------------------------------------------------------------
#define TN_GLOBAL v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL))
#define NUT_GLOBAL v6merge(PREFIX_FROM_PD,64,nutv6("Link1"))
#define OFFLINK_GLOBAL v6(_GLOBAL5A0N_UCAST_ADDR)

//-------Unspecified Address-------
#define UNSPEC_ADDR v6("::")
#define MCAST_GLOBAL v6("ff1e::abcd")
#define ANY_CAST_ADDR v6( _GLOBAL0_UCAST_PRFX)

//-------minimum IPv6 MUT - 40 ---------
//      Error message must not exceed minimum IPv6 MTU
#define MAX_PAYLOAD 1240

//-------mac addr define //for clean cash
_TLLOPT_define(CLEAN_ETHER,  ether("00:11:22:33:44:55"))
_HETHER_define(CLEAN_HETHER, nutether("Link1"), ether("00:11:22:33:44:55"))

//----------------------------------------------------------------------
// define Packets
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Echo Request
// Link-local address
//----------------------------------------------------------------------

FEM_icmp6_echo_request(
	echo_request_link_local,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		payload = ping_data;
	}
)  

//----------------------------------------------------------------------
// Echo Request
// Global address
//----------------------------------------------------------------------

FEM_icmp6_echo_request(
	echo_request_global,
	_HETHER_tn2_to_nut,
	{
		_SRC(TN_GLOBAL);
		_DST(NUT_GLOBAL);
	},
	{
		payload = ping_data;
	}
)  

//----------------------------------------------------------------------
// Echo Reply 
// Link-local address
//----------------------------------------------------------------------

FEM_icmp6_echo_reply(
	echo_reply_link_local,
	_HETHER_nut_to_tn2,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TN2_LINKLOCAL));
	},
	{
		payload = ping_data;
	}
)

//----------------------------------------------------------------------
// Echo Reply 
// Global address
//----------------------------------------------------------------------

FEM_icmp6_echo_reply(
	echo_reply_global,
	_HETHER_nut_to_tn2,
	{
		_SRC(NUT_GLOBAL);
		_DST(TN_GLOBAL);
	},
	{
		payload = ping_data;
	}
)

//for clean cash

//----------------------------------------------------------------------
// (clean) Echo Reply 
// Link-local address
//----------------------------------------------------------------------

FEM_icmp6_echo_reply(
	clean_echo_reply_link_local,
	CLEAN_HETHER,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TN2_LINKLOCAL));
	},
	{
		payload = ping_data;
	}
)

//----------------------------------------------------------------------
// (clean) Echo Reply 
// Global address
//----------------------------------------------------------------------

FEM_icmp6_echo_reply(
	clean_echo_reply_global,
	CLEAN_HETHER,
	{
		_SRC(NUT_GLOBAL);
		_DST(TN_GLOBAL);
	},
	{
		payload = ping_data;
	}
)



//----------------------------------------------------------------------
// payload  data
//----------------------------------------------------------------------

Payload ping_data {
	data = repeat(0xff,6);
}

//----------------------------------------------------------------------
// Neighbor Solicitation Messages
//----------------------------------------------------------------------

_HETHER_define(HETHER_nut2tn_oneof,  nutether("Link1"), oneof(TN2_LINKLOCAL,_ETHER_SOLNODE_MCAST(TN_GLOBAL),_ETHER_SOLNODE_MCAST(v6(TN2_LINKLOCAL))))

//----------------------------------------------------------------------
// TN  <-- NUT (link local address)
// TargetAddress: TN's link local address
// Option : Source link layer address
//----------------------------------------------------------------------

FEM_icmp6_ns(
	ns_local_sll,
	HETHER_nut2tn_oneof,
	{
		_SRC(oneof(nutv6("Link1"), NUT_GLOBAL));
		_DST(oneof(_IPV6_SOLNODE_MCAST(v6(TN2_LINKLOCAL)), v6(TN2_LINKLOCAL)));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(TN2_LINKLOCAL);
		option = opt_sll_nut_lan;
	}
)

//----------------------------------------------------------------------
// TN  <-- NUT (link local address)
// TargetAddress: TN's link local address
// Option : none
//----------------------------------------------------------------------

FEM_icmp6_ns(
	ns_local,
	HETHER_nut2tn_oneof,
	{
		_SRC(oneof(nutv6("Link1"), NUT_GLOBAL));
		_DST(oneof(_IPV6_SOLNODE_MCAST(v6(TN2_LINKLOCAL)), v6(TN2_LINKLOCAL)));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(TN2_LINKLOCAL);
	}
)

//----------------------------------------------------------------------
// TN  <-- NUT
// Source address: NUT's global address
// TargetAddress: TN's global address
// Option : Source link layer address
//----------------------------------------------------------------------

FEM_icmp6_ns(
	ns_global_sll,
	HETHER_nut2tn_oneof,
	{
		_SRC(oneof(nutv6("Link1"), NUT_GLOBAL));
		_DST(oneof(_IPV6_SOLNODE_MCAST(TN_GLOBAL), TN_GLOBAL));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GLOBAL;
		option = opt_sll_nut_lan;
	}
)

//----------------------------------------------------------------------
// TN  <-- NUT
// Source address: NUT's link-local address
// TargetAddress: TN's global address
// Option : Source link layer address
//----------------------------------------------------------------------

FEM_icmp6_ns(
	ns_global_sll_from_local,
	HETHER_nut2tn_oneof,
	{
		_SRC(oneof(nutv6("Link1"), NUT_GLOBAL));
		_DST(oneof(_IPV6_SOLNODE_MCAST(TN_GLOBAL), TN_GLOBAL));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GLOBAL;
		option = opt_sll_nut_lan;
	}
)

//----------------------------------------------------------------------
// TN  <-- NUT
// Source address: NUT's global address
// TargetAddress: TN's global address
// Option : none
//----------------------------------------------------------------------

FEM_icmp6_ns(
	ns_global,
	HETHER_nut2tn_oneof,
	{
		_SRC(oneof(nutv6("Link1"), NUT_GLOBAL));
		_DST(oneof(_IPV6_SOLNODE_MCAST(TN_GLOBAL), TN_GLOBAL));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GLOBAL;
	}
)

//----------------------------------------------------------------------
// TN  <-- NUT (global address)
// Source address: NUT's link-local address
// TargetAddress: TN's global address
// Option : none
//----------------------------------------------------------------------

FEM_icmp6_ns(
	ns_global_from_local,
	HETHER_nut2tn_oneof,
	{
		_SRC(oneof(nutv6("Link1"), NUT_GLOBAL));
		_DST(oneof(_IPV6_SOLNODE_MCAST(TN_GLOBAL), TN_GLOBAL));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GLOBAL;
	}
)


// for clean cash

//----------------------------------------------------------------------
// (clean)
// TN  <-- NUT (link local address)
// TargetAddress: TN's link local address
// Option : Source link layer address
//----------------------------------------------------------------------

FEM_icmp6_ns(
	clean_ns_local_sll,
	CLEAN_HETHER,
	{
		_SRC(oneof(nutv6("Link1"),NUT_GLOBAL));
		_DST(oneof(v6(TN2_LINKLOCAL),TN_GLOBAL));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(TN2_LINKLOCAL);
		option = opt_sll_nut_lan;
	}
)
//----------------------------------------------------------------------
// (clean)
// TN  <-- NUT
// Source address: NUT's global address
// TargetAddress: TN's global address
// Option : Source link layer address
//----------------------------------------------------------------------

FEM_icmp6_ns(
	clean_ns_global_sll,
	CLEAN_HETHER,
	{
		_SRC(oneof(nutv6("Link1"),NUT_GLOBAL));
		_DST(oneof(v6(TN2_LINKLOCAL),TN_GLOBAL));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GLOBAL;
		option = opt_sll_nut_lan;
	}
)



//----------------------------------------------------------------------
// Neighber Advertisement Messages
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// TN  (link local address)--> NUT (link local address)
// TargetAddress: TN's link local address
//----------------------------------------------------------------------

FEM_icmp6_na(
	na_local,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = v6(TN2_LINKLOCAL);
		option = opt_tll_tn2;
	}
)

//----------------------------------------------------------------------
// TN  (global address)--> NUT (global address)
// TargetAddress: TN's global address
//----------------------------------------------------------------------

FEM_icmp6_na(
	na_global,
	_HETHER_tn2_to_nut,
	{
		_SRC(TN_GLOBAL);
		_DST(NUT_GLOBAL);
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = TN_GLOBAL;
		option = opt_tll_tn2;
	}
)

//----------------------------------------------------------------------
// TN  (global address)--> NUT (link-local address)
// TargetAddress: TN's global address
//----------------------------------------------------------------------

FEM_icmp6_na(
	na_global_to_local,
	_HETHER_tn2_to_nut,
	{
		_SRC(TN_GLOBAL);
		_DST(nutv6("Link1"));
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = TN_GLOBAL;
		option = opt_tll_tn2;
	}
)

//----------------------------------------------------------------------
// TN  (link local address)--> NUT (link local address)
// TargetAddress: TN's link local address
// Override Neighbor Cache Entry(cleanup)
//----------------------------------------------------------------------

FEM_icmp6_na(
	clean_na_local,
	_HETHER_tn2allnodes,
	{
		_SRC(v6(TN2_LINKLOCAL));
//		_DST(nutv6("Link1"));
		_DST(v6(_ALLNODES_MCAST_ADDR));
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 0;
		OFlag = 1;
		TargetAddress = v6(TN2_LINKLOCAL);
		//option = opt_tll_tn2;
		option = CLEAN_ETHER;
	}
)

//----------------------------------------------------------------------
// TN  (global address)--> NUT (global address)
// TargetAddress: TN's global address
// Override Neighbor Cache Entry(cleanup)
//----------------------------------------------------------------------

FEM_icmp6_na(
	clean_na_global,
	_HETHER_tn2allnodes,
	{
		_SRC(TN_GLOBAL);
//		_DST(NUT_GLOBAL);
		_DST(v6(_ALLNODES_MCAST_ADDR));
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 0;
		OFlag = 1;
		TargetAddress = TN_GLOBAL;
		//option = opt_tll_tn2;
		option = CLEAN_ETHER;
	}
)

//----------------------------------------------------------------------
// TN  (global address)--> NUT (link-local address)
// TargetAddress: TN's global address
// Override Neighbor Cache Entry(cleanup)
//----------------------------------------------------------------------

FEM_icmp6_na(
	clean_na_global_to_local,
	_HETHER_tn2allnodes,
	{
		_SRC(TN_GLOBAL);
//		_DST(nutv6("Link1"));
		_DST(v6(_ALLNODES_MCAST_ADDR));
		HopLimit = 255;
	},
	{
		RFlag = 1;
		SFlag = 0;
		OFlag = 1;
		TargetAddress = TN_GLOBAL;
		//option = opt_tll_tn2;
		option = CLEAN_ETHER;
	}
)


//----------------------------------------------------------------------
// Router Advertisement 
// TN  (link local address)--> NUT (all node multicast address)
//----------------------------------------------------------------------

FEM_icmp6_ra (
	ra,
	_HETHER_tn2allnodes,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_LLOCAL_ALLNODES_MCAST_ADDR));
		HopLimit = 255;
	},
	{
		CurHopLimit = 254;
//		LifeTime = 3600;
		LifeTime = 90;
		ReachableTime = 10000; //0
		RetransTimer = 1005;
		option = opt_sll_tn2;
		option = prefix_ra;
	}
)

Opt_ICMPv6_Prefix prefix_ra { 
	LFlag = 1;
	AFlag = 1;
	ValidLifetime = 3600005;
//	ValidLifetime = 90;
	PreferredLifetime = 3600005;
//	PreferredLifetime = 90;
	Prefix = v6(_GLOBAL0_UCAST_PRFX);
}


FEM_icmp6_ra (
	ra_start,
	_HETHER_tn2allnodes,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_LLOCAL_ALLNODES_MCAST_ADDR));
		HopLimit = 255;
	},
	{
		CurHopLimit = 254;
//		LifeTime = 3600;
		LifeTime = 30; //default 20sec(IOL specification)
		ReachableTime = 60000; //msec  10000
		RetransTimer = 1000; //msec 1000
		option = opt_sll_tn2;
		option = prefix_ra_start;
	}
)

Opt_ICMPv6_Prefix prefix_ra_start { 
	LFlag = 1;
	AFlag = 1;
	ValidLifetime = 3600005;
//	ValidLifetime = 60; //20
	PreferredLifetime = 3600005;
//	PreferredLifetime = 60; //20
	Prefix = v6(_GLOBAL0_UCAST_PRFX);
}

FEM_icmp6_ra (
	ra_end,
	_HETHER_tn2allnodes,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_LLOCAL_ALLNODES_MCAST_ADDR));
		HopLimit = 255;
	},
	{
		CurHopLimit = 254;
		LifeTime = 0;
		ReachableTime = 60000; //msec 10000
		RetransTimer = 1000; //msec
		option = opt_sll_tn2;
		option = prefix_ra_end;
	}
)

Opt_ICMPv6_Prefix prefix_ra_end { 
	LFlag = 1;
	AFlag = 1;
	ValidLifetime = 0;
	PreferredLifetime = 0;
	Prefix = v6(_GLOBAL0_UCAST_PRFX);
}
