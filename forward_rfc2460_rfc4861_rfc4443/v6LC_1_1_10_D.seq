#!/usr/bin/perl
#
# Copyright (C) 2013, 2014, 2015
# Chunghwa Telecommunication Labratories (CHT-TL)
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $CHT-TL: v6LC_1_1_10_D.seq,v 1.2 2015/05/27 weifen Exp $
#
######################################################################
BEGIN {
	$V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_2 $';
}

use V6evalTool;
use CommonSPEC;
use lib '../';
use CPE6_config;
use DHCPv6_common;


if ($V6evalTool::NutDef{'Type'} ne 'router') {
	vLogHTML("This test is for the router only<BR>");
	exit($V6evalTool::exitRouterOnly);
}


$pktdesc{'echo_request'}      = 'Send Echo Request to The Loopback Address';
$pktdesc{'echo_request_f'}    = 'Recv forwarded Echo Request from Link1';

$endStatus = $V6evalTool::exitPass;

$IF0 = 'Link0';
$IF1 = 'Link1';

vCapture($IF0);
vCapture($IF1);

my $ra = $STATEFUL_CLIENT ? 'ra_MsetOset' : 'ra_MclearOset';
my ($ret,$tn2_prefix) = cpe_initialization($ra,$IF0,$IF1,$STATEFUL_CLIENT,0);
if ($ret != 0) {
    vLogHTML('<FONT COLOR="#FF0000">CPE initialization fail!</FONT><BR>');
    dhcpExitFail();
}
if ($tn2_prefix =~ /3ffe:501:ffff/ ) {
    vLogHTML("<B>RA includes the global prefix($tn2_prefix).</B></BR>");
} else {
	vLogHTML('<FONT COLOR="#FF0000">Did not get golbal prefix from RA!</FONT><BR>');
  dhcpExitFail();
}

vClear($IF0);
vClear($IF1);

#----- test
vSend($IF1,'echo_request');

%ret = vRecv($IF0, 5 ,0 ,0, 'echo_request_f','ns_nut_lla_to_any_lb', 'echo_reply');
if ($ret{'status'} == 0) {
  if ($ret{'recvFrame'} eq 'echo_request_f') {
    vLogHTML('receive forwarded Echo Request<BR>');
    vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
    $endStatus = $V6evalTool::exitFail;
  } elsif ($ret{'recvFrame'} eq 'ns_nut_lla_to_any_lb'){
    vLogHTML('Receive loopback NS from CE-Router.<BR>');
    vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
    $endStatus = $V6evalTool::exitFail;
  }
} else {	# PASS
  vLogHTML('OK<BR>');
}

vStop($IF0);
vStop($IF1);

vRemote('reboot.rmt','');

exit($endStatus);
#----- end test

######################################################################
__END__

=head1 NAME

  IP Forwarding - Source and Destination Address
  Part C: Request sent to Loopback address

=head1 TARGET

  CE-Router

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./Iv6LC_1_1_10_D.seq">v6LC_1_1_10_D.seq</A> [-tooloption ...] -pkt <A HREF="./v6LC_1_1_10_D.def">v6LC_1_1_10_D.def</A>
    -tooloption : v6eval tool option
</PRE>

=end html

=head1 INITIALIZATION

  Common Test Setup is performed at the beginning of this test part.

=head1 TEST PROCEDURE

Verify that a node properly forwards the ICMPv6 Echo Requests.

   TN2                       CE-Router                     TN1
              (Link1)                     (Link0)
    |                           |                           |
    |-------------------------->|                           |
    |   Echo Request            |                           |
    |                           |                           |
    |                           |-------------------------->|
    |                           |        no packet          |
    |                           |                           |
    |                           |                           |
    v                           v                           v


  1. TN2 transmits an Echo Request to the Loopback address (::1) with a first hop through the CE-Router.
     The source address is TN2's Global address. 
  2. Observe the packets transmitted by the CE-Router on Link0.

  Echo Request Data is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 16
            NextHeader         = 58 (ICMPv6)
            SourceAddress      = TN2 Global Address (Link1)
            DestinationAddress = Loopback address (::1) (Link0)

        ICMP Echo Request
            Type           = 128 (Echo Request)
            Code           = 0
            Checksum       = (auto)
            Identifier     = 0xffff
            SequenceNumber = 1
            PayloadData    = {1, 2, 3, 4, 5, 6, 7, 8}


=head1 JUDGEMENT

  PASS: The CE-Router must not forward the Echo Request packet.

=head1 CLEANUP

Common Test Cleanup


=cut

# =head1 REFERENCE
# 
# RFC2460
# 
# 3.  IPv6 Header Format
# 
#    Traffic Class        8-bit traffic class field.  See section 7.
# 
# 7.  Traffic Classes
# 
#    The 8-bit Traffic Class field in the IPv6 header is available for use
#    by originating nodes and/or forwarding routers to identify and
#    distinguish between different classes or priorities of IPv6 packets.
#    At the point in time at which this specification is being written,
#    there are a number of experiments underway in the use of the IPv4
#    Type of Service and/or Precedence bits to provide various forms of
#    "differentiated service" for IP packets, other than through the use
#    of explicit flow set-up.  The Traffic Class field in the IPv6 header
#    is intended to allow similar functionality to be supported in IPv6.
#    It is hoped that those experiments will eventually lead to agreement
#    on what sorts of traffic classifications are most useful for IP
#    packets.  Detailed definitions of the syntax and semantics of all or
#    some of the IPv6 Traffic Class bits, whether experimental or intended
#    for eventual standardization, are to be provided in separate
#    documents.
# 
#    The following general requirements apply to the Traffic Class field:
# 
#       o  The service interface to the IPv6 service within a node must
#          provide a means for an upper-layer protocol to supply the value
#          of the Traffic Class bits in packets originated by that upper-
#          layer protocol.  The default value must be zero for all 8 bits.
# 
#       o  Nodes that support a specific (experimental or eventual
#          standard) use of some or all of the Traffic Class bits are
#          permitted to change the value of those bits in packets that
#          they originate, forward, or receive, as required for that
#          specific use.  Nodes should ignore and leave unchanged any bits
#          of the Traffic Class field for which they do not support a
#          specific use.
# 
#       o  An upper-layer protocol must not assume that the value of the
#          Traffic Class bits in a received packet are the same as the
#          value sent by the packet's source.
# 

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
[RFC 7084],G-1
[RFC 4443],Section 2.2, 4.2
</PRE>
</BLOCKQUOTE>

=end html

=head1 SEE ALSO

  perldoc V6evalTool

=cut

