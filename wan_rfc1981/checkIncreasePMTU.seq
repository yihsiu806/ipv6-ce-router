#!/usr/bin/perl
#
# Copyright (C) 2013
# Chunghwa Telecommunication Labratories (CHT-TL)
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $CHT-TL: checkIncreasePMTU.seq,v 1.0 2013/08/19 weifen Exp $
#
######################################################################
BEGIN {
	$V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_2 $';
}

use V6evalTool;
use CommonPMTU;

use lib '../';
use CPE6_config;
use DHCPv6_common;

$pktdesc{'echo_request_pl1400'}	= 'Send Echo Request (Payload Length is 1400)';
$pktdesc{'echo_reply_pl1400'}	= 'Recv Echo Reply (Payload Length is 1400)';
$pktdesc{'PktTooBig1280'}	= 'Send Packet Too Big message (1280 octets)';

$interval = 30;		# 30 sec.
$repeat   = 11;		# 1+10 times (== 5 min.)

$endStatus = $V6evalTool::exitPass;
$IF = 'Link0';

#fake data
$fragment_id = 0;
$PTB_payload = '_PACKET_IPV6_echo_request_pl1400';
$packet_len = 1500;

my $sendtime;

vCapture($IF);
#======================================================================
if (localSetup($IF,$STATEFUL_CLIENT) != $CommonPMTU::Success) {
	$ret = cleanup_local($IF);
	if ($ret == $CommonPMTU::Success) {
		exit($V6evalTool::exitFail);
	} else {
		exit($V6evalTool::exitFatal);
	}
}
#======================================================================
#----- test
#----- create fragment pkt.def(from tn2 to nut(onlink))

$original_name = "echo_reply_pl1400"; #must same echo reply packet
$MTU_value = 1500; #MTU value, fixed
$PKT_size = 1440; #this size is IPv6 pakcet size.,1280,1400,1500 etc

$frag_start =  48; #1280 or 48 #should be 48

$data_size_1st = $frag_start - 40 - 8; 
$data_size_2nd = ($PKT_size - 40) - $data_size_1st;

#define packet format
$header_ether = '_HETHER_nut_to_tr1';
$ip_src = 'NUT_ADDR';
$ip_dst = 'TN3_GL2_ADDR';

$def_file = 'pkt_frag.def'; #fragment define file

#write def file
if(writefragdef($def_file, $original_name, $MTU_value, $PKT_size,$data_size_1st,$data_size_2nd, $header_ether, $ip_src, $ip_dst ) != $CommonPMTU::Success) {
	exit($V6evalTool::exitFatal);
}
if ($STATEFUL_CLIENT) {
  vCPP("-DFRAG_DEF -DFRAG_ID=any -DNUT_ADDR=NUT_GLOBAL_ADDR_From_IANA");
} else {
	vCPP("-DFRAG_DEF -DFRAG_ID=any");
}

#packet send
vSend($IF, 'echo_request_pl1400');



%ret = nd_vRecv_EN($IF, $CommonPMTU::wait_reply, 0, 0, 'echo_reply_pl1400',@CommonPMTU::fragment_1st_name);

if ($ret{'status'} == 0) {
	$packet_len = 0;
	$fragment_id = 0;
	$PTB_payload = '_PACKET_IPV6_echo_reply_pl1400';
	if($ret{'recvFrame'} eq 'echo_reply_pl1400'){
		vLogHTML('OK<BR>');
		$packet_len = $ret{"Frame_Ether.Packet_IPv6.Hdr_IPv6.PayloadLength"} + 40;
	}
	else {
		vLogHTML('OK. recive 1st fragment.<BR>');
		$pkt_name = $ret{'recvFrame'};
		$PTB_payload = "_PACKET_IPV6_$pkt_name";
		$pkt_name =~ /^echo_reply(\d+)_1st_(\d+)$/;
		$size_2nd_frag = $1-$2-40;
		$name_2nd_frag = "echo_reply$1"."_2nd_$size_2nd_frag";

		#get ipv6 packet length
		$packet_len = $ret{"Frame_Ether.Packet_IPv6.Hdr_IPv6.PayloadLength"} + 40;
        #get id
		$fragment_id = $ret{"Frame_Ether.Packet_IPv6.Hdr_Fragment.Identification"};
		%ret = nd_vRecv_EN($IF, $CommonPMTU::wait_reply, 0, 0, "$name_2nd_frag");
		if ($ret{'status'} == 0) {
			vLogHTML('OK. recive 2nd fragment.<BR>');
			#get ipv6 packet length
			$packet_len_2nd = $ret{"Frame_Ether.Packet_IPv6.Hdr_IPv6.PayloadLength"} + 40;

 			if($packet_len < $packet_len_2nd){
				$PTB_payload = "_PACKET_IPV6_$name_2nd_frag";
				$packet_len = $packet_len_2nd;
				#get id
				$fragment_id = $ret{"Frame_Ether.Packet_IPv6.Hdr_Fragment.Identification"};
			}
		}
		else {
			vLogHTML('<FONT COLOR="#FF0000">NG. can\'t recive 2nd fragment.</FONT><BR>');
			$endStatus = $V6evalTool::exitFail;
		}
	}

}
else {
	vLogHTML('Cannot receive Echo Reply<BR>');
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
	$endStatus = $V6evalTool::exitFail;
}

#send Packet Too Big to CE-Router for echo reply to TN3
if ($packet_len > 1280) {
	$PTB_flag = 1;
	if ($packet_len >= 1280) {
		if ($STATEFUL_CLIENT) {
		  vCPP("-DFRAG_DEF -DMAX_MTU=1280 -DPAYLOAD=$PTB_payload -DFRAG_ID=$fragment_id -DNUT_ADDR=NUT_GLOBAL_ADDR_From_IANA");
		} else {
		  vCPP("-DFRAG_DEF -DMAX_MTU=1280 -DPAYLOAD=$PTB_payload -DFRAG_ID=$fragment_id");
		}
		vSend($IF, 'PktTooBig1280');
		$max_mtu = 1280;
	}
	else {
		if ($STATEFUL_CLIENT) {
		  vCPP("-DFRAG_DEF -DMAX_MTU=$packet_len -DPAYLOAD=$PTB_payload -DFRAG_ID=$fragment_id -DNUT_ADDR=NUT_GLOBAL_ADDR_From_IANA");
		} else {
		  vCPP("-DFRAG_DEF -DMAX_MTU=$packet_len -DPAYLOAD=$PTB_payload -DFRAG_ID=$fragment_id");
		}
		vSend($IF, 'PktTooBig1280');
		$max_mtu = packet_len;
	}
}
else {
	$PTB_flag = 0;
	$max_mtu = 1280;
	vLogHTML('<FONT COLOR="#FF0000">Cannot send Packet Too Big message</FONT><BR>');
}

unlink($def_file);

if ($PTB_flag == 1) {
	for (1 .. $repeat) {

		#----- create fragment pkt.def(from tn1 to nut(onlink))

		$original_name = "echo_reply_pl1400"; #must same echo reply packet
		$MTU_value = $max_mtu; #MTU value, fixed
		$PKT_size = 1440; #this size is IPv6 pakcet size.,1280,1400,1500 etc

		$frag_start =  48; #1280 or 48 #should be 48

		$data_size_1st = $frag_start - 40 - 8;
		$data_size_2nd = ($PKT_size - 40) - $data_size_1st;

		#define packet format
		$header_ether = '_HETHER_nut_to_tr1';
		$ip_src = 'NUT_ADDR';
		$ip_dst = 'TN3_GL2_ADDR';

		$def_file = 'pkt_frag.def'; #fragment define file

		#write def file
		if (writefragdef($def_file, $original_name, $MTU_value,
						 $PKT_size,$data_size_1st,$data_size_2nd, 
						 $header_ether, $ip_src, $ip_dst ) != $CommonPMTU::Success) {
			exit($V6evalTool::exitFatal);
			last;
		}
		if ($STATEFUL_CLIENT) {
			vCPP("-DFRAG_DEF -DFRAG_ID=any -DNUT_ADDR=NUT_GLOBAL_ADDR_From_IANA");
		} else {
			vCPP("-DFRAG_DEF -DFRAG_ID=any");
		}
		
		#packet send
		my %vsend = vSend($IF, 'echo_request_pl1400');
		my $sendtime = $vsend{'sentTime1'};
		
		%ret = nd_vRecv_EN($IF, $CommonPMTU::wait_reply, 0, 0, @CommonPMTU::fragment_1st_name);

		if ($ret{'status'} == 0) {
			vLogHTML('OK. recive 1st fragment.<BR>');
			$pkt_name = $ret{'recvFrame'};
			$pkt_name =~ /^echo_reply(\d+)_1st_(\d+)$/;
			$size_2nd_frag = $1-$2-40;
			$name_2nd_frag = "echo_reply$1"."_2nd_$size_2nd_frag";


			%ret = nd_vRecv_EN($IF, $CommonPMTU::wait_reply, 0, 0, "$name_2nd_frag");
			if ($ret{'status'} == 0) {
				vLogHTML('OK. recive 2nd fragment.<BR>');
				$replytime = getReceivedtime(\%ret);
			}
			else {
				vLogHTML('<FONT COLOR="#FF0000">NG. can\'t recive 2nd fragment.</FONT><BR>');
				$endStatus = $V6evalTool::exitFail;
				last;
			}


		}
		else {
			vLogHTML('Cannot receive Echo Reply<BR>');
			vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
			$endStatus = $V6evalTool::exitFail;
			last;
		}

		#vSleep($interval);
		my $wait_time = $interval - ($replytime - $sendtime);
		@frames = ();
		nd_vRecv_EN($IF, $wait_time, 0, 0, @frames);
	}
	unlink($def_file);
}
#----- end test

$ret = cleanup_local($IF);
vStop($IF);
if ($ret == $CommonPMTU::Success) {
	exit($endStatus);
}
else {
	exit($V6evalTool::exitFatal);
}


sub localSetup($$) {
	my ($IF0,$iana) = @_;
	my($status);

	if ($iana) {
		my $IF1="Link1";
		# 1.Send RA
		vSend($IF0, 'ra_MsetOset_init');
		
		# 2.Wait until DHCPv6 Solicit arrives
		my ($retsol,%sol) = wait_for_solicit2($IF0, 30);
		if($retsol != 0) {
			vLogHTML("<B>Could not get Solicit Message.</B><BR>");
			return (1, %sol);
		}
		if (0 != options_exist(\%sol, ($CMP_IA_NA | $CMP_IA_PD))) {
			vLogHTML("<B>DHCPv6 Solicit do not include necessay stateful options.</B><BR>");
			return $CommonPMTU::Failure;
		}
		
		# 3.Send DHCPv6 Advetise message
		$SID_OPTION = "opt_SID_LLT_server1";
		$IA_NA_OPTION = "opt_IA_NA_Addr_local";
		$IA_PD_OPTION = "opt_IA_PD_local";
		$DNS_SVR_OPTION = "opt_DNS_Name_Server1";
		$DNS_LST_OPTION = "opt_DNS_ServerSearchList";
		my ($retadv, %adv) = send_advertise($IF0, "advertise_server1_to_nut", \%sol, "");
		if($retadv != 0) {
			vLogHTML("<B>Failed to send DHCPv6 Advetisement.</B><BR>");
			return $CommonPMTU::Failure;;
		}
		
		# 4.Wait until DHCPv6 Request arrives
		my ($reteq,%req) = wait_for_request2($IF0, 30);
		if($reteq != 0) {
			vLogHTML("<B>Could not get DHCPv6 equest Message.</B><BR>");
			return $CommonPMTU::Failure;;
		}
		
		if (0 != options_exist(\%req, ($CMP_IA_NA | $CMP_IA_PD))) {
			vLogHTML("<B>DHCPv6 Request message do not include necessay stateful options.</B><BR>");
			return $CommonPMTU::Failure;;
		}
		
		# 5.Send DHCPv6 Reply message
		$SID_OPTION = "opt_SID_LLT_server1";
		$IA_NA_OPTION = "opt_IA_NA_Addr_local";
		$IA_PD_OPTION = "opt_IA_PD_local";
		$DNS_SVR_OPTION = "opt_DNS_Name_Server1";
		$DNS_LST_OPTION = "opt_DNS_ServerSearchList";
		$StatusCode_OPTION = "opt_StatusCode";
	
		my ($retep, %rep) = send_reply($IF0, "reply_server1_to_nut", \%req, "");
		if($retep != 0) {
			vLogHTML("<B>Failed to send DHCPv6 Reply.</B><BR>");
			return $CommonPMTU::Failure;;
		}
		
		vSleep(5);
		return $CommonPMTU::Success;
	} else {
		$status = _localSetup11_Host($IF0);
	}

	return ($status);
}

sub _localSetup11_Host {
	my($IF) = @_;
	my(%ret);

	vLogHTML('--- start local Test Setup for Host<BR>');

	vSend($IF, 'setup_echo_request');
	%ret = vRecv($IF, $CommonPMTU::wait_reply, 0, 0, 'setup_echo_reply', 'ns_l2l', 'ns_g2l');
	if ($ret{'status'} == 0) {
		if ($ret{'recvFrame'} eq 'ns_l2l') {
			vSend($IF, 'na_l2l');
			%ret = vRecv($IF, $CommonPMTU::wait_reply, 0, 0, 'setup_echo_reply');
		}
		elsif ($ret{'recvFrame'} eq 'ns_g2l') {
			vSend($IF, 'na_l2g');
			%ret = vRecv($IF, $CommonPMTU::wait_reply, 0, 0, 'setup_echo_reply');
		}
	}

	if ($ret{'status'} == 0 and $ret{'recvFrame'} eq 'setup_echo_reply') {
		vLogHTML('OK<BR>');
	}
	else {
		vLogHTML('Cannot receive Echo Reply<BR>');
		vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
		vLogHTML('<FONT COLOR="#FF0000">setup failure</FONT><BR>');
		return ($CommonPMTU::Failure);
	}

	vSend($IF, 'localSetup_ra');
	$CommonPMTU::useRA = 1;
	vRecv($IF, $CommonPMTU::wait_dadns, 0, 0, 'setup_dadns');
	vSleep($CommonPMTU::wait_after_dadns);

	vSend($IF, 'setup_echo_request_g');
	%ret = vRecv($IF, $CommonPMTU::wait_reply, 0, 0, 'setup_echo_reply_g', 'ns_g2g', 'ns_l2g');
	if ($ret{'status'} == 0) {
		if ($ret{'recvFrame'} eq 'ns_g2g') {
			vSend($IF, 'na_g2g');
			%ret = vRecv($IF, $CommonPMTU::wait_reply, 0, 0, 'setup_echo_reply_g');
		}
		elsif ($ret{'recvFrame'} eq 'ns_l2g') {
			vSend($IF, 'na_g2l');
			%ret = vRecv($IF, $CommonPMTU::wait_reply, 0, 0, 'setup_echo_reply_g');
		}
	}

	if ($ret{'status'} == 0 and $ret{'recvFrame'} eq 'setup_echo_reply_g') {
		vLogHTML('OK<BR>');
	}
	else {
		vLogHTML('Cannot receive Echo Reply<BR>');
		vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
		vLogHTML('<FONT COLOR="#FF0000">setup failure</FONT><BR>');
		return ($CommonPMTU::Failure);
	}

	vClear($IF);
	vLogHTML('--- end local Test Setup for Host<BR>');
	return ($CommonPMTU::Success);
}


######################################################################
__END__

=head1 NAME

  Checking For Increase in PMTU

=head1 TARGET

  CE-Router

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./checkIncreasePMTU.seq">checkIncreasePMTU.seq</A> [-tooloption ...] -pkt <A HREF="./checkIncreasePMTU.def">checkIncreasePMTU.def</A>
    -tooloption : v6eval tool option
</PRE>

=end html

=head1 INITIALIZATION

	Common Test Setup 1.1

=head1 TEST PROCEDURE

 Verify that a node waits the proper amount of time to check for PMTU increases.

   TN3                    TR1                    CE-Router
    |                      |                      |
    |-------------------------------------------->|
    |   1.Echo Request     |                      |
    |   (1440 octets)      |                      |
    |                      |                      |
    |<--------------------------------------------|
    |   2.Echo Reply       |                      |
    |   (1440 octets)      |                      |
    |                      |                      |
    |                      +--------------------->|
    |                      |  3.Packet Too Big    |
    |                      |    (MTU 1280)        |
    |                      |                      |
    |-------------------------------------------->| ---
    |   4.Echo Request     |                      |  |
    |   (1440 octets)      |                      |  |
    |                      |                      |  |
    |<--------------------------------------------|  |
    | 5.Fragment Echo Reply|                      |  |
    |   (1st + 2nd = 1440) |                      |  |
    |                      |                      |  | repeat every 30 seconds for 5 minutes
    |      [30 sec.]       |                      |  |
    |                      |                      |  |
    |-------------------------------------------->|  |
    |     Echo Request     |                      |  |
    |   (1440 octets)      |                      |  |
    |                      |                      |  |
    |<--------------------------------------------| ---
    |   Fragment Echo Reply|                      |
    |   (1st + 2nd = 1440) |                      |
    |                      |                      |
    |      [30 sec.]       |                      |
    |                      |                      |
    v                      v                      v

  1. Send Echo Request
  2. Receive Echo Reply <<Check 1>>
  3. Send Packet Too Big message
  4. Send Echo Request
  5. Receive fragmented Echo Reply <<Check 2>>
  6. go to step 4, repeat every 30 seconds for 5 minutes

  Echo Request Data is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 1400
            NextHeader         = 58 (ICMPv6)
            SourceAddress      = TN3's Global Address
            DestinationAddress = CE-Router's Global Address

        ICMP Echo Request
            Type           = 128 (Echo Request)
            Code           = 0
            Checksum       = (auto)
            Identifier     = 0xffff
            SequenceNumber = 1
            PayloadData    = (1392 octets)

  Packet Too Big message is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 1280
            NextHeader         = 58 (ICMPv6)
            SourceAddress      = TR1's Global Address
            DestinationAddress = CE-Router's Global Address

        ICMP Echo Request
            Type           = 2 (Packet Too Big)
            Code           = 0xff
            Checksum       = (auto)
            MTU            = 1280
            PayloadData    = (1208 octets)


=head1 JUDGEMENT

  PASS: <<Check 1>> Echo Reply Received or Fragment Echo Reply Received
        <<Check 2>> Fragment Echo Reply Received. 1st and 2nd fragment no larger than 1280 octets.

        IPv6 Header
            Version             = 6
            Traffic Class       = 0
            FlowLabel           = 0
            PayloadLength       = 1400
            NextHeader          = 58 (ICMPv6)
            SourceAddress       = CE-Router's Global Address
            Destination Address = TN3's Global Address

        ICMP Echo Reply
            Type           = 129 (Echo Reply)
            Code           = 0
            Checksum       = (auto)
            Identifier     = 0xffff (same as Echo Request)
            SequenceNumber = 1 (same as Echo Request)
            PayloadData    = (1392 octets) (same as Echo Request)

=head1 CLEANUP

Common Test Cleanup

=cut

# =head1 REFERENCE
# 
# 
# RFC1981
# 
# 4. Protocol Requirements
# 
#    As discussed in section 1, IPv6 nodes are not required to implement
#    Path MTU Discovery.  The requirements in this section apply only to
#    those implementations that include Path MTU Discovery.
# 
#    When a node receives a Packet Too Big message, it MUST reduce its
#    estimate of the PMTU for the relevant path, based on the value of the
#    MTU field in the message.  The precise behavior of a node in this
#    circumstance is not specified, since different applications may have
#    different requirements, and since different implementation
#    architectures may favor different strategies.
# 
#    After receiving a Packet Too Big message, a node MUST attempt to
#    avoid eliciting more such messages in the near future.  The node MUST
#    reduce the size of the packets it is sending along the path.  Using a
#    PMTU estimate larger than the IPv6 minimum link MTU may continue to
#    elicit Packet Too Big messages.  Since each of these messages (and
#    the dropped packets they respond to) consume network resources, the
#    node MUST force the Path MTU Discovery process to end.
# 
#    Nodes using Path MTU Discovery MUST detect decreases in PMTU as fast
#    as possible.  Nodes MAY detect increases in PMTU, but because doing
#    so requires sending packets larger than the current estimated PMTU,
#    and because the likelihood is that the PMTU will not have increased,
#    this MUST be done at infrequent intervals.  An attempt to detect an
#    increase (by sending a packet larger than the current estimate) MUST
#    NOT be done less than 5 minutes after a Packet Too Big message has
#    been received for the given path.  The recommended setting for this
#    timer is twice its minimum value (10 minutes).
# 
#    A node MUST NOT reduce its estimate of the Path MTU below the IPv6
#    minimum link MTU.
# 
#       Note: A node may receive a Packet Too Big message reporting a
#       next-hop MTU that is less than the IPv6 minimum link MTU.  In that
#       case, the node is not required to reduce the size of subsequent
#       packets sent on the path to less than the IPv6 minimun link MTU,
#       but rather must include a Fragment header in those packets [IPv6-
#       SPEC].
# 
#    A node MUST NOT increase its estimate of the Path MTU in response to
#    the contents of a Packet Too Big message.  A message purporting to
#    announce an increase in the Path MTU might be a stale packet that has
#    been floating around in the network, a false packet injected as part
#    of a denial-of-service attack, or the result of having multiple paths
#    to the destination, each with a different PMTU.
# 
# 

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
[RFC 7084],G-1
[RFC 1981] - Sections 4
</PRE>
</BLOCKQUOTE>

=end html

=head1 SEE ALSO

  perldoc V6evalTool

=cut

