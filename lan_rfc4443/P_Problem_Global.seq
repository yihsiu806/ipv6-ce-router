#!/usr/bin/perl
#
# Copyright (C) 2013
# Chunghwa Telecommunication Labratories (CHT-TL)
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $CHT-TL: P_Problem_Global.seq,v 1.0 2013/08/19 weifen Exp $
#----------------------------------------------------------------------

BEGIN { $V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_2 $'; }
use V6evalTool;
use icmp;

my $IF0 = "Link0";
my $IF1 = "Link1";

%pktdesc = (
    unrecognized_nxthdr	=> 'Send packet include unrecognized next header field value',
    parameter_problem	=> 'Receive Parameter Problem (unrecognized Next Header)'
);

#----------------------------------------------------------------------
# Initialization
#----------------------------------------------------------------------

vLogHTML("<FONT SIZE=\"+1\">Initialization</FONT><BR>");

vCapture($IF0);
vCapture($IF1);

my $ret = setup();
if ($ret == $icmp::subFail){
	goto error;
}
#----------------------------------------------------------------------
# Test
#----------------------------------------------------------------------

vLogHTML("<FONT SIZE=\"+1\">Test</FONT><BR>");

vSend($IF1, unrecognized_nxthdr);

#%ret = vRecv($IF1, $icmp::wait_reply, 0, 0, parameter_problem);
%ret = icmp_vRecv($IF1, $icmp::wait_reply, 0, 0, parameter_problem);

if ($ret{status} != 0) {
	vLogHTML('<FONT COLOR="#FF0000">TN can not receive ICMPv6 error message from NUT</FONT><BR>');
	goto error;
}
elsif ($ret{recvFrame} eq 'parameter_problem') {
	vLog("TN can receive ICMPv6 Parameter Problem message from NUT");
	vLog("OK");	
	vStop($IF0);
	vStop($IF1);
	vRemote('reboot.rmt','');
	exit($V6evalTool::exitPass);
}
else {
	vLogHTML('<FONT COLOR="#FF0000">TN receive unexpected packets from NUT</FONT><BR>');
	goto error;
}   


error:

vLogHTML('<FONT COLOR="#FF0000">FAIL</FONT><BR>');
vStop($IF0);
vStop($IF1);
vRemote('reboot.rmt','');
exit($V6evalTool::exitFail);


#----------------------------------------------------------------------

__END__

=head1 NAME

	Unrecognized Next Header (Parameter Problem Generation)

=head1 TARGET

	CE-Router

=head1 SYNOPSIS

	P_Problem_Global.seq [-tooloption ...] -p P_Problem_Global.def

=head1 INITIALIZATION

	Common Test Setup is performed at the beginning of this test part.

=head1 TEST PROCEDURE

Verify that a node properly generates Parameter Problem Message when an Unrecognized Next Header type is encountered.

	This test verifies that NUT send valid ICMPv6 Parameter Problem (code 1)
	in response to a packet include unknown next header field value.
	And this test verifies that the message processing rule ,
	
	If the message is a response to a message sent to one of the
	node's unicast addresses, the Source Address of the reply must
	be that same address.


	TN			NUT

	---------------------------

	1.
	 === IPv6 packet  ===>
		src address : TN global address
		dst address : NUT global address
			 Destination Option Header : next header(128) is not used in NUT
	2.
	<< JUDGEMENT >>

	 <=== ICMPv6 Prameter Problem ===
		src address : NUT global address
		dst address : TN global address
			Code is 1
			Pointer is 40

=head1 JUDGEMENT

    << PASS >>
    The NUT must discard the ICMPv6 Echo Request from TN.
    Therefore, it must not send an Echo Reply.
    The NUT should send a Parameter Problem Meesage to TN 
    with a code field valude of 1 (Unrecognized Next Header type encountered) 
          The Pointer Field should be 0x28 (offset of the Next Header field).
          The Source Address of the Packet must be the same as 
          the Global Destination Address of TN's Echo Request packet. 

=head1 CLEANUP

Common Test Cleanup

=cut

# =head1 REFERENCE
# 
# RFC2463
# 
# 3.4 Parameter Problem Message
# 
#        0                   1                   2                   3
#        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
#       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#       |     Type      |     Code      |          Checksum             |
#       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#       |                            Pointer                            |
#       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#       |                    As much of invoking packet                 |
#       +               as will fit without the ICMPv6 packet           +
#       |               exceeding the minimum IPv6 MTU [IPv6]           |
# 
#    IPv6 Fields:
# 
# =begin html
# <pre>
#    <b>Destination Address</b><br>
#                   <b>Copied from the Source Address field of the invoking
#                   packet.</b>
# </pre>
# 
# =end html
# 
#    ICMPv6 Fields:
# 
# =begin html
# <pre>
#    <b>Type           4</b>
# </pre>
# 
# =end html
# 
# =begin html
# <pre>
#    <b>Code</b>           0 - erroneous header field encountered<br>
#                   <b>1 - unrecognized Next Header type encountered</b><br>
#                   2 - unrecognized IPv6 option encountered
# </pre>
# 
# =end html
# 
# =begin html
# <pre>
#    <b>Pointer        Identifies the octet offset within the
#                   invoking packet where the error was detected.<br>
#                   The pointer will point beyond the end of the ICMPv6
#                   packet if the field in error is beyond what can fit
#                   in the maximum size of an ICMPv6 error message.</b>
# </pre>
# 
# =end html
# 
#    Description
# 
# =begin html
# <pre>
#    <b>If an IPv6 node processing a packet finds a problem with a field in
#    the IPv6 header or extension headers such that it cannot complete
#    processing the packet, it MUST discard the packet and SHOULD send an
#    ICMPv6 Parameter Problem message to the packet's source, indicating
#    the type and location of the problem.</b>
# </pre>
# 
# =end html
# 
# =begin html
# <pre>
#    <b>The pointer identifies the octet of the original packet's header
#    where the error was detected.</b> For example, an ICMPv6 message with
#    Type field = 4, Code field = 1, and Pointer field = 40 would indicate
#    that the IPv6 extension header following the IPv6 header of the
#    original packet holds an unrecognized Next Header field value.
# </pre>
# 
# =end html
# 

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
[RFC 7084],G-1
[RFC 4443],Section 2.2, 2.4, 3.4
</PRE>
</BLOCKQUOTE>

=end html

=head1 SEE ALSO

	  perldoc V6evalTool

=cut
