#!/usr/bin/perl
#
#Copyright (C) 2013, 2014, 2015
#Chunghwa Telecommunication Labratories (CHT-TL)
#All rights reserved.
#
#Redistribution and use of this software in source and binary
#forms, with or without modification, are permitted provided that
#the following conditions and disclaimer are agreed and accepted
#by the user:
#
#1. Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
#2. Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with
#   the distribution.
#
#3. Neither the names of the copyrighters, the name of the project
#   which is related to this software (hereinafter referred to as
#   "project") nor the names of the contributors may be used to
#   endorse or promote products derived from this software without
#   specific prior written permission.
#
#4. No merchantable use may be permitted without prior written
#   notification to the copyrighters.
#
#5. The copyrighters, the project and the contributors may prohibit
#   the use of this software at any time.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
#CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
#BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
#COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
#INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#POSSIBILITY OF SUCH DAMAGE.
#
#$CHT-TL: CERouter_1_2_6_B.seq,v 1.2 2015/04/24 weifen Exp $
###############################################################################
BEGIN{
	$V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_1 $';
}
use strict;
use V6evalTool;

use lib '../.';
use DHCPv6_common;
use CPE6_config;
use Client_pktdesc;
use CPE6;

#--------------------------------------------------------------#
# Initialization variables
#--------------------------------------------------------------#
my $IF0 = "Link0";
my $IF1 = "Link1";
my ($pretime, $nextime, $interval) = (0, 0, 0);
my ($plifetime, $vlifetime) = (2000, 3000);
my ($time1, $time2) = (50, 80);
my ($start, $rd, $MRD) = (0, 0, $vlifetime);
my $IRT = $REB_TIMEOUT;
my $MRT = $REB_MAX_RT;
my $startVLT = 0;
my $mrtflag = 0;
my $MAXCOUNT = 1;
my $ret = 1;
#my $acceptablerange = 0;
my ($ia_t1,$ia_t2,$ia_pltime,$ia_vltime) = (0xffffffff,0xffffffff,0xffffffff,0xffffffff);

vCapture($IF0);
vCapture($IF1);
#--------------------------------------------------------------#
# Initialize DHCPv6 Client
#--------------------------------------------------------------#
vSend($IF0,'ra_MsetOset');
#--------------------------------------------------------------#
#1.  Wait until Solicit arrives 
#--------------------------------------------------------------#
my ($retsol,%sol) = wait_for_solicit($IF0,30);
if($retsol != 0){
	dhcpExitFail;
}
vClear($IF0);
#--------------------------------------------------------------#
#2. Send Advertise to reply to Solicit
#--------------------------------------------------------------#
$SID_OPTION = "opt_SID_LLT_server1";
$IA_PD_OPTION = "opt_IA_PD_Prefix2";
$IA_NA_OPTION = "opt_IA_NA_Addr_woStatus";
$DNS_SVR_OPTION = "opt_DNS_Name_Server1";
$DNS_LST_OPTION = "opt_DNS_ServerSearchList";
my ($retadv, %adv) = send_advertise($IF0, "advertise_server1_to_nut", \%sol, "-DIA_PREFIX_PLTIME=$plifetime -DIA_PREFIX_VLTIME=$vlifetime ");
if($retadv != 0){
	dhcpExitFail;
}
#--------------------------------------------------------------#
#3.  Wait until Request arrives 
#--------------------------------------------------------------#
my ($retreq, %req) = wait_for_request($IF0,30);
if($retreq != 0){
	dhcpExitFail;
}
vClear($IF0);
#--------------------------------------------------------------#
#4. send Reply message
#--------------------------------------------------------------#
$StatusCode_OPTION = "opt_StatusCode";
$IA_PD_OPTION = "opt_IA_PD_Prefix2";
$IA_NA_OPTION = "opt_IA_NA_Addr_woStatus";
my ($retrep, %rep) = send_reply($IF0, "reply_server1_to_nut", \%req, "-DIA_PD_TIME3=$time1 -DIA_PD_TIME4=$time2 -DIA_PREFIX_PLTIME=$plifetime -DIA_PREFIX_VLTIME=$vlifetime -DIA_NA_TIME1=$ia_t1 -DIA_NA_TIME2=$ia_t2 -DIA_ADDR_PLTIME=$ia_pltime -DIA_ADDR_VLTIME=$ia_vltime");
if($retrep !=0){
	dhcpExitFail;
}

#
#----------- get VLT start time
#

$startVLT = time() - 3;


vSleep(3);

vClear($IF0);

#--------------------------------------------------------------#
#5. Wait until rebind arrives 
#--------------------------------------------------------------#
my $retrans	= allocate_retransmission_instance($REB_TIMEOUT, $REB_MAX_RT, 0, $vlifetime - $time2);

my $timeout = $time2 + 5;
my ($retreb1,%reb1) = wait_for_rebind($IF0, $timeout,2);
if($retreb1 != 0){
	dhcpExitFail;
}

$ret = options_exist(\%reb1,$CMP_ETIME);
if($ret != 0){
	dhcpExitFail;
}

my $base	= 'Frame_Ether.Packet_IPv6.Upp_UDP.Udp_DHCPv6_Rebind.Opt_DHCPv6_ElapsedTime.';

unless(defined($reb1{$base . 'Time'})) {
	vLogHTML('<FONT COLOR="#FF0000">Elapsed Time option is missing</FONT><BR>');
	dhcpExitFail;
}

my $time	= $reb1{$base . 'Time'};
vLogHTML("<B> Time of Elapsed Time Option is $time </B><BR>");

if($time != 0){
	vLogHTML('<FONT COLOR="#FF0000">Elapsed Time is not a proper time.</FONT><BR>');
	dhcpExitFail;
}

$pretime = getReceivedtime(\%reb1);
$start = $pretime;
$MRD = $vlifetime - ($start - $startVLT);

register_retransmission($retrans, $pretime, $time);

#--------------------------------------------------------------#
#6. Wait until retransmitted message arrives 
#--------------------------------------------------------------#
my ($retreb2,%reb2) = (1, ());
my $initflag = 0;

vLogHTML('<PRE>');
vLogHTML("<FONT COLOR=\"#FF0000\">IRT is $IRT, MRT is $MRT, MRD is $MRD sec</FONT><BR>");
vLogHTML('<FONT COLOR="#FF0000">Retransmitted Maximum Rebind RT.</FONT><BR>');
vLogHTML('<FONT COLOR="#FF0000">1st 2nd  3rd   4th     5th      6th       7th</FONT><BR>');
vLogHTML('<FONT COLOR="#FF0000">11  23.1 48.51 101.871 213.9291 449.25111 660</FONT><BR>');
vLogHTML("<FONT COLOR=\"#FF0000\">Capable Maximum 7th RD is 1507.6612 sec, remaining MRD is $MRD sec</FONT><BR>");
#vLogHTML('<FONT COLOR="#FF0000">Maximum 8th RD is 2167.6612 sec, remaining MRD is $MRD sec</FONT><BR>');
vLogHTML('</PRE>');

while($mrtflag < $MAXCOUNT){
	if($initflag != 0){
		$timeout = (2 + $RAND) * $interval;  
	}else{
		$timeout = (1 + $RAND) * $IRT;
	}
	$initflag = 1;

	# If $timeout is bigger than MRT, expected RT is MRT + RAND * MRT
	if($timeout > $MRT){
		$timeout = (1 + $RAND) * $MRT;
	}

#
#----------- Wait for next retransmission
#
	($retreb2,%reb2) = wait_for_rebind($IF0, $timeout,2);
	if($retreb2 != 0){
		if (($rd + $timeout) > 3000) {
			vLogHTML('Did not receive rebind message after 3000 seconds<BR>');
			$mrtflag += 1;
		} else {
			vLogHTML('<FONT COLOR="#FF0000">Error! Did not receive any rebind message during retransmit time.</FONT><BR>');
			dhcpExitFail;
		}
	} else {

		$ret = compare_message(\%reb1,\%reb2);
		if($ret != 0){
			vLogHTML('<FONT COLOR="#FF0000">Message has been changed!</FONT><BR>');
			dhcpExitFail;
		}
	
	#
	#----------- Calcurate current RT
	#
		$nextime = getReceivedtime(\%reb2);
		$rd = $nextime - $start;
		$interval = $nextime - $pretime;	
		$pretime = $nextime;	
	
		vLogHTML("<FONT COLOR=\"#FF0000 \"> Actual RT is $interval, RD is $rd</FONT><BR>");
		if ($interval > $timeout) {
			vLogHTML("<FONT COLOR=\"#FF0000\">Actual RT is bigger than the expected maximum value<FONT><BR>");
			dhcpExitFail;
		}
	
		unless(defined($reb2{$base . 'Time'})) {
			vLogHTML('<FONT COLOR="#FF0000">Elapsed Time option is missing</FONT><BR>');  
			dhcpExitFail;
		}
	     
		register_retransmission($retrans, $nextime, $reb2{$base . 'Time'});
	
	#
	#----------- MRD Expiration, but it must not happen
	#
		if($rd > $MRD){
			vLogHTML('<FONT COLOR="#FF0000">MRD expired!</FONT><BR>');
			dhcpExitFail;
		}
	}
#
#----------- Check if RT satisfies RT = MRT(1+RAND)
#
#	if(!check_equal($interval,$MRT,$RAND)){
#		$mrtflag += 1;
#	}
}
vLogHTML('<FONT COLOR="#FF0000">RT = MRT(1+RAND) observed</FONT><BR>');

vStop($IF0);

if(evaluate_retransmission($retrans)) {
	dhcpExitFail;
}

dhcpExitPass;
###############################################################################
__END__

=head1 NAME 

	Transmission of Rebind Messages for Prefix Delegation
	Part B: Maximum Retransmission Time of Rebind messages, T1 and T2 (Valid lifetime=3000s)

=head1 TARGET

  CE-Router

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./CERouter_1_2_6_B.seq"> CERouter_1_2_6_B.seq</A> [-tooloption...] <BR>  -pkt  <A HREF="./CERouter_1_2_6_B.def"> CERouter_1_2_6_B.def</A> <BR>  -tooloption : v6eval tool option
<BR>
  See Also <A HREF="../DHCPv6.def"> DHCPv6.def </A> 
</PRE>

=end html

=head1 INITIALIZATION

=begin html
  <ul>
  <li><STRONG>Network Topology</STRONG></li> 
   <PRE>
          CE-Router(Client)
          |           
          |                        
Link0   --+--------+------------------------ 3ffe:501:ffff:100::/64
                   |
                   |          
                   TN(Server) 
   </PRE>
  </ul>
  <ul>
  <li><STRONG>Verification Points</STRONG></li><br>
   <PRE>
   The client transmits the message using the following parameters:<BR>
      IRT   REB_TIMEOUT <BR>
      MRT   REB_MAX_RT  <BR>
      MRC   0           <BR> 
      MRD   Remaining time until valid lifetimes of all addresses have
            expired <BR>
   RT for the first message transmission is based on IRT:<BR>
      RT = IRT + RAND*IRT <BR>
   RT for each subsequent message transmission is based on the previous
   value of RT:<BR>
      RT = RTprev + RAND*RTprev <BR>
   if (RT > MRT)<BR>
      RT = MRT + RAND*MRT <BR>
   </PRE>
  </ul>
  <ul>  
  <li><STRONG>Configurations</STRONG></li><br>
  <BR>
    <TABLE BORDER="1">
    <TR>
    <TD><TT>Device Name</TT></TD>
    <TD><TT>Device Type</TT></TD>
    <TD><TT>Interface</TT></TD>
    <TD><TT>Assigned Prefix</TT></TD>
    <TD><TT>Link Local Addr</TT></TD>
    <TD><TT>MAC Addr</TT></TD>
    </TR>
    <TR>
    <TD><TT>Client</TT></TD>
    <TD><TT>CE-Router</TT></TD>
    <TD><TT>Link0</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>CE-Router's Linklocal address</TT></TD>
    <TD><TT>CE-Router's MAC address</TT></TD>
    </TR>
    <TR>
    <TD><TT>Server</TT></TD>
    <TD><TT>TN</TT></TD>
    <TD><TT>Link0</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>fe80::200:ff:fe00:a1a1</TT></TD>
    <TD><TT>00:00:00:00:a1:a1</TT></TD>
    </TR>
    </TABLE>
  </ul>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
<BR>
       CE-Router      TN
        |       | 
        |       |Initialize CE-Router(as a DHCPv6 client)
        |       |
        | ----> |<B>Solicit</B> 
        | <---- |<B>Advertise</B> 
        | ----> |<B>Request</B> 
        | <---- |<B>Reply</B> w/IA_NA option(T1=50, T2=80)
        |       |
        | <---- |<B>Echo Request</B>
        | ----> |<B>Echo Reply</B>
        |       |	
        |       |Wait T2 time expire
        |       |
        | ----> |<B>Rebind</B>
        |       |	
        .       .Repeat retransmission until RT=MRT+RAND*MRT
        |       |
        | ----> |<B>Rebind</B> (8*)
        |       |
</PRE>

=end html

=head1 JUDGEMENT

=begin html
<PRE>
  (8*)PASS: Finally, RT for Rebind conforms to Verification Points.
</PRE>

=end html

=head1 TERMINATION

=begin html
<PRE>
  N/A
</PRE>

=end html

=head1 REFERENCE

=begin html
<PRE>
[RFC 7084],W-1
[RFC 3315],Section 5.5, 14 and 18.1.4
[RFC 3633],Section 12.1
</PRE>

=end html

=head1 SEE ALSO

=begin html
<PRE>
<BR>
  perldoc  V6evalTool
<BR>
</PRE>

=end html
