#!/usr/bin/perl
#
# Copyright (C) 2013, 2014, 2015
# Chunghwa Telecommunication Labratories (CHT-TL)
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $CHT-TL: V6LC_2_1_6_A.seq,v 1.2 2015/04/28 weifen Exp $
#
########################################################################
BEGIN{
	$V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_2 $';
}

use nd;

use lib '../';
use CPE6_config;
use DHCPv6_common;
use CPE6;

my $Link0 = 'Link0';
my $Link1 = 'Link1';
vCapture($Link0);
startNdiscWorld($Link1);


my $ra = $STATEFUL_CLIENT ? 'ra_MsetOset' : 'ra_MclearOset';
my ($ret,$tn2_prefix) = cpe_initialization($ra,$Link0,"",$STATEFUL_CLIENT,0);
if ($ret != 0) {
    vLogHTML('<FONT COLOR="#FF0000">CPE initialization fail!</FONT><BR>');
    dhcpExitFail();
}

#--------------------------------------------------------------#
# Send RS message (tn5->nut)
# Wait until RA with delegated prefix arrives (nut->tn5)
#--------------------------------------------------------------#
vSleep($WAIT_LAN_RA);
vClear($Link1); 

vLogHTML('<B>==== TN5 <--> CE-Router: RS and RA Messages Exchange  ====</B><BR>');
vSend($Link1, 'rs_tn5_to_nut');

my ($retra, %ra) = wait_for_ra($Link1, 10,1);
cpe6ExitFail if ($retra != 0);

my $base = 'Frame_Ether.Packet_IPv6.ICMPv6_RA.Opt_ICMPv6_Prefix';
my $prefix_opt = $base;
my $prefix_opt_num = $ra{$base."#"};
my $count = 1;
my $get_prefix = 0;
my $tn2_prefix1;
while (($count <= $prefix_opt_num) && ($get_prefix == 0)){
  $tn2_prefix1 = $ra{$prefix_opt."."."Prefix"};
  if ($tn2_prefix1 =~ /3ffe:501:ffff:111/){
      $get_prefix = 1;
  }
  $count++;
  $prefix_opt = $base.$count;
}

# Get retransTimer
if ($ra{'Frame_Ether.Packet_IPv6.ICMPv6_RA.RetransTimer'} == 0) {
	# since retransTimer in RA is 0, NUT needs to use default timer value
	$retransTimer = 1;
} else {
	$retransTimer = $ra{'Frame_Ether.Packet_IPv6.ICMPv6_RA.RetransTimer'} / 1000;
}
vLogHTML("<B>Retransmit interval in CE-Routers' RA is $retransTimer====</B><BR>");

vLogHTML('<FONT COLOR="#FF0000" SIZE="5"><U><B>Procedure</B></U></FONT><BR>');

my $ereq = 'ndisc_ereq_LL';
vClear($Link1);
vSend($Link1, $ereq);

my @frames = mcastNS($ereq);
my $recvCount = 0;
my $solicit = 0;

$TimeOut = 1 + 1;
my @recvTimes = ();

for( ; ; ) {
	my $recv_valid	= 0;
	my %ret = vRecvWrapper($Link1, $TimeOut, 0, 0, @frames);

	if($ret{'recvCount'}) {
		$recvCount += $ret{'recvCount'};

		foreach my $frame (@frames) {
			if($ret{'recvFrame'} eq $frame) {
				$solicit ++;
				$recvCount --;
				$recv_valid	++;
				push(@recvTimes,
					$ret{'recvTime'.$ret{'recvCount'}});
				last;
			}
		}

		if($solicit > $MAX_MULTICAST_SOLICIT) {
			vLogHTML('<FONT COLOR="#FF0000"><B>'.
				'Observed too many NSs</B></FONT><BR>');

			dhcpExitFail();
		}

		if($recv_valid) {
			next;
	 	}
	}

	last;
}

unless($solicit) {
	vLogHTML('<FONT COLOR="#FF0000"><B>'.
		'Could\'t observe NS</B></FONT><BR>');

	dhcpExitFail();
}

if($solicit < $MAX_MULTICAST_SOLICIT) {
	vLogHTML('<FONT COLOR="#FF0000"><B>'.
		'Observed too less NSs</B></FONT><BR>');

	dhcpExitFail();
}

if(checkInterval($retransTimer, @recvTimes) < 0) {
	dhcpExitFail();
}


dhcpExitPass();
#NOTREACHED



#------------------------------#
# checkInterval                #
#------------------------------#
sub
checkInterval($@)
{
	my ($retransTimer, @recvtimes) = @_;
	my $returnvalue = 0;

	vLogHTML('<TABLE>');

	for(my $d = 0; $d <= $#recvtimes; $d ++) {
		vLogHTML('<TR>');
		vLogHTML("<TD ROWSPAN=\"2\">Recv[$d]</TD>");
		vLogHTML('<TD ROWSPAN="2">:</TD>');
		vLogHTML("<TD ROWSPAN=\"2\">$recvtimes[$d] sec.</TD>");

		if($d == 0) {
			vLogHTML('<TD COLSPAN="4">&nbsp;</TD>');
		}

		vLogHTML('</TR>');

		vLogHTML('<TR>');

		if($d == $#recvtimes) {
			vLogHTML('<TD COLSPAN="4">&nbsp;</TD>');
		} else {
			my $delta = $recvtimes[$d + 1] - $recvtimes[$d];

			vLogHTML("<TD ROWSPAN=\"2\">Interval[$d]</TD>");
			vLogHTML('<TD ROWSPAN="2">:</TD>');
			vLogHTML(sprintf("<TD ROWSPAN=\"2\">%.6f sec.</TD>",
				$delta));

			my $margin = 0.5;
			if(($delta < $retransTimer - $margin) ||
				($delta > $retransTimer + $margin)) {

				vLogHTML('<TD ROWSPAN="2">');
				vLogHTML('<FONT COLOR="#FF0000">*</FONT>');
				vLogHTML('</TD>');
				$returnvalue = -1;
			} else {
				vLogHTML('<TD ROWSPAN="2">&nbsp;</TD>');
			}
		}

		vLogHTML('</TR>');
	}

	vLogHTML('</TABLE>');

	if($returnvalue < 0) {
		vLogHTML('<FONT COLOR="#FF0000">'.
			'Retransmissions MUST be rate-limited to '.
			'at most one solicitation per<BR>');
		vLogHTML('<FONT COLOR="#FF0000">'.
			'neighbor every RetransTimer milliseconds.<BR>');
	}

	return($returnvalue);
}



#------------------------------#
# setupCommon11_local()        #
#------------------------------#
sub
setupCommon11_local($$)
{
	my ($retrans, $ra, $bool) = @_;

	vLogHTML("set RetransTimer=$retransTimer<BR>");

	$NEED_COMMON_CLEANUP = 1;

	my %nd_hash = (
		'ns_l2l'	=> 'na_l2l',
		'ns_g2l'	=> 'na_l2g',
		'ucast_ns_l2l'	=> 'na_l2l',
		'ucast_ns_g2l'	=> 'na_l2g',
		'ucast_ns_sll_l2l'	=> 'na_l2l',
		'ucast_ns_sll_g2l'	=> 'na_l2g',
	);

	vClear($Link0);
	vSend($Link0, $ra);
	ignoreDAD($Link0);

	if($bool) {
		$force_cleanup_r0 = 1;
	}

	$tr1_default = 1;
	my $ereq = 'setup_echo_request';
	my $erep = 'setup_echo_reply';
	my @frames = ();

	if($bool) {
		push(@frames, 'ucast_ns_l2l');
		push(@frames, 'ucast_ns_g2l');
		push(@frames, 'ucast_ns_sll_l2l');
		push(@frames, 'ucast_ns_sll_g2l');
	} else {
		push(@frames, 'ns_l2l');
		push(@frames, 'ns_g2l');
	}

	my $mcast_ns	= '';

	vClear($Link1);
	vSend($Link1, $ereq);

	if($bool) {
		my %ret1 = vRecvWrapper($Link1, $TimeOut, 0, 0, $erep);
		if($ret2{'recvCount'}) {
			if($ret2{'recvFrame'} ne $erep) {
				return(-1);
			}
		}

		my %ret2 = vRecvWrapper($Link1, 5 + $retrans + 1, 0, 0, @frames);
		if($ret1{'recvCount'}) {
			foreach my $frame (@frames) {
				if($ret1{'recvFrame'} eq $frame) {
					$mcast_ns = $frame;
					last;
				}
			}
		}

		my $na = $nd_hash{$mcast_ns};

		vClear($Link0);
		vSend($Link0, $na);
		$tr1_cache = 1;
	} else {
		my %ret1 = vRecvWrapper($Link1, $retrans + 1, 0, 0, @frames);
		if($ret1{'recvCount'}) {
			foreach my $frame (@frames) {
				if($ret1{'recvFrame'} eq $frame) {
					$mcast_ns = $frame;
					last;
				}
			}
		}

		if($mcast_ns eq '') {
			vLogHTML('<FONT COLOR="#FF0000"><B>Could\'t observe NS</B></FONT><BR>');
			return(-1);
		}



		my $na = $nd_hash{$mcast_ns};

		vClear($Link1);
		vSend($Link1, $na);
		$tr1_cache = 1;

		my %ret2 = vRecvWrapper($Link1, $TimeOut, 0, 0, $erep);
		if($ret2{'recvCount'}) {
			if($ret2{'recvFrame'} ne $erep) {
				return(-1);
			}
		}
	}

	return(0);
}



#
# perldoc
#
########################################################################
__END__

=head1 NAME

  Neighbor Solicitation Origination, Address Resolution
  Part A: Neighbor Solicitation Origination, Target Address Being Link-local

=head1 Purpose

  Verify that a node properly originates Neighbor Solicitations when trying to resolve the
  address of a neighbor.

=head1 References

[RFC 7084],L-1
[RFC 4861],Section 6.2.1, 7.2.2

=head1 Resource Requirements

  * Packet generator
  * Monitor to capture packets

=head1 Test Setup

  Common Test Setup is performed at the beginning of this test part.

=begin html

<BLOCKQUOTE>

<TABLE>
<TR>

<TD>
<TABLE BORDER>
<Caption>Packet A</Caption>
<TR>
<TD>
	IPv6 Header<br>
	Next Header: 58<br>
	Source Address: TN2's local Address<br>
	Destination Address: NUT's Link-local Address
</TD>
</TR>
<TR>
<TD>ICMPv6 Echo Request</TD>
</TR>
</TABLE>
</TD>

<TD>
<TABLE BORDER>
<Caption>Packet B</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58<br>
        Source Address: TN2's Global Address<br>
	Destination Address: NUT's Global Address
</TD>
</TR>
<TR>
<TD>ICMPv6 Echo Request</TD>
</TR>
</TABLE>
</TD>

</TR>
</TABLE>

</BLOCKQUOTE>

=end html

=head1 Procedure

  Part A: Neighbor Solicitation Origination, Target Address Being Link-local
   1. If the NUT is a host, perform Common Test Setup 1.1 with a Retransmit Interval value of 1
      second. If the NUT is a router, configure the Retransmit Interval value to 1 second.
   2. TN2 transmits Packet A. The source address is TN2's link-local address and the destination
      address is the NUT's link-local address.
   3. Observe the packets transmitted by the NUT. TN2 doesn't send any Neighbor Advertisement.


=head1 Observable Results

  Part A

    Step 3: 
    In response to Packet A, the NUT should transmit Neighbor Solicitations with a
    Target Address equal to the TN2's Link-local Address at intervals of 1 second. The NUT
    MUST transmit no more than 1 Neighbor Solicitation every 1 second. Each Neighbor
    Solicitation MUST have a Source Link-Layer Address Option. The maximum number of
    Neighbor Solicitations should be MAX_MULTICAST_SOLICIT, which should be 3.


=head1 Possible Problems

  * None. 

=cut

