//
// Copyright (C) 2013
// Chunghwa Telecommunication Labratories (CHT-TL)
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $CHT-TL: common_echo.def,v 1.0 2013/08/19 weifen Exp $
//
////////////////////////////////////////////////////////////////

#ifndef HAVE_COMMON_ECHO_DEF
#define HAVE_COMMON_ECHO_DEF

FEM_icmp6_echo_request(
	tn2_ereq_diff,
	_HETHER_tnY_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	tr1_ereq_common,
	_HETHER_tr1_to_nut,
	{
		_SRC(v6(TR1_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	tr1_ereq_cleanup,
	_HETHER_trX_to_nut,
	{
		_SRC(v6(TR1_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	tr2_ereq_common,
	_HETHER_tr2_to_nut,
	{
		_SRC(v6(TR2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	tr3_ereq_common,
	_HETHER_tr3_to_nut,
	{
		_SRC(v6(TR3_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	tr2_ereq_cleanup,
	_HETHER_trX_to_nut,
	{
		_SRC(v6(TR2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	tr3_ereq_cleanup,
	_HETHER_trX_to_nut,
	{
		_SRC(v6(TR3_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	tn2_offlink_ereq_cleanup,
	_HETHER_tnX_to_nut,
	{
		_SRC(tn2v6(LINKX_PREFIX, LINKX_PREFIXLEN));
		_DST(nutv6("Link1"));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	tn2_onlink_ereq_cleanup,
	_HETHER_tnX_to_nut,
	{
		_SRC(v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL)));
		_DST(nutv6("Link1"));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	tn2_onlink_ereq_cleanupX,
	_HETHER_tnX_to_nut,
	{
		_SRC(tn2v6(LINKX_PREFIX, LINKX_PREFIXLEN));
		_DST(nutv6("Link1"));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	tn2_ereq_cleanup,
	_HETHER_tnX_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_request(
	tn2_ereq_common,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	tn2_erep_common,
	_HETHER_nut_to_tn2,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TN2_LINKLOCAL));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	tr1_erep_common,
	_HETHER_nut_to_tr1,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TR1_LINKLOCAL));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	tr1_erep_cleanup,
	_HETHER_nut_to_trX,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TR1_LINKLOCAL));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	tr2_erep_common,
	_HETHER_nut_to_tr2,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TR2_LINKLOCAL));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	tr3_erep_common,
	_HETHER_nut_to_tr3,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TR3_LINKLOCAL));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	tn2_erep_diff,
	_HETHER_nut_to_tnY,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TN2_LINKLOCAL));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	tr1_erep_diff,
	_HETHER_nut_to_trY,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TR1_LINKLOCAL));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	tr2_erep_diff,
	_HETHER_nut_to_trY,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TR2_LINKLOCAL));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	tr2_erep_cleanup,
	_HETHER_nut_to_trX,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TR2_LINKLOCAL));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	tr3_erep_cleanup,
	_HETHER_nut_to_trX,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TR3_LINKLOCAL));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	tn2_offlink_erep_cleanup,
	_HETHER_nut_to_tnX,
	{
		_SRC(nutv6("Link1"));
		_DST(tn2v6(LINKX_PREFIX, LINKX_PREFIXLEN));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	tn2_onlink_erep_cleanup,
	_HETHER_nut_to_tnX,
	{
		_SRC(nutv6("Link1"));
		_DST(v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL)));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	tn2_onlink_erep_cleanupX,
	_HETHER_nut_to_tnX,
	{
		_SRC(nutv6("Link1"));
		_DST(tn2v6(LINKX_PREFIX, LINKX_PREFIXLEN));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	tn2_erep_cleanup,
	_HETHER_nut_to_tnX,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TN2_LINKLOCAL));
	},
	{
		payload	= payload8;
	}
)

Payload payload8 {
	data	= hexstr("0123456789abcdef", 8);
}

Payload payload1352 {
	data	= repeat(0x00, 1352);
}
#endif	// HAVE_COMMON_ECHO_DEF
