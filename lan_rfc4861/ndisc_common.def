//
// Copyright (C) 2013
// Chunghwa Telecommunication Labratories (CHT-TL)
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// for common cleanup
// $CHT-TL: ndisc_common.def,v 1.0 2013/08/19 weifen Exp $
//
////////////////////////////////////////////////////////////////
#ifndef R1_MAC
#define R1_MAC         A1N_MAC_ADDR
#endif

#ifndef R1_LINKLOCAL
#define R1_LINKLOCAL   _LLOCAL0A1N_UCAST_ADDR
#endif


#ifndef R2_MAC
#define R2_MAC         A2N_MAC_ADDR
#endif

#ifndef R2_LINKLOCAL
#define R2_LINKLOCAL   _LLOCAL0A2N_UCAST_ADDR
#endif	

// router to all nodes
_HETHER_define(
  _HETHER_r12allnodes, ether(R1_MAC),
	v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))

_HETHER_define(_HETHER_r22allnodes, ether(R2_MAC),
	v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))

// NUT to Router solnode
_HETHER_define(
	_HETHER_nut2r0solnode,
	nutether(),	_ETHER_SOLNODE_MCAST(v6(R0_LINKLOCAL))
)

_HETHER_define(
	_HETHER_nut2r1solnode,
	nutether(),	_ETHER_SOLNODE_MCAST(v6(R1_LINKLOCAL))
)

_HETHER_define(
	_HETHER_nut2r2solnode,
	nutether(),	_ETHER_SOLNODE_MCAST(v6(R2_LINKLOCAL))
)

// Router to NUT
_HETHER_define(_HETHER_r12nut,	ether(R1_MAC),	nutether())
_HETHER_define(_HETHER_r22nut,	ether(R2_MAC),	nutether())

// NUT to Router
_HETHER_define(_HETHER_nut2r1,	nutether(),	ether(R1_MAC))
_HETHER_define(_HETHER_nut2r2,	nutether(),	ether(R2_MAC))

#ifndef RX_MAC
#define RX_MAC "00:00:00:00:b0:b0"
#endif

#ifndef TNX_MAC
#define TNX_MAC "00:00:00:00:c0:c0"
#endif

_HETHER_define(
        _HETHER_trX_to_allnodes,
        ether(RX_MAC),
        v62ethermulti(v6(_ALLNODES_MCAST_ADDR))
)
_HETHER_define(
	_HETHER_tnX_to_allnodes,
	ether(TNX_MAC),
	v62ethermulti(v6(_ALLNODES_MCAST_ADDR))
)
_HETHER_define(
        _HETHER_nut_to_trX,
        nutether(),
        ether(RX_MAC)
)
_HETHER_define(
	_HETHER_nut_to_tnX,
	nutether(),
	ether(TNX_MAC)
)
_HETHER_define(
        _HETHER_trX_to_nut,
        ether(RX_MAC),
        nutether()
)
_HETHER_define(
	_HETHER_tnX_to_nut,
	ether(TNX_MAC),
	nutether()
)

Opt_ICMPv6_TLL opt_tll_trX {
        LinkLayerAddress        = ether(RX_MAC);
}
Opt_ICMPv6_TLL opt_tll_tnX {
        LinkLayerAddress        = ether(TNX_MAC);
}

// for TR1=r0
FEM_icmp6_na(
        na_cleanup_r0,
        _HETHER_trX_to_allnodes,
        {
                HopLimit        = 255;
                _SRC(v6(R0_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
        },
        {
                RFlag           = 1;
                SFlag           = 0;
                OFlag           = 1;
                TargetAddress   = v6(R0_LINKLOCAL);
                option          = opt_tll_trX;
        }
)

FEM_icmp6_echo_request(
        ereq_cleanup_r0,
        _HETHER_trX_to_nut,
        {
                _SRC(v6(R0_LINKLOCAL));
                _DST(nutv6("Link1"));
        },
        {
                payload = payload8;
        }
)

FEM_icmp6_echo_reply(
        erep_cleanup_r0,
        _HETHER_nut_to_trX,
        {
                _SRC(nutv6("Link1"));
                _DST(v6(R0_LINKLOCAL));
        },
        {
                payload = payload8;
        }
)

FEM_icmp6_ra(
        ra_cleanup_r0,
        _HETHER_r02allnodes,
        {
                HopLimit        = 255;
		_SRC(v6(R0_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
        },
        {
                CurHopLimit     = 64;
                MFlag           = 0;
                OFlag           = 0;
                LifeTime        = 0;
                ReachableTime   = 0;
                RetransTimer    = 0;
                option          = opt_prefix_link0_zero;
        }
)

FEM_icmp6_ra(
        ra_cleanup_r0_force,
        _HETHER_r02allnodes,
        {
                HopLimit        = 255;
				_SRC(v6(R0_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
        },
        {
                CurHopLimit     = 64;
                MFlag           = 0;
                OFlag           = 0;
                LifeTime        = 0;
                ReachableTime   = 30000;
                RetransTimer    = 1000;
                option          = opt_prefix_link0_zero;
        }
)

// for TR2=r1
FEM_icmp6_na(
        na_cleanup_r1,
        _HETHER_trX_to_allnodes,
        {
                HopLimit        = 255;
                _SRC(v6(R1_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
        },
        {
                RFlag           = 1;
                SFlag           = 0;
                OFlag           = 1;
                TargetAddress   = v6(R1_LINKLOCAL);
                option          = opt_tll_trX;
        }
)

FEM_icmp6_echo_request(
        ereq_cleanup_r1,
        _HETHER_trX_to_nut,
        {
                _SRC(v6(R1_LINKLOCAL));
                _DST(nutv6("Link1"));
        },
        {
                payload = payload8;
        }
)

FEM_icmp6_echo_reply(
        erep_cleanup_r1,
        _HETHER_nut_to_trX,
        {
                _SRC(nutv6("Link1"));
                _DST(v6(R1_LINKLOCAL));
        },
        {
                payload = payload8;
        }
)

FEM_icmp6_ra(
        ra_cleanup_r1,
        _HETHER_r12allnodes,
        {
                HopLimit        = 255;
				_SRC(v6(R1_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
        },
        {
                CurHopLimit     = 64;
                MFlag           = 0;
                OFlag           = 0;
                LifeTime        = 0;
                ReachableTime   = 0;
                RetransTimer    = 0;
                option          = opt_prefix_link0_zero;
        }
)

// for TR1=r2
FEM_icmp6_na(
        na_cleanup_r2,
        _HETHER_trX_to_allnodes,
        {
                HopLimit        = 255;
                _SRC(v6(R2_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
        },
        {
                RFlag           = 1;
                SFlag           = 0;
                OFlag           = 1;
                TargetAddress   = v6(R2_LINKLOCAL);
                option          = opt_tll_trX;
        }
)

FEM_icmp6_echo_request(
        ereq_cleanup_r2,
        _HETHER_trX_to_nut,
        {
                _SRC(v6(R2_LINKLOCAL));
                _DST(nutv6("Link1"));
        },
        {
                payload = payload8;
        }
)

FEM_icmp6_echo_reply(
        erep_cleanup_r2,
        _HETHER_nut_to_trX,
        {
                _SRC(nutv6("Link1"));
                _DST(v6(R2_LINKLOCAL));
        },
        {
                payload = payload8;
        }
)

FEM_icmp6_ra(
        ra_cleanup_r2,
        _HETHER_r22allnodes,
        {
                HopLimit        = 255;
				_SRC(v6(R2_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
        },
        {
                CurHopLimit     = 64;
                MFlag           = 0;
                OFlag           = 0;
                LifeTime        = 0;
                ReachableTime   = 0;
                RetransTimer    = 0;
                option          = opt_prefix_link0_zero;
        }
)



FEM_icmp6_na(
	na_cleanup_tn2,
	_HETHER_tnX_to_allnodes,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
	},
	{
		RFlag	= 0;
		SFlag	= 0;
		OFlag	= 1;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option	= opt_tll_tnX;
	}
)

FEM_icmp6_echo_request(
	ereq_cleanup_tn2,
	_HETHER_tnX_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	erep_cleanup_tn2,
	_HETHER_nut_to_tnX,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TN2_LINKLOCAL));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_na(
	na_cleanup_tn2_global,
	_HETHER_tnX_to_allnodes,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
	},
	{
		RFlag	= 0;
		SFlag	= 0;
		OFlag	= 1;
		TargetAddress	= v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL));
		option	= opt_tll_tnX;
	}
)

FEM_icmp6_echo_request(
	ereq_cleanup_tn2_global,
	_HETHER_tnX_to_nut,
	{
		_SRC(v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL)));
		_DST(nutv6("Link1"));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	erep_cleanup_tn2_global,
	_HETHER_nut_to_tnX,
	{
		_SRC(nutv6("Link1"));
		_DST(v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL)));
	},
	{
		payload	= payload8;
	}
)



FEM_icmp6_na(
	na_cleanup_tr1,
	_HETHER_tnX_to_allnodes,
	{
		HopLimit	= 255;
		_SRC(v6(R0_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
	},
	{
		RFlag	= 1;
		SFlag	= 0;
		OFlag	= 1;
		TargetAddress	= v6(R0_LINKLOCAL);
		option	= opt_tll_tnX;
	}
)

FEM_icmp6_echo_request(
	ereq_cleanup_tr1,
	_HETHER_tnX_to_nut,
	{
		_SRC(v6(R0_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		payload	= payload8;
	}
)

FEM_icmp6_echo_reply(
	erep_cleanup_tr1,
	_HETHER_nut_to_tnX,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(R0_LINKLOCAL));
	},
	{
		payload	= payload8;
	}
)


