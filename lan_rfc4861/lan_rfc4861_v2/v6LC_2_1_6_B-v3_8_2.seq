#!/usr/bin/perl
#
# Copyright (C) 2013
# Chunghwa Telecommunication Labratories (CHT-TL)
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $CHT-TL: v6LC_2_1_6_B-v3_8_2.seq,v 1.1 2014/07/17 weifen Exp $
#
########################################################################
BEGIN{
	$V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_1 $';
}

use nd;
use V6evalTool;

use lib '../.';
use DHCPv6_common;
use CPE6_config;

my $ereq = 'ndisc_ereq_GG';

vCapture("$Link0");
startNdiscWorld($Link1);


if(setupCommon11() < 0) {
	vRemote('reboot.rmt','');
	exit($V6evalTool::exitFail);
	#NOTREACHED
}

$NOT_USE_FAST_CHANGE_STATE ++;

vLogHTML('<FONT COLOR="#FF0000" SIZE="5"><U><B>Procedure</B></U></FONT><BR>');

if(ndiscNone2DelayLoose($Link1, $ereq) < 0) {
	vRemote('reboot.rmt','');
	exit($V6evalTool::exitFail);
	#NOTREACHED
}

if(ndProbe2None($Link1, $ereq) < 0) {
	vRemote('reboot.rmt','');
	exit($V6evalTool::exitFail);
	#NOTREACHED
}

vRemote('reboot.rmt','');
exit($V6evalTool::exitPass);
#NOTREACHED



#------------------------------#
# setupCommon11()              #
#------------------------------#
sub setupCommon11 {
	my $IF0 = "Link0";
	my $IF1 = "Link1";
	vLog("Setup");
	
	my $ra = $STATEFUL_CLIENT ? 'ra_MsetOset' : 'ra_MclearOset';
	my ($ret,$tn2_prefix) = cpe_initialization($ra,$IF0,$IF1,$STATEFUL_CLIENT,0);
	if ($ret != 0) {
	  vLogHTML('<FONT COLOR="#FF0000">CPE initialization fail!</FONT><BR>');
	  return (-1);
	} else {
		if ($tn2_prefix =~ /3ffe:501:ffff/ ) {
		    vLogHTML("<B>RA includes the global prefix($tn2_prefix).</B></BR>");
		    vCPP("-D\'PREFIX_FROM_PD=\"$tn2_prefix\"\' ");
		} else {
			vLogHTML('<FONT COLOR="#FF0000">Did not get golbal prefix from RA!</FONT><BR>');
		  return (-1);
		}
	}
	return(0);
}

#
# perldoc
#
########################################################################
__END__

=head1 NAME

  Neighbor Solicitation Origination, Reachability Confirmation
  Part B: Neighbor Solicitation Origination, Global => Global

=head1 Purpose

  Verify that a node properly originates Neighbor Solicitations when trying to confirm the
  reachability of a neighbor.

=head1 References

[RFC 7084],L-1
[RFC 4861],Section 7.3

=head1 Resource Requirements

  * Packet generator
  * Monitor to capture packets

=head1 Test Setup

  Common Test Setup is performed at the beginning of this test part.

=begin html

<BLOCKQUOTE>

<TABLE>
<TR>

<TD>
<TABLE BORDER>
<Caption>Packet A</Caption>
<TR>
<TD>
	IPv6 Header<br>
	Next Header: 58<br>
	Source Address: TN2's local Address<br>
	Destination Address: NUT's Link-local Address
</TD>
</TR>
<TR>
<TD>ICMPv6 Echo Request</TD>
</TR>
</TABLE>
</TD>

<TD>
<TABLE BORDER>
<Caption>Packet B</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58<br>
        Source Address: TN2's Global Address<br>
	Destination Address: NUT's Global Address
</TD>
</TR>
<TR>
<TD>ICMPv6 Echo Request</TD>
</TR>
</TABLE>
</TD>

</TR>
</TABLE>

<br>

<TABLE>
<TR>

<TD>
<TABLE BORDER>
<Caption>Packet C</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58<br>
        Source Address: TN2's local Address<br>
        Destination Address: NUT's Link-local Address
</TD>
</TR>
<TR>
<TD>ICMPv6 Echo Request</TD>
</TR>
</TABLE>
</TD>

<TD>
<TABLE BORDER>
<Caption>Packet D</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58<br>
        Source Address: TN2's Global Address<br>
        Destination Address: NUT's Global Address
</TD>
</TR>
<TR>
<TD>ICMPv6 Echo Request</TD>
</TR>
</TABLE>
</TD>

</TR>
</TABLE>

</BLOCKQUOTE>

=end html

=head1 Procedure

  Part B: Neighbor Solicitation Origination, Global => Global
   8. TN2 transmit Packet B. The source address is TN2's global address and the destination address is
      the NUT's global address.
   9. Observe the packets transmitted by the NUT. TN2 sends a Neighbor Advertisement upon
      receiving Neighbor Solicitations from the NUT.
   10. Wait REACHABLE_TIME * MAX_RANDOM_FACTOR seconds so that the NCE of TN2
       transit to state STALE.
   11. TN2 transmits Packet A. The source address is TN2's global address and the destination address
       is the NUT's global address.
   12. Observe the packets transmitted by the NUT.
   13. Wait DELAY_FIRST_PROBE_TIME seconds so that NCE of TN2 transit to state PROBE.
   14. Observe the packets transmitted by the NUT.


=head1 Observable Results

  Part B
   Step 9: 
   In response to Packet B, the NUT should transmit Neighbor Solicitations with a
   Target Address equal to the TN2's global Address at intervals of 1 second. The NUT MUST
   transmit no more than 1 Neighbor Solicitation every 1 second. Once a Neighbor
   Advertisement is received from TN2, the NUT should send an Echo Reply in response to
   Packet B. The NCE of TN2 is in state REACHABLE.

   Step 12: 
   In response to Packet B, the NUT should transmit an Echo Reply.

   Step 14: 
   The NUT should transmit Neighbor Solicitations with the NUT's global or link-
   local address being the source address and TN2's global address as the destination address.
   The maximum number of Neighbor Solicitations that the NUT can transmit is 3.

=head1 Possible Problems

  * None. 

=cut

