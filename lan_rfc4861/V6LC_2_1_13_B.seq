#!/usr/bin/perl
#
# Copyright (C) 2013, 2014, 2015
# Chunghwa Telecommunication Labratories (CHT-TL)
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $CHT-TL: V6LC_2_1_13_B.seq,v 1.1 2015/04/28 weifen Exp $
#
########################################################################
BEGIN{
	$V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_1 $';
}

use nd;

use lib '../.';
use DHCPv6_common;
use CPE6_config;


my $ereq = 'ndisc_ereq_LL';

###################################################################################
vCapture($Link0);
startNdiscWorld($Link1);

vLogHTML('<FONT COLOR="#FF0000" SIZE="5"><U><B>Procedure</B></U></FONT><BR>');

my $ra = $STATEFUL_CLIENT ? 'ra_MsetOset' : 'ra_MclearOset';
my ($ret,$tn2_prefix) = cpe_initialization($ra,$Link0,$Link1,$STATEFUL_CLIENT,0);
if ($ret != 0) {
    vLogHTML('<FONT COLOR="#FF0000">CPE initialization fail!</FONT><BR>');
    dhcpExitFail();
}
###################################################################################

#----------------------------------------------------------------------
# Send Echo Request and NA
#----------------------------------------------------------------------
if(ndiscNone2ProbeWithNS($Link1, $ereq) < 0) {
	$NEED_COMMON_CLEANUP = 1;
	$tn2_cache = 1;
	dhcpExitFail();
	#NOTREACHED
}

#----------------------------------------------------------------------
# Send NS
#----------------------------------------------------------------------
my @na = ndSetNa4ucastNsX();

if(ndRecvNsProbe2StaleWithEchoRequest($Link1, 'nd_ucast_ns_sll_x', \@na) < 0) {
	$NEED_COMMON_CLEANUP = 1;
	$tn2_cache = 1;
	dhcpExitFail();
	#NOTREACHED
}

dhcpExitPass();
#NOTREACHED



#
# perldoc
#
########################################################################
__END__

=head1 NAME

  Neighbor Solicitation Processing, NCE State PROBE
  Part B: Unicast Neighbor Solicitation with a different SLLA

=head1 Purpose

  Verify that a node properly updates its neighbor cache upon receipt of neighbor solicitations
  when the NCE of the neighbor is in state Probe.

=head1 References

[RFC 7084],L-1
[RFC 4861],Section 7.2.3 and 7.2.4


=head1 Resource Requirements

  * Packet generator
  * Monitor to capture packets

=head1 Test Setup

  Common Test Setup is performed at the beginning of this test part.

=begin html

<BLOCKQUOTE>

<TABLE BORDER>
<Caption>Packet A</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58<br>
        Source Address: TN2's Link-local Address<br>
	Destination Address: NUT's Link-local Address
</TD>
</TR>
<TR>
<TD>ICMPv6 Echo Request</TD>
</TR>
</TABLE>

<br>

<TABLE BORDER>
<Caption>Neighbor Advertisement B</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58<br>
        Source Address: TN2's Link-local Address<br>
        Destination Address: NUT's Link-local Address<br>
</TD>
</TR>
<TR>
<TD>
        Neighbor Advertisement<br>
        Router flag: 0<br>
        Solicited flag: 0<br>
        Override flag: 1<br>
	Target Address: TN2's Link-local Address
</TD>
</TR>
</TABLE>

<br>

<TABLE>
<TR>

<TD>
<TABLE BORDER>
<Caption>Neighbor Solicitation C</Caption>
<TR>
<TD>
	IPv6 Header<br>
	Next Header: 58<br>
	Destination Address: NUT's Link-local Address<br>
	Source Address: TN2's Link-local Address
</TD>
</TR>
<TR>
<TD>
	Neighbor Solicitation<br>
	Target Address: NUT's Link-local Address<br>
	Source Link-Layer Address: TN2's Ethernet address
</TD>
</TR>
</TABLE>
</TD>

<TD>
<TABLE BORDER>
<Caption>Neighbor Solicitation D</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58<br>
	Destination Address: NUT's Solicited-node Multicast Link-local Address<br>
        Source Address: TN2's Link-local Address
</TD>
</TR>
<TR>
<TD>
	Neighbor Solicitation<br>
        Target Address: NUT's Link-local Address<br>
        Source Link-Layer Address: TN2's Ethernet address
</TD>
</TR>
</TABLE>
</TD>

</TR>
</TABLE>
</BLOCKQUOTE>

=end html


=head1 Procedure

  Part B: Unicast Neighbor Solicitation with a different SLLA
   9. TN2 transmits Packet A to the NUT.
   10. TN2 transmits Neighbor Advertisement B to the NUT after receiving any Neighbor Solicitations
        from the NUT.
   11. Check the NCE of TN2 on the NUT and observe the packets transmitted by the NUT.
   12. Wait (DELAY_FIRST_PROBE_TIME) seconds.
   13. Check the NCE of TN2 on the NUT and observe the packets transmitted by the NUT.
   14. TN2 transmits Neighbor Solicitation C with a different address as the Source Link-layer Address.
   15. TN2 transmits an Echo Request to the NUT.
   16. Check the NCE of TN2 on the NUT and observe the packets transmitted by the NUT.

=head1 Observable Results

  Part B

   Step 11:
   The NUT should update the NCE of TN2 to state STALE. After receiving the Echo
   Request from TN2, the NUT should send an Echo Reply and enter state DELAY.

   Step 13:
   After DELAY_FIRST_PROBE_TIME, the NUT should transition to state PROBE
   by sending a unicast Neighbor Solicitation to TN2.

   Step 16:
   The NUT should update TN2's Link-layer address to its new link-layer address
   from the received Neighbor Solicitation C and MUST update the state of TN2's NCE to
   STALE. The NUT should reply to the Neighbor Solicitation by sending a Neighbor
   Advertisement using TN2's new Link-Layer address. After responding to the Neighbor
   Solicitation, the NUT should respond to the Echo Request by sending an Echo Reply and set
   the state of the TN2's Entry to DELAY. After DELAY_FIRST_PROBE_TIME, the NUT
   should send a unicast Neighbor Solicitation to TN2 using the new Link-layer address as the
   Target.

=head1 Possible Problems

  * None.

=cut

