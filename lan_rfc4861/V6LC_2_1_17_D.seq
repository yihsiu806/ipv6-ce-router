#!/usr/bin/perl
#
# Copyright (C) 2013, 2014, 2015
# Chunghwa Telecommunication Labratories (CHT-TL)
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $CHT-TL: V6LC_2_1_17_D.seq,v 1.1 2015/04/28 weifen Exp $
#
########################################################################
BEGIN{
	$V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_2 $';
}

use nd;

use lib '../.';
use DHCPv6_common;
use CPE6_config;

my $ereq = 'ndisc_ereq_LL';
my $erep = 'ndisc_erep_LL';
###################################################################################
vCapture($Link0);
startNdiscWorld($Link1);

vLogHTML('<FONT COLOR="#FF0000" SIZE="5"><U><B>Procedure</B></U></FONT><BR>');

my $ra = $STATEFUL_CLIENT ? 'ra_MsetOset' : 'ra_MclearOset';
my ($ret,$tn2_prefix) = cpe_initialization($ra,$Link0,$Link1,$STATEFUL_CLIENT,0);
if ($ret != 0) {
    vLogHTML('<FONT COLOR="#FF0000">CPE initialization fail!</FONT><BR>');
    dhcpExitFail();
}
###################################################################################

if(ndiscNone2Incomplete($Link1, $ereq) < 0) {
	dhcpExitFail();
	#NOTREACHED
}

$NEED_COMMON_CLEANUP = 1;
$tn2_cache = 1;

if(ndSendNaIncomplete2Stale($Link1, $ereq, 'nd_ucast_na_rso_tll') < 0) {
	dhcpExitFail();
	#NOTREACHED
}

# vClear($Link1);
# vSend($Link1, $ereq);
# my %ret = vRecv($Link1, $TimeOut, 0, 0, $erep);
# if($ret{'recvFrame'} ne $erep) {
# 	vLogHTML('<FONT COLOR="#FF0000"><B>Could\'t observe Echo Reply'.
# 		'</B></FONT><BR>');
# 	dhcpExitFail();
# 	#NOTREACHED
# }

my @frames = ucastNS($ereq);

%ret = vRecvWrapper($Link1, $DELAY_FIRST_PROBE_TIME + $TimeOut,
	$SeekTime, 0, @frames);

if($ret{'recvCount'}) {
	foreach my $frame (@frames) {
		if($ret{'recvFrame'} eq $frame) {
			$NEED_COMMON_CLEANUP = 0;
			$tn2_cache = 0;
			flushBuffer($Link1, $TimeOut, $TimeOut);
			dhcpExitPass();
			#NOTREACHED
		}
	}
}

vLogHTML('<FONT COLOR="#FF0000"><B>Could\'t observe NS</B></FONT><BR>');
dhcpExitFail();
#NOTREACHED



#
# perldoc
#
########################################################################
__END__

=head1 NAME

  Neighbor Advertisement Processing, NCE State INCOMPLETE
  Part D: Receiving NA with S = 0 and O = 0

=head1 Purpose

  Verify that a node properly updates its Neighbor Cache from the INCOMPLETE state upon
  receipt of a Neighbor Advertisement.

=head1 References

[RFC 7084],L-1
[RFC 4861],Section 7.2.5

=begin html

<BLOCKQUOTE>

<TABLE BORDER>
<TR>
<TD>Solicited flag</TD>
<TD>Override flag</TD>
<TD>New State</TD>
<TD>Update Link-Layer Address</TD>
</TR>
<TR>
<TD>set</TD>
<TD>set</TD>
<TD>REACHABLE</TD>
<TD>yes</TD>
</TR>
<TR>
<TD>set</TD>
<TD>clear</TD>
<TD>REACHABLE</TD>
<TD>yes</TD>
</TR>
<TR>
<TD>clear</TD>
<TD>set</TD>
<TD>STALE</TD>
<TD>yes</TD>
</TR>
<TR>
<TD>clear</TD>
<TD>clear</TD>
<TD>STALE</TD>
<TD>yes</TD>
</TR>
</TABLE>

</BLOCKQUOTE>

=end html

=head1 Resource Requirements

  * Packet generator
  * Monitor to capture packets

=head1 Test Setup

  Common Test Setup is performed at the beginning of this test part.

=begin html

<BLOCKQUOTE>

<TABLE BORDER>
<Caption>Packet A</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58<br>
        Source Address: TN2's local Address<br>
        Destination Address: NUT's Link-local Address
</TD>
</TR>
<TR>
<TD>ICMPv6 Echo Request</TD>
</TR>
</TABLE>

<br><br>

<TABLE>
<TR>

<TD>
<TABLE BORDER>
<Caption>Neighbor Adv. B</Caption>
<TR>
<TD>
	IPv6 Header<br>
	Next Header: 58
</TD>
</TR>
<TR>
<TD>
	Neighbor Adv.<br>
	Solicited flag: 1<br>
	Override flag: 1
</TD>
</TR>
</TABLE>
</TD>

<TD>
<TABLE BORDER>
<Caption>Neighbor Adv. C</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58
</TD>
</TR>
<TR>
<TD>
        Neighbor Adv.<br>
        Solicited flag: 1<br>
        Override flag: 0
</TD>
</TR>
</TABLE>
</TD>

<TD>
<TABLE BORDER>
<Caption>Neighbor Adv. D</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58 
</TD>
</TR>
<TR>
<TD>
        Neighbor Adv.<br>
        Solicited flag: 0<br>
        Override flag: 1
</TD>
</TR>
</TABLE>
</TD>

<TD>
<TABLE BORDER>
<Caption>Neighbor Adv. E</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58 
</TD>
</TR>
<TR>
<TD>
        Neighbor Adv.<br>
        Solicited flag: 0<br>
        Override flag: 0
</TD>
</TR>
</TABLE>
</TD>

</TR>
</TABLE>

</BLOCKQUOTE>

=end html

=head1 Procedure

  Part D: Receiving NA with S = 0 and O = 0
   17. TN2 transmits Packet A.
   18. Observe the packets transmitted by the NUT.
   19. TN2 transmits Neighbor Advertisement E.
   20. Observe the packets transmitted by the NUT and the NCE of TN2 on the NUT.

=head1 Observable Results

  Part D

   Step 18:
   After receiving the Echo Request from TN2, the NUT should create a Neighbor
   Cache Entry for TN2 and set the state of the Entry to INCOMPLETE. The NUT should
   send a multicast Neighbor Solicitation to TN2.

   Step 20:
   After receiving the Neighbor Advertisement from TN2, the NUT should update its
   NCE of TN2 with the received Target Link-layer Address and change the state of the NCE to
   STALE and send the queued Echo Reply to TN2. After DELAY_FIRST_PROBE_TIME, the
   NUT should send a unicast Neighbor Solicitation to TN2.

=head1 Possible Problems

  * None. 

=cut

