#!/usr/bin/perl
#
# Copyright (C) 2013, 2014, 2015
# Chunghwa Telecommunication Labratories (CHT-TL)
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $CHT-TL: V6LC_2_1_20_N.seq,v 1.1 2015/04/28 weifen Exp $
#
########################################################################
BEGIN{
	$V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_2 $';
}

use nd;

use lib '../.';
use DHCPv6_common;
use CPE6_config;


my $ereq = 'ndisc_ereq_LL';

###################################################################################
vCapture($Link0);
startNdiscWorld($Link1);

vLogHTML('<FONT COLOR="#FF0000" SIZE="5"><U><B>Procedure</B></U></FONT><BR>');

my $ra = $STATEFUL_CLIENT ? 'ra_MsetOset' : 'ra_MclearOset';
my ($ret,$tn2_prefix) = cpe_initialization($ra,$Link0,$Link1,$STATEFUL_CLIENT,0);
if ($ret != 0) {
    vLogHTML('<FONT COLOR="#FF0000">CPE initialization fail!</FONT><BR>');
    dhcpExitFail();
}
###################################################################################

if(ndiscNone2ProbeWithNS($Link1, $ereq) < 0) {
	$NEED_COMMON_CLEANUP = 1;
	$tn2_cache = 1;

	dhcpExitFail();
	#NOTREACHED
}

if(ndSendNaProbe2Probe($Link1, $ereq, 'nd_mcast_na_rsO_tll') < 0) {
	$NEED_COMMON_CLEANUP = 1;
	$tn2_cache = 1;

	dhcpExitFail();
	#NOTREACHED
}

dhcpExitPass();
#NOTREACHED



#
# perldoc
#
########################################################################
__END__

=head1 NAME

  Neighbor Advertisement Processing, NCE State PROBE
  Part N

=head1 Purpose

  Verify that a node properly updates its Neighbor Cache from the PROBE state upon receipt of
  a Neighbor Advertisement.

=head1 References

[RFC 7084],L-1
[RFC 4861],Section 7.2.5 and 7.3.3

=begin html

<BLOCKQUOTE>

<TABLE BORDER>
<TR>
<TD>Destination</TD>
<TD>Solicited flag</TD>
<TD>Override flag</TD>
<TD>TLLA</TD>
<TD>New State</TD>
<TD>Update Link-Layer Address</TD>
<TD>Part</TD>
</TR>

<TR>
<TD>Multicast</TD>
<TD>clear</TD>
<TD>set</TD>
<TD>same</TD>
<TD>PROBE</TD>
<TD>no</TD>
<TD>N</TD>
</TR>

</TABLE>
</BLOCKQUOTE>

=end html

=head1 Resource Requirements

  * Packet generator
  * Monitor to capture packets

=head1 Test Setup

  Common Test Setup is performed at the beginning of this test part.

=begin html

<BLOCKQUOTE>

<TABLE BORDER>
<Caption>Echo Request A</Caption>
<TR>
<TD>
	IPv6 Header<br>
	Next Header: 58<br>
	Source Address: TN2's Link-local Address<br>
	Destination Address: NUT's Link-local Address<br>
</TD>
</TR>
<TR>
<TD>
        ICMPv6 Echo Request
</TD>
</TR>
</TABLE>

<br>

<TABLE BORDER>
<Caption>Neighbor Adv. (A-P)</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58<br>
        Source Address: TN2's Link-local Address<br>
        Destination Address: see table
</TD>
</TR>
<TR>
<TD>
        Neighbor Adv.<br>
	Solicited flag: see table<br>
	Override flag: see table
</TD>
</TR>
<TR>
<TD>
        Target LLA Option: see table<br>
</TD>
</TR>
</TABLE>

<br>

<TABLE BORDER>
<Caption>Neighbor Adv. Q</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58<br>
        Source Address: TN2's Link-local Address<br>
        Destination Address: NUT's Link-local Address
</TD>
</TR>
<TR>
<TD>
        Neighbor Advertisement<br>
	Router flag: 0<br>
        Solicited flag: 0<br>
        Override flag: 1<br>
	Target Address: TN2's Link-local Address<br>
</TD>
</TR>

</TABLE>
</BLOCKQUOTE>

=end html


=head1 Procedure

   1. TN2 transmits Echo Request A to the NUT.
   2. TN2 transmits Neighbor Advertisement Q to the NUT.
   3. Check the NCE of TN2 on the NUT and observe the packets transmitted by the NUT.
   4. Wait (DELAY_FIRST_PROBE_TIME) seconds.
   5. Check the NCE of TN2 on the NUT and observe the packets transmitted by the NUT.
   6. TN2 transmits Neighbor Advertisement A. The Solicited and Override flags are set according to
       Part A entry of the table in the discussion above. Similarly, the address in the Target Link Layer
       Address Option is provided as it is indicated.
   7. Skip this step for Parts A, B, E, F, I, K, M, N, O, Q and R; TN2 transmits an Echo Request.
   8. Check the NCE of TN2 on the NUT and observe the packets transmitted by the NUT.
   9. Perform the common cleanup procedure.
  10. Repeat Steps 1 through 9 for Parts B through R.

=head1 Observable Results

  Parts A through R
   Step 3:
   The NUT should change the state of TN2's NCE to STALE. After receiving the
   Echo Request from TN2, the NUT should send a Reply and enter state DELAY.

   Step 5:
   The NUT should change the state of TN2's NCE to PROBE by transmitting a unicast
   Neighbor Solicitation to TN2.

   Step 8:
   The NUT MUST update the state of TN2's NCE and the LLA according to the table
   in the discussion above. After receiving the Echo Request from TN2 in step 7, the NUT
   should react according to the following:

=begin html

<BLOCKQUOTE>

<TABLE BORDER>
<Caption>Parts C, D, G, H and L to REACHABLE</Caption>
<TR>
<TD>
After receiving the Echo Request from TN2, the NUT should send an Echo<br>
Reply. After DELAY_FIRST_PROBE_TIME, the NUT should not send a<br>
unicast Neighbor Solicitation to TN2.<br>
<br>
Part L<br>
 The NUT's Echo Reply should be sent to the new updated link-layer<br>
 destination address of TN2.
</TD>
</TR>
</TABLE>

<br>

<TABLE BORDER>
<Caption>Parts J and P to STALE</Caption>
<TR>
<TD>
After receiving the Echo Request from TN2, the NUT should send an Echo<br>
Reply. After DELAY_FIRST_PROBE_TIME, the NUT should send a unicast<br>
Neighbor Solicitation to TN2.<br>
   The NUT's Echo Reply should be sent to the new updated link-layer<br>
destination address of TN2. The Neighbor Solicitation should use the new link-<br>
layer address in the Target field.<br>
</TD>
</TR>
</TABLE>

<br>

<TABLE BORDER>
<Caption>Parts A, B, E, F, I, K, M-O, and Q-R to PROBE</Caption>
<TR>
<TD>
The NUT should send a unicast Neighbor Solicitation to TN2.
</TD>
</TR>
</TABLE>

</BLOCKQUOTE>

=end html

=head1 Possible Problems

  * None. 

=cut

