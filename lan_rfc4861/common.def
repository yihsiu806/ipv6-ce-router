//
// Copyright (C) 2013
// Chunghwa Telecommunication Labratories (CHT-TL)
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $CHT-TL: common.def,v 1.0 2013/08/19 weifen Exp $
//
////////////////////////////////////////////////////////////////

#include "../CPE6_common.def"

#ifndef HAVE_COMMON_DEF
#define HAVE_COMMON_DEF

#ifndef	LINK0_PREFIX
#define	LINK0_PREFIX	_GLOBAL0_UCAST_PRFX
#endif	// LINK0_PREFIX

#ifndef	LINK0_PREFIXLEN
#define	LINK0_PREFIXLEN	_GLOBAL0_UCAST_PRFXLEN
#endif	// LINK0_PREFIXLEN

#ifndef	LINK1_PREFIX
#define	LINK1_PREFIX	_GLOBAL1_UCAST_PRFX
#endif	// LINK1_PREFIX

#ifndef	LINK1_PREFIXLEN
#define	LINK1_PREFIXLEN	_GLOBAL1_UCAST_PRFXLEN
#endif	// LINK1_PREFIXLEN

#ifndef	LINKX_PREFIX
#define	LINKX_PREFIX	"3ffe:501:ffff::"
#endif	// LINKX_PREFIX

#ifndef	LINKX_PREFIXLEN
#define	LINKX_PREFIXLEN	64
#endif	// LINKX_PREFIXLEN

#ifndef	LINKY_PREFIX
#define	LINKY_PREFIX	"3ffe:501:ffff::"
#endif	// LINKY_PREFIX

#ifndef	LINKY_PREFIXLEN
#define	LINKY_PREFIXLEN	64
#endif	// LINKY_PREFIXLEN

#ifndef	TR2_MAC
#define	TR2_MAC		A2N_MAC_ADDR
#endif	// TR2_MAC

#ifndef	TR2_LINKLOCAL
#define	TR2_LINKLOCAL	_LLOCAL0A2N_UCAST_ADDR
#endif	// TR2_LINKLOCAL

#ifndef	TR2_GLOBAL
#define	TR2_GLOBAL	_GLOBAL0A2N_UCAST_ADDR
#endif	// TR2_GLOBAL

#ifndef	TR3_MAC
#define	TR3_MAC		A3N_MAC_ADDR
#endif	// TR3_MAC

#ifndef	TR3_LINKLOCAL
#define	TR3_LINKLOCAL	_LLOCAL0A3N_UCAST_ADDR
#endif	// TR3_LINKLOCAL

#ifndef	TR3_GLOBAL
#define	TR3_GLOBAL	_GLOBAL0A3N_UCAST_ADDR
#endif	// TR3_GLOBAL

#ifndef	TRX_MAC
#define	TRX_MAC		"00:00:00:00:b0:b0"
#endif	// TRX_MAC

#ifndef	TRY_MAC
#define	TRY_MAC		"00:00:00:00:c0:c0"
#endif	// TRY_MAC

#ifndef	TNX_MAC
#define	TNX_MAC		"00:00:00:00:b0:b0"
#endif	// TNX_MAC

#ifndef	TNY_MAC
#define	TNY_MAC		"00:00:00:00:c0:c0"
#endif	// TNY_MAC


_HETHER_define(
	_HETHER_nut_to_tr1solnode,
	nutether(),
	_ETHER_SOLNODE_MCAST(v6(TR1_LINKLOCAL))
)


_HETHER_define(
	_HETHER_tr2_to_allnodes,
	ether(TR2_MAC),
	v62ethermulti(v6(_ALLNODES_MCAST_ADDR))
)

_HETHER_define(
	_HETHER_nut_to_tr2solnode,
	nutether(),
	_ETHER_SOLNODE_MCAST(v6(TR2_LINKLOCAL))
)

_HETHER_define(
	_HETHER_tr2_to_nut,
	ether(TR2_MAC),
	nutether()
)

_HETHER_define(
	_HETHER_nut_to_tr2,
	nutether(),
	ether(TR2_MAC)
)

_HETHER_define(
	_HETHER_tr3_to_allnodes,
	ether(TR3_MAC),
	v62ethermulti(v6(_ALLNODES_MCAST_ADDR))
)

_HETHER_define(
	_HETHER_nut_to_tr3solnode,
	nutether(),
	_ETHER_SOLNODE_MCAST(v6(TR3_LINKLOCAL))
)

_HETHER_define(
	_HETHER_tr3_to_nut,
	ether(TR3_MAC),
	nutether()
)

_HETHER_define(
	_HETHER_nut_to_tr3,
	nutether(),
	ether(TR3_MAC)
)

_HETHER_define(
	_HETHER_trX_to_allnodes,
	ether(TRX_MAC),
	v62ethermulti(v6(_ALLNODES_MCAST_ADDR))
)

_HETHER_define(
	_HETHER_trX_to_nut,
	ether(TRX_MAC),
	nutether()
)

_HETHER_define(
	_HETHER_nut_to_trX,
	nutether(),
	ether(TRX_MAC)
)

_HETHER_define(
	_HETHER_trY_to_allnodes,
	ether(TRY_MAC),
	v62ethermulti(v6(_ALLNODES_MCAST_ADDR))
)

_HETHER_define(
	_HETHER_trY_to_nut,
	ether(TRY_MAC),
	nutether()
)

_HETHER_define(
	_HETHER_nut_to_trY,
	nutether(),
	ether(TRY_MAC)
)

_HETHER_define(
	_HETHER_tnX_to_allnodes,
	ether(TNX_MAC),
	v62ethermulti(v6(_ALLNODES_MCAST_ADDR))
)

_HETHER_define(
	_HETHER_tnX_to_nut,
	ether(TNX_MAC),
	nutether()
)

_HETHER_define(
	_HETHER_nut_to_tnX,
	nutether(),
	ether(TNX_MAC)
)

_HETHER_define(
	_HETHER_tnY_to_allnodes,
	ether(TNY_MAC),
	v62ethermulti(v6(_ALLNODES_MCAST_ADDR))
)

_HETHER_define(
	_HETHER_tnY_to_nut,
	ether(TNY_MAC),
	nutether()
)

_HETHER_define(
	_HETHER_nut_to_tnY,
	nutether(),
	ether(TNY_MAC)
)

_HETHER_define(_HETHER_nut2any,  nutether(), any)


Opt_ICMPv6_SLL opt_sll_tr2 {
	LinkLayerAddress	= ether(TR2_MAC);
}

Opt_ICMPv6_SLL opt_sll_tr3 {
	LinkLayerAddress	= ether(TR3_MAC);
}

Opt_ICMPv6_SLL opt_sll_trY {
	LinkLayerAddress	= ether(TRY_MAC);
}

Opt_ICMPv6_SLL opt_sll_tnY {
	LinkLayerAddress	= ether(TNY_MAC);
}


Opt_ICMPv6_TLL opt_tll_tr2 {
	LinkLayerAddress	= ether(TR2_MAC);
}

Opt_ICMPv6_TLL opt_tll_tr3 {
	LinkLayerAddress	= ether(TR3_MAC);
}

Opt_ICMPv6_TLL opt_tll_trX {
	LinkLayerAddress	= ether(TRX_MAC);
}

Opt_ICMPv6_TLL opt_tll_trY {
	LinkLayerAddress	= ether(TRY_MAC);
}

Opt_ICMPv6_TLL opt_tll_tnX {
	LinkLayerAddress	= ether(TNX_MAC);
}

Opt_ICMPv6_TLL opt_tll_tnY {
	LinkLayerAddress	= ether(TNY_MAC);
}

#include "./common_ra.def"
#include "./common_ns.def"
#include "./common_na.def"
#include "./common_echo.def"
#endif	// HAVE_COMMON_DEF
