//
// Copyright (C) 2013
// Chunghwa Telecommunication Labratories (CHT-TL)
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $CHT-TL: nd_na.def,v 1.0 2013/08/19 weifen Exp $
//
////////////////////////////////////////////////////////////////

#ifndef HAVE_ND_NA_DEF
#define HAVE_ND_NA_DEF

#ifndef HAVE_ND_NS_DEF
#include "./ndisc.def"
#endif

//
// NA: TN -> NUT (unicast) w/o TLL
//
////////////////////////////////

FEM_icmp6_na(
	nd_ucast_na_rso,
	_HETHER_tn2_to_nut,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		RFlag		= 0;
		SFlag		= 0;
		OFlag		= 0;
		TargetAddress	= v6(TN2_LINKLOCAL);
	}
)

FEM_icmp6_na(
	nd_ucast_na_rSo,
	_HETHER_tn2_to_nut,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		RFlag		= 0;
		SFlag		= 1;
		OFlag		= 0;
		TargetAddress	= v6(TN2_LINKLOCAL);
	}
)

FEM_icmp6_na(
	nd_ucast_na_rsO,
	_HETHER_tn2_to_nut,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		RFlag		= 0;
		SFlag		= 0;
		OFlag		= 1;
		TargetAddress	= v6(TN2_LINKLOCAL);
	}
)

FEM_icmp6_na(
	nd_ucast_na_rSO,
	_HETHER_tn2_to_nut,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		RFlag		= 0;
		SFlag		= 1;
		OFlag		= 1;
		TargetAddress	= v6(TN2_LINKLOCAL);
	}
)

//
// NA: TN -> NUT (multicast) w/o TLL
//
////////////////////////////////

FEM_icmp6_na(
	nd_mcast_na_rso,
	_HETHER_tn2_to_allnodes,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
	},
	{
		RFlag		= 0;
		SFlag		= 0;
		OFlag		= 0;
		TargetAddress	= v6(TN2_LINKLOCAL);
	}
)

FEM_icmp6_na(
	nd_mcast_na_rSo,
	_HETHER_tn2_to_allnodes,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
	},
	{
		RFlag		= 0;
		SFlag		= 1;
		OFlag		= 0;
		TargetAddress	= v6(TN2_LINKLOCAL);
	}
)

FEM_icmp6_na(
	nd_mcast_na_rsO,
	_HETHER_tn2_to_allnodes,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
	},
	{
		RFlag		= 0;
		SFlag		= 0;
		OFlag		= 1;
		TargetAddress	= v6(TN2_LINKLOCAL);
	}
)

FEM_icmp6_na(
	nd_mcast_na_rSO,
	_HETHER_tn2_to_allnodes,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
	},
	{
		RFlag		= 0;
		SFlag		= 1;
		OFlag		= 1;
		TargetAddress	= v6(TN2_LINKLOCAL);
	}
)

//
// NA: TN -> NUT (unicast) w/ TLL
//
////////////////////////////////

FEM_icmp6_na(
	nd_ucast_na_rso_tll,
	_HETHER_tn2_to_nut,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		RFlag		= 0;
		SFlag		= 0;
		OFlag		= 0;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option		= opt_tll_tn2;
	}
)

FEM_icmp6_na(
	nd_ucast_na_rSo_tll,
	_HETHER_tn2_to_nut,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		RFlag		= 0;
		SFlag		= 1;
		OFlag		= 0;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option		= opt_tll_tn2;
	}
)

FEM_icmp6_na(
	nd_ucast_na_rsO_tll,
	_HETHER_tn2_to_nut,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		RFlag		= 0;
		SFlag		= 0;
		OFlag		= 1;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option		= opt_tll_tn2;
	}
)

FEM_icmp6_na(
	nd_ucast_na_rSO_tll,
	_HETHER_tn2_to_nut,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		RFlag		= 0;
		SFlag		= 1;
		OFlag		= 1;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option		= opt_tll_tn2;
	}
)

//
// NA: TN -> NUT (multicast) w/ TLL
//
////////////////////////////////

FEM_icmp6_na(
	nd_mcast_na_rso_tll,
	_HETHER_tn2_to_allnodes,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
	},
	{
		RFlag		= 0;
		SFlag		= 0;
		OFlag		= 0;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option		= opt_tll_tn2;
	}
)

FEM_icmp6_na(
	nd_mcast_na_rSo_tll,
	_HETHER_tn2_to_allnodes,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
	},
	{
		RFlag		= 0;
		SFlag		= 1;
		OFlag		= 0;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option		= opt_tll_tn2;
	}
)

FEM_icmp6_na(
	nd_mcast_na_rsO_tll,
	_HETHER_tn2_to_allnodes,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
	},
	{
		RFlag		= 0;
		SFlag		= 0;
		OFlag		= 1;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option		= opt_tll_tn2;
	}
)

FEM_icmp6_na(
	nd_mcast_na_rSO_tll,
	_HETHER_tn2_to_allnodes,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
	},
	{
		RFlag		= 0;
		SFlag		= 1;
		OFlag		= 1;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option		= opt_tll_tn2;
	}
)

//
// NA: TN -> NUT (unicast) w/ TLL (diff)
//
////////////////////////////////

FEM_icmp6_na(
	nd_ucast_na_rso_tll_diff,
	_HETHER_h02nut,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		RFlag		= 0;
		SFlag		= 0;
		OFlag		= 0;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option		= opt_tll_h0;
	}
)

FEM_icmp6_na(
	nd_ucast_na_rSo_tll_diff,
	_HETHER_h02nut,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		RFlag		= 0;
		SFlag		= 1;
		OFlag		= 0;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option		= opt_tll_h0;
	}
)

FEM_icmp6_na(
	nd_ucast_na_rsO_tll_diff,
	_HETHER_h02nut,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		RFlag		= 0;
		SFlag		= 0;
		OFlag		= 1;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option		= opt_tll_h0;
	}
)

FEM_icmp6_na(
	nd_ucast_na_rSO_tll_diff,
	_HETHER_h02nut,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		RFlag		= 0;
		SFlag		= 1;
		OFlag		= 1;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option		= opt_tll_h0;
	}
)

//
// NA: TN -> NUT (multicast) w/ TLL (diff)
//
////////////////////////////////

FEM_icmp6_na(
	nd_mcast_na_rso_tll_diff,
	_HETHER_h02allnodes,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
	},
	{
		RFlag		= 0;
		SFlag		= 0;
		OFlag		= 0;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option		= opt_tll_h0;
	}
)

FEM_icmp6_na(
	nd_mcast_na_rSo_tll_diff,
	_HETHER_h02allnodes,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
	},
	{
		RFlag		= 0;
		SFlag		= 1;
		OFlag		= 0;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option		= opt_tll_h0;
	}
)

FEM_icmp6_na(
	nd_mcast_na_rsO_tll_diff,
	_HETHER_h02allnodes,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
	},
	{
		RFlag		= 0;
		SFlag		= 0;
		OFlag		= 1;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option		= opt_tll_h0;
	}
)

FEM_icmp6_na(
	nd_mcast_na_rSO_tll_diff,
	_HETHER_h02allnodes,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(v6(_ALLNODES_MCAST_ADDR));
	},
	{
		RFlag		= 0;
		SFlag		= 1;
		OFlag		= 1;
		TargetAddress	= v6(TN2_LINKLOCAL);
		option		= opt_tll_h0;
	}
)

//
// multicast NS: NUT -> H0 (Link1)
//
////////////////////////////////

_HETHER_define(_HETHER_nut2h0link1solnode, nutether(),
	_ETHER_SOLNODE_MCAST(v6(H0_GLOBAL_LINK1)))

FEM_icmp6_ns(
	ndisc_mcast_ns_sll_LG_h0_link1,
	_HETHER_nut2h0link1solnode,
	{
		HopLimit	= 255;
		_SRC(nutv6("Link1"));
		_DST(_IPV6_SOLNODE_MCAST(v6(H0_GLOBAL_LINK1)));
	},
	{
		TargetAddress	= v6(H0_GLOBAL_LINK1);
		option		= opt_sll_nut_lan;
	}
)

FEM_icmp6_ns(
	ndisc_mcast_ns_sll_GG_h0_link1,
	_HETHER_nut2h0link1solnode,
	{
		HopLimit	= 255;
		_SRC(v6merge(PREFIX_FROM_PD,64,nutv6("Link1")));
		_DST(_IPV6_SOLNODE_MCAST(v6(H0_GLOBAL_LINK1)));
	},
	{
		TargetAddress	= v6(H0_GLOBAL_LINK1);
		option		= opt_sll_nut_lan;
	}
)
#endif	// HAVE_ND_NA_DEF
