#!/usr/bin/perl
#
#Copyright (C) 2015
#Chunghwa Telecommunication Labratories (CHT-TL)
#All rights reserved.
#
#Redistribution and use of this software in source and binary
#forms, with or without modification, are permitted provided that
#the following conditions and disclaimer are agreed and accepted
#by the user:
#
#1. Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
#2. Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with
#   the distribution.
#
#3. Neither the names of the copyrighters, the name of the project
#   which is related to this software (hereinafter referred to as
#   "project") nor the names of the contributors may be used to
#   endorse or promote products derived from this software without
#   specific prior written permission.
#
#4. No merchantable use may be permitted without prior written
#   notification to the copyrighters.
#
#5. The copyrighters, the project and the contributors may prohibit
#   the use of this software at any time.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
#CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
#BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
#COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
#INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#POSSIBILITY OF SUCH DAMAGE.
#
#$CHT-TL: C_RFC3315_18_1_1_RetransReq.seq,v 1.0 2015/07/14 weifen Exp $
###############################################################################
BEGIN{
	$V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_2 $';
}
use strict;
use V6evalTool;

use lib '../.';
use DHCPv6_common;
use Client_pktdesc;

#--------------------------------------------------------------#
# Initialization variables
#--------------------------------------------------------------#
my $IF0 = "Link0";
my $rc = 0;
my $MRC = $REQ_MAX_RC;
my $ret;
vCapture($IF0);
#--------------------------------------------------------------#
# Initialize DHCPv6 Client
#--------------------------------------------------------------#
vSend($IF0,'ra_server2_to_all_MO_1');
#--------------------------------------------------------------#
#1.  Wait until Solicit arrives 
#--------------------------------------------------------------#
my ($retsol,%sol) = wait_for_solicit($IF0,30);
if($retsol != 0){
	dhcpExitFail;
}

vClear($IF0);
#--------------------------------------------------------------#
#2. Send Advertise to reply to Solicit
#--------------------------------------------------------------#
$SID_OPTION = "opt_SID_LLT_server1";
$IA_NA_OPTION = "opt_IA_NA_Addr_woStatus";
$IA_PD_OPTION = "opt_IA_PD_PF1";
$DNS_SVR_OPTION = "opt_DNS_Name_Server1";
$DNS_LST_OPTION = "opt_DNS_ServerSearchList";
my ($retadv, %adv) = send_advertise($IF0, "advertise_server1_to_nut", \%sol, "");
if($retadv != 0){
	dhcpExitFail;
}

#--------------------------------------------------------------#
#3.  Wait until Request arrives 
#--------------------------------------------------------------#
my ($retreq1, %req1) = wait_for_request($IF0,30);
if($retreq1 != 0){
	dhcpExitFail;
}

#--------------------------------------------------------------#
#4.  Caputure messages until RC == MRC
#--------------------------------------------------------------#
vLogHTML("<FONT COLOR=\"#FF0000\">MRC is $MRC</FONT><BR>");
my ($retreq2, %req2) = (1, ());
for($rc = 2; $rc <= $MRC; $rc++) {
	($retreq2,%req2) = wait_for_request($IF0, 2*$REQ_MAX_RT);
		if($retreq2 != 0){
			dhcpExitFail;
		}
	vLogHTML("<FONT COLOR=\"#FF0000\"> Retransmission Count is $rc. </FONT><BR>");
}

#--------------------------------------------------------------#
#5.  Caputure messages one more time (Acceptable)
#--------------------------------------------------------------#
my ($retreq2,%req2) = wait_for_request($IF0, 2*$REQ_MAX_RT);
if($retreq2 == 0){
	vLogHTML("<FONT COLOR=\"#FF0000\"> Retransmission Count is $rc. Still acceptable.</FONT><BR>");
}else{
	dhcpExitPass;
}

#--------------------------------------------------------------#
#6.  Caputure messages one more time
#--------------------------------------------------------------#
my ($retreq2,%req2) = wait_for_request($IF0, 2*$REQ_MAX_RT);
if($retreq2 == 0){
	vLogHTML('<FONT COLOR="#FF0000">Beyond REQ_MAX_RC </FONT><BR>');
	dhcpExitFail;
}

vClear($IF0);
vStop($IF0);
dhcpExitPass;
###############################################################################
__END__

=head1 NAME 

  Transmission of Request Messages
  Part C: Maximum Retransmission Count of Request messages

=head1 TARGET

  Client

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./C_RFC3315_18_1_1_RetransReq.seq"> C_RFC3315_18_1_1_RetransReq.seq</A> [-tooloption...] <BR>  -pkt  <A HREF="./C_RFC3315_18_1_1_RetransReq.def"> C_RFC3315_18_1_1_RetransReq.def</A> <BR>  -tooloption : v6eval tool option
<BR>
  See Also <A HREF="./DHCPv6.def"> DHCPv6.def </A> 
</PRE>

=end html

=head1 INITIALIZATION

=begin html
  <ul>
  <li><STRONG>Network Topology</STRONG></li> 
   <PRE>
          NUT(Client)
          |           
          |                        
Link0   --+--------+------------------------ 3ffe:501:ffff:100::/64
                   |
                   |          
                   TN(Server) 
   </PRE>
  </ul>
  <ul>  
  <li><STRONG>Verification Points</STRONG></li><br>
   <PRE>
   The client transmits the message using the following parameters:<BR>
     IRT   REQ_TIMEOUT <BR>
     MRT   REQ_MAX_RT <BR>
     MRC   REQ_MAX_RC <BR>
     MRD   0 <BR>
   The client retransmits Request for MRC times.  
  </PRE>
  </ul>
  <ul> 
  <li><STRONG>Configurations</STRONG></li><br>
   <BR>
    <TABLE BORDER="1">
    <TR>
    <TD><TT>Device Name</TT></TD>
    <TD><TT>Device Type</TT></TD>
    <TD><TT>Interface</TT></TD>
    <TD><TT>Assigned Prefix</TT></TD>
    <TD><TT>Link Local Addr</TT></TD>
    <TD><TT>MAC Addr</TT></TD>
    </TR>
    <TR>
    <TD><TT>Client</TT></TD>
    <TD><TT>NUT</TT></TD>
    <TD><TT>Link0</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>NUT's Linklocal address</TT></TD>
    <TD><TT>NUT's MAC address</TT></TD>
    </TR>
    <TR>
    <TD><TT>Server</TT></TD>
    <TD><TT>TN</TT></TD>
    <TD><TT>Link0</TT></TD>
    <TD><TT>3ffe:501:ffff:100::/64</TT></TD>
    <TD><TT>fe80::200:ff:fe00:a1a1</TT></TD>
    <TD><TT>00:00:00:00:a1:a1</TT></TD>
    </TR>
    </TABLE>
  </ul>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
<BR>
       NUT      TN
        |       |
        |       |Initialize NUT(as a DHCPv6 client)
        |       |
        | ----> |<B>Solicit</B> 
        | <---- |<B>Advertise</B> 
        | ----> |<B>Request</B> 
        |       |
        .       .Retransmit REQ_MAX_RC times.
        |       |
        | ----> |<B>Request</B> (4*)
        |       |
<BR>
</PRE>

=end html

=head1 JUDGEMENT

=begin html
<PRE>
<BR>  
  (4*)PASS: NUT does not retransmit Request message. 
</PRE>

=end html

=head1 TERMINATION

=begin html
<PRE>
  N/A
</PRE>

=end html

=head1 REFERENCE

=begin html
<PRE>
  Also see RFC3315
<BR>
  18.1.1. Creation and Transmission of Request Messages
<BR>
</PRE>

=end html

=head1 SEE ALSO

=begin html
<PRE>
<BR>
  perldoc  V6evalTool
<BR>
</PRE>

=end html
