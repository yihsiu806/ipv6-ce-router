//
// Copyright (C) 2013, 2014, 2015, 2016
// Chunghwa Telecommunication Labratories (CHT-TL)
// All rights reserved.
//
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $CHT-TL: CERouter_2_7_6.def, v 1.3 2016/5/10 weifen Exp $
//
////////////////////////////////////////////////////////////////

#include "../CPE6_common.def"

#define UNKNOWHOST_GLOBAL_ADDR v6("3ffe:501:fff0:111a::1234")

FEM_icmp6_echo_request (
	ereq_tn2_to_unknownhost,
	_HETHER_tn2_to_nut,
	{
	    _SRC(UNKNOWHOST_GLOBAL_ADDR);
	    _DST(v6merge(_PF2_PREFIX,64,v6(TN1_LINKLOCAL)));
	},
	{
	    payload = data8;
	}
)

FEM_icmp6_destination_unreachable (
	icmp6_dst_unreach,
	_HETHER_nut_to_tn2,
	{
	    PayloadLength <= 1024;
	    _SRC(v6merge(PREFIX_FROM_PD,64,nutv6("Link1")));
	    _DST(UNKNOWHOST_GLOBAL_ADDR);
	},
	{
	    Code = 5;
	    payload = any;
	}
)


FEM_icmp6_echo_request (
	forward_ereq,
	_HETHER_any,
	{
	    _SRC(UNKNOWHOST_GLOBAL_ADDR);
	    _DST(v6merge(_PF2_PREFIX,64,v6(TN1_LINKLOCAL)));
	},
	{
	    payload = data8;
	}
)

//----------------------------------------------------------------------
// Neighbor Solicitation Messages
//----------------------------------------------------------------------

_HETHER_define(HETHER_nut2tn2_oneof,  nutether("Link1"), oneof(TN2_MAC_ADDR,_ETHER_SOLNODE_MCAST(UNKNOWHOST_GLOBAL_ADDR),_ETHER_SOLNODE_MCAST(v6(TN2_LINKLOCAL))))

//----------------------------------------------------------------------
// NUT  --> any
// TargetAddress: TN1's global address
// Option : Source link layer address
//----------------------------------------------------------------------

FEM_icmp6_ns(
	ns_tn1,
	_HETHER_any,
	{
		_SRC(any);
		_DST(any);
	},
	{
		TargetAddress =v6merge(_PF2_PREFIX,64,v6(TN1_LINKLOCAL));
		option = stop;
	}
)

FEM_icmp6_na(
	na_tn1,
	_HETHER_tn1_to_nut,
	{
		_SRC(v6(TN1_LINKLOCAL));
		_DST(nutv6("Link0"));
		HopLimit = 255;
	},
	{
		RFlag = 0;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = v6merge(_PF2_PREFIX,64,v6(TN1_LINKLOCAL));
		option = opt_tll_tn1;
	}
)

//----------------------------------------------------------------------
// TN2  <-- NUT (link local address)
// TargetAddress: TN2's link local address
// Option : Source link layer address
//----------------------------------------------------------------------

FEM_icmp6_ns(
	ns_local_sll,
	HETHER_nut2tn2_oneof,
	{
		_SRC(oneof(nutv6("Link1"), v6merge(PREFIX_FROM_PD,64,nutv6("Link1"))));
		_DST(oneof(_IPV6_SOLNODE_MCAST(v6(TN2_LINKLOCAL)), v6(TN2_LINKLOCAL)));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(TN2_LINKLOCAL);
		option = opt_sll_nut_lan;
	}
)

//----------------------------------------------------------------------
// TN2  <-- NUT (link local address)
// TargetAddress: TN2's link local address
// Option : none
//----------------------------------------------------------------------

FEM_icmp6_ns(
	ns_local,
	HETHER_nut2tn2_oneof,
	{
		_SRC(oneof(nutv6("Link1"), v6merge(PREFIX_FROM_PD,64,nutv6("Link1"))));
		_DST(oneof(_IPV6_SOLNODE_MCAST(v6(TN2_LINKLOCAL)), v6(TN2_LINKLOCAL)));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(TN2_LINKLOCAL);
	}
)

//----------------------------------------------------------------------
// TN2  <-- NUT
// Source address: NUT's global address
// TargetAddress: TN2's global address
// Option : Source link layer address
//----------------------------------------------------------------------

FEM_icmp6_ns(
	ns_global_sll,
	HETHER_nut2tn2_oneof,
	{
		_SRC(oneof(nutv6("Link1"), v6merge(PREFIX_FROM_PD,64,nutv6("Link1"))));
		_DST(oneof(_IPV6_SOLNODE_MCAST(UNKNOWHOST_GLOBAL_ADDR), UNKNOWHOST_GLOBAL_ADDR));
		HopLimit = 255;
	},
	{
		TargetAddress = UNKNOWHOST_GLOBAL_ADDR;
		option = opt_sll_nut_lan;
	}
)


//----------------------------------------------------------------------
// TN2  <-- NUT
// Source address: NUT's global address
// TargetAddress: TN2's global address
// Option : none
//----------------------------------------------------------------------

FEM_icmp6_ns(
	ns_global,
	HETHER_nut2tn2_oneof,
	{
		_SRC(oneof(nutv6("Link1"), v6merge(PREFIX_FROM_PD,64,nutv6("Link1"))));
		_DST(oneof(_IPV6_SOLNODE_MCAST(UNKNOWHOST_GLOBAL_ADDR), UNKNOWHOST_GLOBAL_ADDR));
		HopLimit = 255;
	},
	{
		TargetAddress = UNKNOWHOST_GLOBAL_ADDR;
	}
)

//----------------------------------------------------------------------
// Neighber Advertisement Messages
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// TN2  (link local address)--> NUT (link local address)
// TargetAddress: TN2's link local address
//----------------------------------------------------------------------

FEM_icmp6_na(
	na_local,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
		HopLimit = 255;
	},
	{
		RFlag = 0;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = v6(TN2_LINKLOCAL);
		option = opt_tll_tn2;
	}
)

//----------------------------------------------------------------------
// TN2  (global address)--> NUT (global address)
// TargetAddress: TN2's global address
//----------------------------------------------------------------------

FEM_icmp6_na(
	na_global,
	_HETHER_tn2_to_nut,
	{
		_SRC(UNKNOWHOST_GLOBAL_ADDR);
		_DST(v6merge(PREFIX_FROM_PD,64,nutv6("Link1")));
		HopLimit = 255;
	},
	{
		RFlag = 0;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = UNKNOWHOST_GLOBAL_ADDR;
		option = opt_tll_tn2;
	}
)
