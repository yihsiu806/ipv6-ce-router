//
// Copyright (C) 2013
// Chunghwa Telecommunication Labratories (CHT-TL)
// All rights reserved.
//
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $CHT-TL: CERouter_2_7_5_C.def, v 1.0 2013/08/19 weifen Exp $
//
////////////////////////////////////////////////////////////////

#include "../CPE6_common.def"

#ifndef PF4_PREFIXLEN
#define PF4_PREFIXLEN	60
#endif  // PF4_PREFIXLEN

#define _PF4_PREFIX	"3ffe:501:ffff:5550::"
#define PF4_PREFIX	v6("3ffe:501:ffff:5550::")

Opt_DHCPv6_IA_PD opt_IA_PD_PF1_local {
        Time1		= 50;
        Time2		= 80;
        Identifier	= IA_PD_IDENTIFIER;
        option		= opt_IA_Delegate_PF1_local;
}

Opt_DHCPv6_IA_Prefix opt_IA_Delegate_PF1_local {
        PreferredLifetime	= 100;
        ValidLifetime		= 200;
        PrefixLength		= PF1_PREFIXLEN;
        Prefix			= PF1_PREFIX0;
}

Opt_DHCPv6_IA_PD opt_IA_PD_PF1_Invalid {
        Time1		= 20;
        Time2		= 30;
        Identifier	= IA_PD_IDENTIFIER;
        option		= opt_IA_Delegate_PF1_Invalid;
}

Opt_DHCPv6_IA_Prefix opt_IA_Delegate_PF1_Invalid {
        PreferredLifetime	= 0;
        ValidLifetime		= 0;
        PrefixLength		= PF1_PREFIXLEN;
        Prefix			= PF1_PREFIX0;
}

Opt_DHCPv6_IA_PD opt_2IA_PD {
        Time1		= IA_PD_TIME3;
        Time2		= IA_PD_TIME4;
        Identifier	= IA_PD_IDENTIFIER;
        option		= opt_IA_Delegate_PF1_PL0VL0;
        option		= opt_IA_Delegate_PF4;
}

Opt_DHCPv6_IA_Prefix opt_IA_Delegate_PF1_PL0VL0 {
        PreferredLifetime	= 0;
        ValidLifetime		= 0;
        PrefixLength		= PF1_PREFIXLEN;
        Prefix			= PF1_PREFIX0;
}

Opt_DHCPv6_IA_Prefix opt_IA_Delegate_PF4 {
        PreferredLifetime	= IA_PREFIX_PLTIME;
        ValidLifetime		= IA_PREFIX_VLTIME;
        PrefixLength		= PF4_PREFIXLEN;
        Prefix			= PF4_PREFIX;
}



DHCPv6_Auth_ReconfigureKey auth_hmac {
	Type    = 2;
	data = AUTH_VALUE;
}

Opt_DHCPv6_Authentication opt_Auth_msg {
	Protocol	= 3;
	Algorithm	= AUTH_ALGO;
	RDM		= AUTH_RDM;
	ReplayDetection	= hexstr("1122334455667789",8);
	auth		= auth_hmac;
}

//================================================================
//  DHCPv6 Reconfigure 
//  DHCPv6 Reconfigure: SERVER1----> NUT
FEM_dhcp6_reconfigure(
	dhcp6_reconfigure_server_to_nut,
	_HETHER_server1_to_nut,
	{
		_SRC(SERVER1_LLOCAL_UCAST);
		_DST(NUT_LLOCAL_UCAST);
	},
	{
		_SPORT(547);
		_DPORT(546);
	},
	{
		Identifier = 000000;
		option = CID;
		option = opt_SID_LLT_server1;
		option = opt_ReconfigureMessage;
		option = opt_Auth_msg;
	}
)

Opt_DHCPv6_ReconfigureAccept opt_accept_reconf {

}


DHCPv6_Auth_ReconfigureKey auth_type_key_local {
	Type    = 1;
	data    = AUTH_VALUE;
}

Opt_DHCPv6_Authentication opt_Auth_local {
	Protocol	= 3;
	Algorithm	= AUTH_ALGO;
	RDM		= AUTH_RDM;
	ReplayDetection	= hexstr("112233445566778a",8);
	auth		= auth_type_key_local;
}

FEM_icmp6_echo_request(
	ereq_tn2_to_nut,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL)));
		_DST(v6merge(PREFIX_FROM_PD,64,nutv6("Link1")));
	},
	{
		payload = data8;
	}
)

FEM_icmp6_echo_reply(
	erep_nut_to_tn2,
	_HETHER_nut_to_tn2,
	{
		_SRC(v6merge(PREFIX_FROM_PD,64,nutv6("Link1")));
		_DST(v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL)));
	},
	{
		payload = data8;
	}
)
//----------------------------------------------------------------------
// Neighbor Solicitation Messages
//----------------------------------------------------------------------

_HETHER_define(HETHER_nut2tn2_oneof,  nutether("Link1"), oneof(TN2_MAC_ADDR,_ETHER_SOLNODE_MCAST(v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL))),_ETHER_SOLNODE_MCAST(v6(TN2_LINKLOCAL))))

//----------------------------------------------------------------------
// TN2  <-- NUT (link local address)
// TargetAddress: TN2's link local address
// Option : Source link layer address
//----------------------------------------------------------------------

FEM_icmp6_ns(
	ns_local_sll,
	HETHER_nut2tn2_oneof,
	{
		_SRC(oneof(nutv6("Link1"), v6merge(PREFIX_FROM_PD,64,nutv6("Link1"))));
		_DST(oneof(_IPV6_SOLNODE_MCAST(v6(TN2_LINKLOCAL)), v6(TN2_LINKLOCAL)));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(TN2_LINKLOCAL);
		option = opt_sll_nut_lan;
	}
)

//----------------------------------------------------------------------
// TN2  <-- NUT (link local address)
// TargetAddress: TN2's link local address
// Option : none
//----------------------------------------------------------------------

FEM_icmp6_ns(
	ns_local,
	HETHER_nut2tn2_oneof,
	{
		_SRC(oneof(nutv6("Link1"), v6merge(PREFIX_FROM_PD,64,nutv6("Link1"))));
		_DST(oneof(_IPV6_SOLNODE_MCAST(v6(TN2_LINKLOCAL)), v6(TN2_LINKLOCAL)));
		HopLimit = 255;
	},
	{
		TargetAddress = v6(TN2_LINKLOCAL);
	}
)

//----------------------------------------------------------------------
// TN2  <-- NUT
// Source address: NUT's global address
// TargetAddress: TN2's global address
// Option : Source link layer address
//----------------------------------------------------------------------

FEM_icmp6_ns(
	ns_global_sll,
	HETHER_nut2tn2_oneof,
	{
		_SRC(oneof(nutv6("Link1"), v6merge(PREFIX_FROM_PD,64,nutv6("Link1"))));
		_DST(oneof(_IPV6_SOLNODE_MCAST(v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL))), v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL))));
		HopLimit = 255;
	},
	{
		TargetAddress = v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL));
		option = opt_sll_nut_lan;
	}
)


//----------------------------------------------------------------------
// TN2  <-- NUT
// Source address: NUT's global address
// TargetAddress: TN2's global address
// Option : none
//----------------------------------------------------------------------

FEM_icmp6_ns(
	ns_global,
	HETHER_nut2tn2_oneof,
	{
		_SRC(oneof(nutv6("Link1"), v6merge(PREFIX_FROM_PD,64,nutv6("Link1"))));
		_DST(oneof(_IPV6_SOLNODE_MCAST(v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL))), v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL))));
		HopLimit = 255;
	},
	{
		TargetAddress = v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL));
	}
)

//----------------------------------------------------------------------
// Neighber Advertisement Messages
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// TN2  (link local address)--> NUT (link local address)
// TargetAddress: TN2's link local address
//----------------------------------------------------------------------

FEM_icmp6_na(
	na_local,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
		HopLimit = 255;
	},
	{
		RFlag = 0;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = v6(TN2_LINKLOCAL);
		option = opt_tll_tn2;
	}
)

//----------------------------------------------------------------------
// TN2  (global address)--> NUT (global address)
// TargetAddress: TN2's global address
//----------------------------------------------------------------------

FEM_icmp6_na(
	na_global,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL)));
		_DST(v6merge(PREFIX_FROM_PD,64,nutv6("Link1")));
		HopLimit = 255;
	},
	{
		RFlag = 0;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = v6merge(PREFIX_FROM_PD,64,v6(TN2_LINKLOCAL));
		option = opt_tll_tn2;
	}
)