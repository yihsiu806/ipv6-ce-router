#!/usr/bin/perl
#
# Copyright (C) 2013, 2014, 2015
# Chunghwa Telecommunication Labratories (CHT-TL)
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# $CHT-TL: RA_mGA_mRAmPXmRT.seq,v 1.2 2015/04/28 weifen Exp $
# 

########################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_2 $ '; }
use V6evalTool;
use SAA;

use lib '../.';
use CPE6_config;

if (!$GLOBAL_ADDR_SLAAC) {
	vLogHTML('<B>SKIP</B><BR>');
	exit $V6evalTool::exitNS;
}

#------------------------------------------------------
#----- get sequence arguments
#------------------------------------------------------
$howto_initNUT="none";
$send = "ok";
$dad_recv_count=0;
$rs_recv_count=0;

foreach (@ARGV) {
# How to configure address of CE-Router?
# sample: boot, ra, manual+_GLOBAL0A0N_UCAST
    /^addrconf=(\S+)/ && do {$SAA::howto_addrconf=$1; next; };

# How to initialize CE-Router?
# sample: none, DADSuccess_boot, DADFail_boot
    /^init=(\S+)/     && do {$howto_initNUT=$1; next; };

# "none" if send no pakcet to CE-Router in state DADPostSendNS
# sample: ok, none
    /^send=(\S+)/     && do {$send=$1; next; };

# sequence debug options
# sample: qR
    /^sd=(\S+)/       && do {$seqdebugopt=$1; next; };
    seqERROR("Unknown sequence option '$_'");
}
#------------------------------------------------------

#----- test condition
$IF=Link0;                 # network interface

$max_retry_count = 10;     # retry if CE-Router state becomes DADPostSendNS
$max_retry_count = 2 if $SAA::sd =~ /q/;    # quick retry
$send_interval  = 1;
	       # 1[sec] time between DAD NS and DAD NS, send to CE-Router
               #     (RandomDelay is 0-1sec  e.g. default RetransTimer 1000msec)

$DAD_GA = $SAA::DADTransmitsGA;
$DAD_GA =~ tr/a-z/A-Z/ ;


$recvGA0=0;
$recvGA1=0;
$recvVLT1=20; 
$recvVLT2=30;

##########################################################
#----- initialize CE-Router
vLog("*** Target initialization phase ***");
if($V6evalTool::NutDef{System} ne "manual"){ vSleep($SAA::test_interval); }
$rret=vRemote("reboot_async.rmt","","timeout=$SAA::wait_rebootcmd");
vLog("reboot_async.rmt returned status $rret");

#----- start Capturing
vLog("*** Target testing phase ***");
vCapture($IF);


#----- LLA PHASE
#----- Wait DAD NS from CE-Router or timeout
vLog("TN wait DAD NS(DADNS_from_NUT) from CE-Router for $SAA::wait_dadns{$SAA::howto_addrconf} [sec],");

%ret1=vRecv($IF,$SAA::wait_dadns{$SAA::howto_addrconf},0,$dad_recv_count,DADNS_from_NUT);

if ($ret1{status} != 0){
    vLog("TN wait DAD NS from CE-Router for $SAA::wait_dadns{$SAA::howto_addrconf}, but CE-Router had not transmit DAD NS");
    seqNG();
}

#----- RA PHASE
vLog("TN received DAD NS from CE-Router.");
vLog("OK! Let's go ahead!");
%ret2=vRecv($IF,$SAA::wait_rs,0,$rs_recv_count,RS_from_NUT,RS_from_NUT_wSLL);

if ($ret2{status} != 0){
    vLog("Though TN had waited RS from CE-Router for $SAA::wait_rs,");
    vLog(" CE-Router seems not to send RS.");
    vLog(" Anyway TN is sending Unsolicited RA (Prefix=Global)");
}else{
    vLog("TN received RS from CE-Router.");
    vLog("TN is sending RA (Prefix=Global)");
}

#----- Send RA
vSend($IF, RA_GA0_VLT20);
vSend($IF, RA_GA1);
$t0 = time(); 

#----- Wait DAD NS from CE-Router or timeout
for ($loopcount=0; $loopcount<2; $loopcount++){
    vLog("TN wait DAD NS for Global from CE-Router for $SAA::wait_dadns{ra} [sec],");

    %ret3=vRecv($IF,$SAA::wait_dadns{"ra"},0,0,DADNS_from_NUT_GA0Tgt,DADNS_from_NUT_GA1Tgt);
    if ($ret3{status} == 0 and $ret3{recvFrame} eq DADNS_from_NUT_GA0Tgt){
        $recvGA0=1;
    }elsif ($ret3{status} == 0 and $ret3{recvFrame} eq DADNS_from_NUT_GA1Tgt){
        $recvGA1=1;
    }
}	

vLog("DAD complete time= $t0");

if ( $recvGA0 == 1 and $recvGA1 == 1 ){
#----- check if CE-Router's address is configured
    vLog("CE-Router transmitted DAD NS for its Global address.");
    vSleep(10);

    if (seqCheckNUTAddrConfiguredGA($IF,
	SOLNS_from_TN_GA0Tgt, 
	NA_from_NUT_GA0Tgt, 
	NA_from_NUT_GA0Tgt_woTLL, 
	NA_from_GA0NUT_GA0Tgt, 
	NA_from_GA0NUT_GA0Tgt_woTLL, 
	NA_from_GA1NUT_GA0Tgt, 
	NA_from_GA1NUT_GA0Tgt_woTLL) eq TRUE) {
        vLog(" CE-Router assigned Global address 0.");
        $assign_ga0=1;
    }else{
        vLog(" CE-Router did not assign Global address.");
        $assign_ga0=0;
    }
    if (seqCheckNUTAddrConfiguredGA($IF,
	SOLNS_from_TN_GA1Tgt, 
	NA_from_GA0NUT_GA1Tgt, 
	NA_from_GA0NUT_GA1Tgt_woTLL, 
	NA_from_NUT_GA1Tgt, 
	NA_from_NUT_GA1Tgt_woTLL, 
	NA_from_GA1NUT_GA1Tgt, 
	NA_from_GA1NUT_GA1Tgt_woTLL) eq TRUE) {
        vLog(" CE-Router assigned Global address 1.");
        $assign_ga1=1;
    }else{
        vLog(" CE-Router did not assign Global address 1.");
        $assign_ga1=0;
    }

    if ($DAD_GA eq "NO") {
        vLog("CE-Router transmit DAD NS though DADTransmitsGA == NO");
        seqNG();
    }else{
        if ($assign_ga0 == 1 and $assign_ga1 == 1){
            vLog("CE-Router assigned Both addresses!");
	}else{
            seqNG();
        }
    }
}else{
    vLog("CE-Router did not transmit DAD NS for Both Global addresses.");

    if (seqCheckNUTAddrConfiguredGA($IF,
	SOLNS_from_TN_GA0Tgt, 
	NA_from_NUT_GA0Tgt, 
	NA_from_NUT_GA0Tgt_woTLL, 
	NA_from_GA0NUT_GA0Tgt, 
	NA_from_GA0NUT_GA0Tgt_woTLL, 
	NA_from_GA1NUT_GA0Tgt, 
	NA_from_GA1NUT_GA0Tgt_woTLL) eq TRUE) {
        vLog(" CE-Router assigned Global address.");
        $assign_ga0=1;
    }else{
        vLog(" CE-Router did not assign Global address.");
        $assign_ga0=0;
    }
    if (seqCheckNUTAddrConfiguredGA($IF,
	SOLNS_from_TN_GA1Tgt, 
	NA_from_GA0NUT_GA1Tgt, 
	NA_from_GA0NUT_GA1Tgt_woTLL, 
	NA_from_NUT_GA1Tgt, 
	NA_from_NUT_GA1Tgt_woTLL, 
	NA_from_GA1NUT_GA1Tgt, 
	NA_from_GA1NUT_GA1Tgt_woTLL) eq TRUE) {
        vLog(" CE-Router assigned Global address.");
        $assign_ga1=1;
    }else{
        vLog(" CE-Router did not assign Global address.");
        $assign_ga1=0;
    }

    if ($DAD_GA eq "YES") {
        vLog("CE-Router did not transmit DAD NS though DADTransmitsGA == YES");
        seqNG();
    }else{
        if ($assign_ga0 == 1 and $assign_ga1 == 1){
            vLog("CE-Router assigned Both addresses!");
	}else{
            seqNG();
        }
    }
}
#--------------------------
# Sleep until 2 sec after expiration of VLT1 in the RA since receiving it.
#--------------------------

$t1 = time();
#vSleep($t0+$recvVLT1-$t1+2);
vSleep(10);
vLog("It is 2 sec after the expiration of VLT1 in the RA.");
vLog("Confirming whether assinged address is available.");
if (seqCheckNUTAddrConfiguredGA($IF,
	SOLNS_from_TN_GA0Tgt, 
	NA_from_NUT_GA0Tgt, 
	NA_from_NUT_GA0Tgt_woTLL, 
	NA_from_GA0NUT_GA0Tgt, 
	NA_from_GA0NUT_GA0Tgt_woTLL, 
	NA_from_GA1NUT_GA0Tgt, 
	NA_from_GA1NUT_GA0Tgt_woTLL) eq TRUE) {
	vLog("The address is still available.");
	seqNG();
}else{ 
	vLog("The address is not available.");
}

if (seqCheckNUTAddrConfiguredGA($IF,
	SOLNS_from_TN_GA1Tgt, 
	NA_from_GA0NUT_GA1Tgt, 
	NA_from_GA0NUT_GA1Tgt_woTLL, 
	NA_from_NUT_GA1Tgt, 
	NA_from_NUT_GA1Tgt_woTLL, 
	NA_from_GA1NUT_GA1Tgt, 
	NA_from_GA1NUT_GA1Tgt_woTLL) eq TRUE) {
	vLog(" CE-Router assigned Global address 1.");
 	vLog("The address is still available.");
}else{
	vLog("The address is not available.");
	seqNG();
}
#--------------------------
# Sleep until 2 sec after expiration of VLT2 in the RA since receiving it.
#--------------------------

$t2 = time();
vSleep($t0+$recvVLT2-$t2+2);

vLog("It is 2 sec after the expiration of VLT2 in the RA.");
vLog("Confirming whether assinged address is available.");
if (seqCheckNUTAddrConfiguredGA($IF,
	SOLNS_from_TN_GA1Tgt, 
	NA_from_GA0NUT_GA1Tgt, 
	NA_from_GA0NUT_GA1Tgt_woTLL, 
	NA_from_NUT_GA1Tgt, 
	NA_from_NUT_GA1Tgt_woTLL, 
	NA_from_GA1NUT_GA1Tgt, 
	NA_from_GA1NUT_GA1Tgt_woTLL) eq TRUE) {
	vLog(" CE-Router assigned Global address 1.");
 	vLog("The address is still available.");
	seqNG();
}else{
	vLog("The address is not available.");
	seqOK();
}


##########################################################

#end
########################################################################
__END__

=head1 NAME

	Multiple Prefixes and Network Renumbering (Hosts only)

=head1 TARGET

CE-Router

=head1 SYNOPSIS

RA_GA_MultiRenumber.seq [-tooloption ...] -pkt <packetdef> [addrconf=<addrconfname>] 

  -tooloption   : v6eval tool option
  <packetdef>   : packet definition file (v6eval tool option)
  <addrconfname>: how to configure address on CE-Router; boot/reboot

=begin html
<PRE>
 detail of v6eval tool option: see perldoc V6evalTool.pm, perldoc V6evalRemote.pm
</PRE>

=end html


=head1 INITIALIZATION

=begin html
<PRE>
 Reboot CE-Router or Initialize interface of CE-Router or Initialize IPv6 stack of CE-Router.
 Common Test Setup 1.1
</PRE>

=end html

=head1 TEST PROCEDURE

To verify that a host configured with multiple prefixes can communicate with another host on a different network when its site has been renumbered.

=over 1

=item Test for Unicast address configuration

The following tests are prepared in this test package. See INDEX file.

B<Test for host only>

   When CE-Router receives 2 RAs which contain different Global Prefixes and Prefix 
   liftime  from same router, CE-Router assignes autoconfigured addresses. 
   CE-Router must perform DAD for its Global addresses prior to assigning them.

B<Test sequence>

  TN                            CE-Router
  ---------------------------------
  Initialize CE-Router

  Configure address of CE-Router (reboot or interface initialization etc...)

  TN wait the DAD NS sent from CE-Router
  <=== Judgement #1: DAD NS =======
        name: DADNS_from_NUT

  <=== Judgement #2: RS ===========
        name: RS_from_NUT, RS_from_NUT_wSLL

  ==== Action #1: RA =============>
        name: RA_GA0_VLT20

  ==== Action #2: RA =============>
        name: RA_GA1

  <=== Judgement #3: DAD NS =======
        name: DADNS_from_NUT_GA0Tgt

  <=== Judgement #4: DAD NS =======
        name: DADNS_from_NUT_GA1Tgt

  Wait for 5+DupAddrDetectTransmits*(RetransTimer/1000)[sec]

  Check if CE-Router's address is configured
  ==== Action #3: SOL NS =========>
        name: SOLNS_from_TN_GA0Tgt

  <=== Judgement #5: SOL NA =======
        name: 
	      NA_from_NUT_GA0Tgt, 
	      NA_from_NUT_GA0Tgt_woTLL, 
	      NA_from_GA0NUT_GA0Tgt, 
	      NA_from_GA0NUT_GA0Tgt_woTLL, 
	      NA_from_GA1NUT_GA0Tgt, 
	      NA_from_GA1NUT_GA0Tgt_woTLL

  ==== Action #4: SOL NS =========>
        name: SOLNS_from_TN_GA1Tgt

  <=== Judgement #6: SOL NA =======
        name: 
	      NA_from_GA0NUT_GA1Tgt, 
	      NA_from_GA0NUT_GA1Tgt_woTLL, 
	      NA_from_NUT_GA1Tgt, 
	      NA_from_NUT_GA1Tgt_woTLL, 
	      NA_from_GA1NUT_GA1Tgt, 
	      NA_from_GA1NUT_GA1Tgt_woTLL

  Wait until 2[sec] after expiration of VLT1

  Check if CE-Router's address is configured
  ==== Action #5: SOL NS =========>
        name: SOLNS_from_TN_GA0Tgt

  <=== Judgement #7: SOL NA =======
        name: 
	      NA_from_NUT_GA0Tgt, 
	      NA_from_NUT_GA0Tgt_woTLL, 
	      NA_from_GA0NUT_GA0Tgt, 
	      NA_from_GA0NUT_GA0Tgt_woTLL, 
	      NA_from_GA1NUT_GA0Tgt, 
	      NA_from_GA1NUT_GA0Tgt_woTLL

  ==== Action #6: SOL NS =========>
        name: SOLNS_from_TN_GA1Tgt

  <=== Judgement #8: SOL NA =======
        name: 
	      NA_from_GA0NUT_GA1Tgt, 
	      NA_from_GA0NUT_GA1Tgt_woTLL, 
	      NA_from_NUT_GA1Tgt, 
	      NA_from_NUT_GA1Tgt_woTLL, 
	      NA_from_GA1NUT_GA1Tgt, 
	      NA_from_GA1NUT_GA1Tgt_woTLL

  Wait until 2[sec] after expiration of VLT1

  Check if CE-Router's address is configured
  ==== Action #7: SOL NS =========>
        name: SOLNS_from_TN_GA1Tgt

  X<=== Judgement #9: SOL NA ======
        name: 
	      NA_from_GA0NUT_GA1Tgt, 
	      NA_from_GA0NUT_GA1Tgt_woTLL, 
	      NA_from_NUT_GA1Tgt, 
	      NA_from_NUT_GA1Tgt_woTLL, 
	      NA_from_GA1NUT_GA1Tgt, 
	      NA_from_GA1NUT_GA1Tgt_woTLL

=back 1

=head1 JUDGEMENT

=over 1

=item Test for multiple Global Unicast address autoconfiguration with multiple RAs

B<Test for host only>

B<CE-Router performs Stateless Address Autoconfiguration(2 Global) on its interface>

   Judgement #1. CE-Router MUST transmit DAD NS for its autoconfigured Link-local address.
        name: DADNS_from_NUT
	src: ::0
	dst: solnode[CE-Router's tentative Link-local]
        TargetAddress: CE-Router's tentative Link-local

   Judgement #2. CE-Router SHOULD transmit RS.
        name: RS_from_NUT
	src: CE-Router's Link-local
	dst: allrouter

   Action #1. TN transmits RA which contains Global Prefixes.
        name: RA_GA0_VLT20
	src: TN's Link-local
	dst: allnode
	PXOPT: GA0

   Action #2. TN transmits RA which contains Global Prefixes.
        name: RA_GA1
	src: TN's Link-local
	dst: allnode
	PXOPT: GA1

   Judgement #3. CE-Router MUST transmit DAD NS for its autoconfigured Global address.
		 (* If the address is consisits of EUI64, as same as Link-local
		 address, This DAD MAY be omitted.)
        name: DADNS_from_NUT_GA0Tgt
        src: ::0
	dst: solnode[CE-Router's tentative Global0]
        TargetAddress: CE-Router's tentative Global0

   Judgement #4. CE-Router MUST transmit DAD NS for its autoconfigured Global address.
		 (* If the address is consisits of EUI64, as same as Link-local
		 address, This DAD MAY be omitted.)
        name: DADNS_from_NUT_GA1Tgt
        src: ::0
	dst: solnode[CE-Router's tentative Global1]
        TargetAddress: CE-Router's tentative Global1

   Action #3. TN transmits SOL NS to check if CE-Router's address is configured.
        name: SOLNS_from_TN_GA0Tgt
        src: TN's Link-local
	dst: solnode[CE-Router's Global0]
        TargetAddress: CE-Router's Global0

   Judgement #5. CE-Router MUST transmit SOL NA for its autoconfigured Global address.
        name: 
	      NA_from_NUT_GA0Tgt, 
	      NA_from_NUT_GA0Tgt_woTLL, 
	      NA_from_GA0NUT_GA0Tgt, 
	      NA_from_GA0NUT_GA0Tgt_woTLL, 
	      NA_from_GA1NUT_GA0Tgt, 
	      NA_from_GA1NUT_GA0Tgt_woTLL
	src: CE-Router's any Unicast Address
	dst: TN's Link-local
        TargetAddress: CE-Router's Global0
        RFlag: 0
        SFlag: 1
        OFlag: 1
	TLLOPT: CE-Router's MAC address
	(* TLLOPT may be omitted)

   Action #4. TN transmits SOL NS to check if CE-Router's address is configured.
        name: SOLNS_from_TN_GA1Tgt
        src: TN's Link-local
	dst: solnode[CE-Router's Global1]
        TargetAddress: CE-Router's Global1

   Judgement #6. CE-Router MUST transmit SOL NA for its autoconfigured Global address.
        name: 
	      NA_from_GA0NUT_GA1Tgt, 
	      NA_from_GA0NUT_GA1Tgt_woTLL, 
	      NA_from_NUT_GA1Tgt, 
	      NA_from_NUT_GA1Tgt_woTLL, 
	      NA_from_GA1NUT_GA1Tgt, 
	      NA_from_GA1NUT_GA1Tgt_woTLL
	src: CE-Router's any Unicast Address
	dst: TN's Link-local
        TargetAddress: CE-Router's Global1
        RFlag: 0
        SFlag: 1
        OFlag: 1
	TLLOPT: CE-Router's MAC address
	(* TLLOPT may be omitted)


   Action #5. TN transmits SOL NS to check if CE-Router's address is configured.
        name: SOLNS_from_TN_GA0Tgt
        src: TN's Link-local
	dst: solnode[CE-Router's Global0]
        TargetAddress: CE-Router's Global0

   Judgement #7. CE-Router MUST NOT transmit SOL NA for its autoconfigured Global address.
        name: 
	      NA_from_NUT_GA0Tgt, 
	      NA_from_NUT_GA0Tgt_woTLL, 
	      NA_from_GA0NUT_GA0Tgt, 
	      NA_from_GA0NUT_GA0Tgt_woTLL, 
	      NA_from_GA1NUT_GA0Tgt, 
	      NA_from_GA1NUT_GA0Tgt_woTLL
	src: CE-Router's any Unicast Address
	dst: TN's Link-local
        TargetAddress: CE-Router's Global0
        RFlag: 0
        SFlag: 1
        OFlag: 1
	TLLOPT: CE-Router's MAC address
	(* TLLOPT may be omitted)

   Action #6. TN transmits SOL NS to check if CE-Router's address is configured.
        name: SOLNS_from_TN_GA1Tgt
        src: TN's Link-local
	dst: solnode[CE-Router's Global1]
        TargetAddress: CE-Router's Global1

   Judgement #8. CE-Router MUST transmit SOL NA for its autoconfigured Global address.
        name: 
	      NA_from_GA0NUT_GA1Tgt, 
	      NA_from_GA0NUT_GA1Tgt_woTLL, 
	      NA_from_NUT_GA1Tgt, 
	      NA_from_NUT_GA1Tgt_woTLL, 
	      NA_from_GA1NUT_GA1Tgt, 
	      NA_from_GA1NUT_GA1Tgt_woTLL
	src: CE-Router's any Unicast Address
	dst: TN's Link-local
        TargetAddress: CE-Router's Global1
        RFlag: 0
        SFlag: 1
        OFlag: 1
	TLLOPT: CE-Router's MAC address
	(* TLLOPT may be omitted)

   Action #7. TN transmits SOL NS to check if CE-Router's address is configured.
        name: SOLNS_from_TN_GA1Tgt
        src: TN's Link-local
	dst: solnode[CE-Router's Global1]
        TargetAddress: CE-Router's Global1

   Judgement #9. CE-Router MUST NOT transmit SOL NA for its autoconfigured Global address.
        name: 
	      NA_from_GA0NUT_GA1Tgt, 
	      NA_from_GA0NUT_GA1Tgt_woTLL, 
	      NA_from_NUT_GA1Tgt, 
	      NA_from_NUT_GA1Tgt_woTLL, 
	      NA_from_GA1NUT_GA1Tgt, 
	      NA_from_GA1NUT_GA1Tgt_woTLL
	src: CE-Router's any Unicast Address
	dst: TN's Link-local
        TargetAddress: CE-Router's Global1
        RFlag: 0
        SFlag: 1
        OFlag: 1
	TLLOPT: CE-Router's MAC address
	(* TLLOPT may be omitted)


=back 1

=head1 CLEANUP

NONE

=cut

# =head1 REFERENCE
# 
# =begin html
# <PRE>
# RFC2462
# <HR>
#    (omit)
# <BR>
# 4.1.  Site Renumbering
# <BR>
#    Address leasing facilitates site renumbering by providing a mechanism
#    to time-out addresses assigned to interfaces in hosts.  At present,
#    upper layer protocols such as TCP provide no support for changing
#    end-point addresses while a connection is open. If an end-point
#    address becomes invalid, existing connections break and all
#    communication to the invalid address fails.  Even when applications
#    use UDP as a transport protocol, addresses must generally remain the
#    same during a packet exchange.
# <BR>
#    Dividing valid addresses into preferred and deprecated categories
#    provides a way of indicating to upper layers that a valid address may
#    become invalid shortly and that future communication using the
#    address will fail, should the address's valid lifetime expire before
#    communication ends.  To avoid this scenario, higher layers should use
#    a preferred address (assuming one of sufficient scope exists) to
#    increase the likelihood that an address will remain valid for the
#    duration of the communication.  It is up to system administrators to
#    set appropriate prefix lifetimes in order to minimize the impact of
#    failed communication when renumbering takes place.  The deprecation
#    period should be long enough that most, if not all, communications
#    are using the new address at the time an address becomes invalid.
# <BR>
#    The IP layer is expected to provide a means for upper layers
#    (including applications) to select the most appropriate source
#    address given a particular destination and possibly other
#    constraints.  An application may choose to select the source address
#    itself before starting a new communication or may leave the address
#    unspecified, in which case the upper networking layers will use the
#    mechanism provided by the IP layer to choose a suitable address on
#    the application's behalf.
# <BR>
#    Detailed address selection rules are beyond the scope of this
#    document.
# <BR>
#    (omit)
# <BR>
# </PRE>
# 
# =end html
# 

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
[RFC 7084],WAA-1
[RFC 4862],Section 4.1
[RFC 4291],Section 2.1
[RFC 4861] Section 6.3.4, 6.3.5, 12
</PRE>
</BLOCKQUOTE>

=end html

=head1 SEE ALSO

=begin html
<PRE>
 detail of v6eval tool option: see perldoc V6evalTool.pm, perldoc V6evalRemote.pm
</PRE>

=end html

=cut

