#!/usr/bin/perl
#
# Copyright (C) 2013
# Chunghwa Telecommunication Labratories (CHT-TL)
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# $CHT-TL: LLA_DAD_NSPostDAD_DiffTgt.seq,v 1.0 2013/08/19 weifen Exp $
# 

########################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_2 $ '; }
use V6evalTool;
use SAA;

#------------------------------------------------------
#----- get sequence arguments
#------------------------------------------------------
$howto_initNUT="none";
$send = "ok";
foreach (@ARGV) {
# How to configure address of CE-Router?
# sample: boot, ra, manual+_GLOBAL0A0N_UCAST
    /^addrconf=(\S+)/ && do {$SAA::howto_addrconf=$1; next; };

# How to initialize CE-Router?
# sample: none, DADSuccess_boot, DADFail_boot
    /^init=(\S+)/     && do {$howto_initNUT=$1; next; };

# "none" if send no pakcet to CE-Router in state DADPostSendNS
# sample: ok, none
    /^send=(\S+)/     && do {$send=$1; next; };

# sequence debug options
# sample: qR
    /^sd=(\S+)/       && do {$seqdebugopt=$1; next; };
    seqERROR("Unknown sequence option '$_'");
}
#------------------------------------------------------

#----- test condition
$IF=Link0;                 # network interface

#$max_retry_count = 10;     # retry if CE-Router state becomes DADPostSendNS
$max_retry_count = 2 if $SAA::sd =~ /q/;    # quick retry
$send_interval  = 1;
	       # 1[sec] time between DAD NS and DAD NS, send to CE-Router
               #     (RandomDelay is 0-1sec  e.g. default RetransTimer 1000msec)

vCPP('-DRFLAG=1');
##########################################################
#----- Preparetion
vCapture($IF);
seqPrepareLLA($IF, $V6evalTool::NutDef{System});

#----- initialize CE-Router
vLog("*** Target initialization phase ***");
if($V6evalTool::NutDef{System} ne "manual"){ vSleep($SAA::test_interval); }
$rret=vRemote("reboot_async.rmt","","timeout=$SAA::wait_rebootcmd");
vLog("reboot_async.rmt returned status $rret");

#----- start Capturing
vLog("*** Target testing phase ***");
vClear($IF);

#----- Wait DAD NS from CE-Router or timeout
vLog("TN wait DAD NS(dadns_from_NUT) from CE-Router for $SAA::wait_dadns{$SAA::howto_addrconf} [sec],");

%ret=vRecv($IF,$SAA::wait_dadns{$SAA::howto_addrconf},0,$count,DADNS_from_NUT);

if ($ret{status} == 0){
    %retSend=vSend($IF, DADNS_from_TN_SameDstDiffTgt);

    #----- check if CE-Router's address is configured
    vSleep($SAA::wait_addrconf);
    if (seqCheckNUTAddrConfigured($IF) eq TRUE) {
	vLog("CE-Router assigned the address to the interface.");
	if ($SAA::DupAddrDetectTransmits == 0) {
	    vLog("CE-Router transmit DAD NS though DupAddrDetectTransmits == 0");
	    seqNG();
	}
    }else{
	vLog("Though Target address is not same,");
	vLog(" CE-Router seems to detect Address Duplication");
	seqNG();
    }

    if (seqCheckNUTAddrConfiguredUcast($IF) eq TRUE) {
	vLog("CE-Router assigned the address to the interface.");
	if ($SAA::DupAddrDetectTransmits == 0) {
	    vLog("CE-Router transmit DAD NS though DupAddrDetectTransmits == 0");
	    seqNG();
	}else{
	    seqOK();
	}
    }else{
	vLog("Though Target address is not same,");
	vLog(" CE-Router seems to detect Address Duplication");
	seqNG();
    }
} else{
    vLog("TN wait DAD NS from CE-Router for $SAA::wait_dadns{$SAA::howto_addrconf}, but CE-Router had not transmit DAD NS");
    seqNG();
}
##########################################################


#end
########################################################################
__END__

=head1 NAME

	Receiving DAD Neighbor Solicitations and Advertisements
	Part A: CE-Router receives DAD NS (target != CE-Router)

=head1 TARGET

CE-Router

=head1 SYNOPSIS

LLA_DAD_NSPostDAD_SameDstDiffTgt.seq [-tooloption ...] -pkt <packetdef> [addrconf=<addrconfname>] 

  -tooloption   : v6eval tool option
  <packetdef>   : packet definition file (v6eval tool option)
  <addrconfname>: how to configure address on CE-Router; boot/reboot

=begin html
<PRE>
 detail of v6eval tool option: see perldoc V6evalTool.pm, perldoc V6evalRemote.pm
</PRE>

=end html


=head1 INITIALIZATION

=begin html
<PRE>
 Reboot CE-Router or Initialize interface of CE-Router or Initialize IPv6 stack of CE-Router.
</PRE>

=end html

=head1 TEST PROCEDURE

Verify that a node can properly process neigbor solicitations and advertisements performing Duplicate Address Detection while the node is also performing DAD.

=over 1

=item Test for Unicast address configuration

The following tests are prepared in this test package. See INDEX file.

B<Test for all node>

   CE-Router assignes autoconfigured address, even though CE-Router receives DAD NS for
   other target address from other node, while DAD process (after transmitting DAD NS).

B<Test sequence>

  TN                            CE-Router
  ---------------------------------
  Initialize CE-Router

  Configure address of CE-Router (reboot or interface initialization etc...)

  TN wait the DAD NS sent from CE-Router
  <=== Judgement #1: DAD NS =======
        name: DADNS_from_NUT

  ==== Action #1: DAD NS =========>
        name: DADNS_from_TN_SameDstDiffTgt

  Wait for 5+DupAddrDetectTransmits*(RetransTimer/1000)[sec]

  Check if CE-Router's address is configured
  ==== Action #2: SOL NS =========>
        name: SOLNS_from_TN_SameTgt

  <=== Judgement #2: DAD NA =======
        name: NA_from_NUT, NA_from_NUT_woTLL


=back 1

=head1 JUDGEMENT

=over 1

=item Test for Link-local Unicast address autoconfiguration

B<Test for all NODE>

B<CE-Router performs Stateless Address Autoconfiguration(Link-local) on its interface>

   Judgement #1. CE-Router MUST transmit DAD NS for its autoconfigured Link-local address.
        name: DADNS_from_NUT
	src: ::0
	dst: solnode[CE-Router's tentative Link-local]
        TargetAddress: CE-Router's tentative Link-local

   Action #1. TN transmits DAD NS which contains different target Address
        name: DADNS_from_TN_DiffTgt
	src: ::0
	dst: solnode[CE-Router's tentative Link-local]
        TargetAddress: TN's Link-local

   Action #2. TN transmits SOL NS to check if CE-Router's address is configured
        name: SOLNS_from_TN_SameTgt
        src: TN's Link-local
	dst: solnode[CE-Router's Link-local]
        TargetAddress: CE-Router's Link-local

   Judgement #2. CE-Router MUST transmit SOL NA for its autoconfigured  Link-local address.
        name: NA_from_NUT, NA_from_NUT_woTLL
	src: CE-Router's Link-local
	dst: TN's Link-local
        TargetAddress: CE-Router's Link-local
        RFlag: 0 ( if CE-Router is a Router then 1)
        SFlag: 1
        OFlag: 1
	TLLOPT: CE-Router's MAC address

=back 1

=head1 CLEANUP

NONE

=cut

# =head1 REFERENCE
# 
# =begin html
# <PRE>
# RFC2462
# <HR>
#    (omit)
# <BR>
# 5.4.  Duplicate Address Detection
# <BR>
#    (omit)
#    An address on which the duplicate Address Detection Procedure is
#    applied is said to be tentative until the procedure has completed
#    successfully.  A tentative address is not considered "assigned to an
# <A NAME="REF">
#    interface" in the traditional sense. <B>That is, the interface must
#    accept Neighbor Solicitation and Advertisement messages containing
#    the tentative address in the Target Address field, but processes such
#    packets differently from those whose Target Address matches an
#    address assigned to the interface. Other packets addressed to the
#    tentative address should be silently discarded</B>.</A>
#    (omit)
# <BR>
# </PRE>
# 
# =end html
# 

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
[RFC 7084],WAA-1
[RFC 4862],Sections 1, 5.4, 5.4.1, 5.4.3, 5.4.4 and 5.4.5
</PRE>
</BLOCKQUOTE>

=end html

=head1 SEE ALSO

=begin html
<PRE>
 detail of v6eval tool option: see perldoc V6evalTool.pm, perldoc V6evalRemote.pm
</PRE>

=end html

=cut

