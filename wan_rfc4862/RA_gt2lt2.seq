#!/usr/bin/perl
#
# Copyright (C) 2013, 2014, 2015
# Chunghwa Telecommunication Labratories (CHT-TL)
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# $CHT-TL: RA_gt2lt2.seq,v 1.2 2015/04/28 weifen Exp $
# 

########################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_2 $ '; }
use V6evalTool;
use SAA;

use lib '../.';
use CPE6_config;

if (!$GLOBAL_ADDR_SLAAC) {
	vLogHTML('<B>SKIP</B><BR>');
	exit $V6evalTool::exitNS;
}

#------------------------------------------------------
#----- get sequence arguments
#------------------------------------------------------
$howto_initNUT="none";
$send = "ok";
foreach (@ARGV) {
# How to configure address of CE-Router?
# sample: boot, ra, manual+_GLOBAL0A0N_UCAST
    /^addrconf=(\S+)/ && do {$SAA::howto_addrconf=$1; next; };

# How to initialize CE-Router?
# sample: none, DADSuccess_boot, DADFail_boot
    /^init=(\S+)/     && do {$howto_initNUT=$1; next; };

# "none" if send no pakcet to CE-Router in state DADPostSendNS
# sample: ok, none
    /^send=(\S+)/     && do {$send=$1; next; };

# sequence debug options
# sample: qR
    /^sd=(\S+)/       && do {$seqdebugopt=$1; next; };
    seqERROR("Unknown sequence option '$_'");
}
#------------------------------------------------------

#----- test condition
$IF=Link0;                 # network interface

$max_retry_count = 10;     # retry if CE-Router state becomes DADPostSendNS
$max_retry_count = 2 if $SAA::sd =~ /q/;    # quick retry
$send_interval  = 1;
	       # 1[sec] time between DAD NS and DAD NS, send to CE-Router
               #     (RandomDelay is 0-1sec  e.g. default RetransTimer 1000msec)

$DAD_GA = $SAA::DADTransmitsGA;
$DAD_GA =~ tr/a-z/A-Z/ ;

$longVLT = 10800; #10800
$shortVLT = 10; #30
$defaultT = 7200; #
##########################################################
#----- initialize CE-Router
vLog("*** Target initialization phase ***");
if($V6evalTool::NutDef{System} ne "manual"){ vSleep($SAA::test_interval); }
$rret=vRemote("reboot_async.rmt","","timeout=$SAA::wait_rebootcmd");
vLog("reboot_async.rmt returned status $rret");

#----- start Capturing
vLog("*** Target testing phase ***");
vCapture($IF);

#----- LLA PHASE
#----- Wait DAD NS from CE-Router or timeout
vLog("TN wait DAD NS(DADNS_from_NUT) from CE-Router for $SAA::wait_dadns{$SAA::howto_addrconf} [sec],");

%ret1=vRecv($IF,$SAA::wait_dadns{$SAA::howto_addrconf},0,0,DADNS_from_NUT);

if ($ret1{status} != 0){
    vLog("TN wait DAD NS from CE-Router for $SAA::wait_dadns{$SAA::howto_addrconf}, but CE-Router had not transmit DAD NS");
    seqNG();
}

#----- RA PHASE
vLog("TN received DAD NS from CE-Router.");
vLog("OK! Let's go ahead!");
%ret2=vRecv($IF,$SAA::wait_rs,0,0,RS_from_NUT,RS_from_NUT_wSLL);

if ($ret2{status} != 0){
    vLog("Though TN had waited RS from CE-Router for $SAA::wait_rs,");
    vLog(" CE-Router seems not to send RS.");
    vLog(" Anyway TN is sending Unsolicited RA (Prefix=Global)");
}else{
    vLog("TN received RS from CE-Router.");
    vLog("TN is sending RA (Prefix=Global)");
}

#--------------------------
# First RA
#--------------------------

vSend($IF, RA_GA0_VP7230);
#--- VLT=7230/PLT=7230

#--------------------------
# Send RA with shorter VLT(2nd)
#--------------------------

#vSend($IF, RA_GA0_VP30);
vSend($IF, RA_GA0_VP10);
vSleep(11);

vLog("11 sec after the expiration of VLT in the 2nd RA since receiving it.");
vLog("Confirming whether assinged address is available.");
if (seqCheckNUTAddrConfiguredGA($IF,
	SOLNS_from_TN_GA0Tgt, 
	NA_from_NUT_GA0Tgt, 
	NA_from_NUT_GA0Tgt_woTLL, 
	NA_from_GA0NUT_GA0Tgt, 
	NA_from_GA0NUT_GA0Tgt_woTLL) eq TRUE) {
    vLog("The address is still available.");
}else{
    vLog("The address is not available.");
    seqNG();
}


#--------------------------
# Sleep until 15 sec after expiration global address since receiving 1st RA
#--------------------------

vSleep(7215);

vLog("7215 secs after receiving 2nd RA.");
vLog("Confirming whether assinged address is available.");
if (seqCheckNUTAddrConfiguredGA($IF,
	SOLNS_from_TN_GA0Tgt, 
	NA_from_NUT_GA0Tgt, 
	NA_from_NUT_GA0Tgt_woTLL, 
	NA_from_GA0NUT_GA0Tgt, 
	NA_from_GA0NUT_GA0Tgt_woTLL) eq TRUE) {
    vLog("The address is still available.");
	seqNG();
}else{
    vLog("The address is not available.");
	seqOK();
}


#########################
#########################
#########################
#########################
#########################
#########################


##########################################################


#end
########################################################################
__END__

=head1 NAME

	Prefix-Information Option Processing, Lifetime
	Part D: Prefix Lifetime less than 2 hours and the Remaining Lifetime is greater than 2 hours

=head1 TARGET

CE-Router

=head1 SYNOPSIS

RA_gt2lt2.seq [-tooloption ...] -pkt <packetdef> [addrconf=<addrconfname>] 

  -tooloption   : v6eval tool option
  <packetdef>   : packet definition file (v6eval tool option)
  <addrconfname>: how to configure address on CE-Router; boot/reboot

=begin html
<PRE>
 detail of v6eval tool option: see perldoc V6evalTool.pm, perldoc V6evalRemote.pm
</PRE>

=end html


=head1 INITIALIZATION

=begin html
<PRE>
 Reboot CE-Router or Initialize interface of CE-Router or Initialize IPv6 stack of CE-Router.
 Common Test Setup 1.1
</PRE>

=end html

=head1 TEST PROCEDURE

Verify that a host properly updates its Address List upon recept of Prefix Information Options.

=over 1

=item Test for Unicast address autoconfiguration

The following tests are prepared in this test package. See INDEX file.

B<Test for host only>

   When CE-Router receives RA which contains Global Prefix and 3hours as VLT value,
   CE-Router assignes autoconfigured address. Later CE-Router receives different RA which 
   contains same prefix and 10second as VLT value before first VLT 
   exires.
   At this point, CE-Router resets its VLT, and the assinged address MUST expire 
   3600sec VLT later.

B<Test sequence>

  TN                            CE-Router
  ---------------------------------
  Initialize CE-Router

  Configure address of CE-Router (reboot or interface initialization etc...)

  TN wait the DAD NS sent from CE-Router
  <=== Judgement #1: DAD NS =======
        name: DADNS_from_NUT

  <=== Judgement #2: RS ===========
        name: RS_from_NUT, RS_from_NUT_wSLL

  ==== Action #1: RA =============>
        name: RA_GA0_VP10800
        (1st RA VLT=longVLT)

  ==== Action #2: RA =============>
        name: RA_GA0_VP10
        (2nd RA  VLT=shortVLT)

  Wait 11[sec] pasts since receiving 2nd RA

  Check if CE-Router's address is configured
  ==== Action #3: SOL NS =========>
        name: SOLNS_from_TN_GA0Tgt

  <=== Judgement #3: SOL NA =======
        name: 
	      NA_from_NUT_GA0Tgt, 
	      NA_from_NUT_GA0Tgt_woTLL, 
	      NA_from_GA0NUT_GA0Tgt, 
	      NA_from_GA0NUT_GA0Tgt_woTLL


  Wait 7215 pasts since receiving 2nd RA

  Check if CE-Router's address is configured
  ==== Action #4: SOL NS =========>
        name: SOLNS_from_TN_GA0Tgt

  X<=== Judgement #4: DAD NA =======
        name: 
	      NA_from_NUT_GA0Tgt, 
	      NA_from_NUT_GA0Tgt_woTLL, 
	      NA_from_GA0NUT_GA0Tgt, 
	      NA_from_GA0NUT_GA0Tgt_woTLL

=back 1

=head1 JUDGEMENT

=over 1

=item Test for Unicast address autoconfiguration

B<Test for host only>

B<CE-Router performs Stateless Address Autoconfiguration(Global) on its interface>

   Judgement #1. CE-Router MUST transmit DAD NS for its autoconfigured Link-local address.
        name: DADNS_from_NUT
	src: ::0
	dst: solnode[CE-Router's tentative Link-local]
        TargetAddress: CE-Router's tentative Link-local

   Judgement #2. CE-Router SHOULD transmit RS.
        name: RS_from_NUT
        src: CE-Router's Link-local
        dst: allrouter

   Action #1. TN transmits RA which contains Global Prefix.
        name: RA_GA0_VP10800
	src: TN's Link-local
	dst: allnode
	PXOPT: Global0
		VLT=10800
		PLT=10800

   Action #2. TN transmits RA which contains Global Prefix.
        name: RA_GA0_VP10
	src: TN's Link-local
	dst: allnode
	PXOPT: Global0
		VLT=10
		PLT=10


   Action #3. TN transmits SOL NS to check if CE-Router's address is configured.
        name: SOLNS_from_TN_GA0Tgt
        src: TN's Link-local
	dst: solnode[CE-Router's Global0]
        TargetAddress: CE-Router's Global0

   Judgement #3. CE-Router MUST  transmit SOL NA for its autoconfigured  Global address.
        name: 
	      NA_from_NUT_GA0Tgt, 
	      NA_from_NUT_GA0Tgt_woTLL, 
	      NA_from_GA0NUT_GA0Tgt, 
	      NA_from_GA0NUT_GA0Tgt_woTLL
	src: CE-Router's any Unicast Address
	dst: TN's Link-local
        TargetAddress: CE-Router's Global0
        RFlag: 0
        SFlag: 1
        OFlag: 1
	TLLOPT: CE-Router's MAC address
	(* TLLOPT may be omitted)

   Action #4. TN transmits SOL NS to check if CE-Router's address is configured.
        name: SOLNS_from_TN_GA0Tgt
        src: TN's Link-local
	dst: solnode[CE-Router's Global0]
        TargetAddress: CE-Router's Global0

   Judgement #4. CE-Router MUST NOT transmit SOL NA for its autoconfigured  Global address.
        name: 
	      NA_from_NUT_GA0Tgt, 
	      NA_from_NUT_GA0Tgt_woTLL, 
	      NA_from_GA0NUT_GA0Tgt, 
	      NA_from_GA0NUT_GA0Tgt_woTLL
	src: CE-Router's any Unicast Address
	dst: TN's Link-local
        TargetAddress: CE-Router's Global0
        RFlag: 0
        SFlag: 1
        OFlag: 1
	TLLOPT: CE-Router's MAC address
	(* TLLOPT may be omitted)

=back 1

=head1 CLEANUP

NONE

=cut

# =head1 REFERENCE
# 
# =begin html
# <PRE>
# RFC2462
# <HR>
#    (omit)
# <BR>
# 5.5.3.  Router Advertisement Processing
# <BR>
#    (omit)
# <BR>
#     e) If the advertised prefix matches the prefix of an autoconfigured
#        address (i.e., one obtained via stateless or stateful address
#        autoconfiguration) in the list of addresses associated with the
#        interface, the specific action to perform depends on the Valid
#        Lifetime in the received advertisement and the Lifetime
#        associated with the previously autoconfigured address (which we
#        call StoredLifetime in the discussion that follows):
# <BR>
#        1) <B>If the received Lifetime is</B> greater than 2 hours or <B>greater
#           than StoredLifetime, update the stored Lifetime of the
#           corresponding address.</B>
# <BR>
#        2) <B>If the StoredLifetime is less than or equal to 2 hours and the
#           received Lifetime is less than or equal to StoredLifetime,
#           ignore the prefix</B>, unless the Router Advertisement from which
#           this Prefix Information option was obtained has been
#           authenticated (e.g., via IPSec [RFC2402]). If the Router
#           Advertisment was authenticated, the StoredLifetime should be
#           set to the Lifetime in the received option.
# <BR>
#        3) Otherwise, reset the stored Lifetime in the corresponding
#           address to two hours.
# <BR>
#        The above rules address a specific denial of service attack in
#        which a bogus advertisement could contain prefixes with very
#        small Valid Lifetimes. Without the above rules, a single
#        unauthenticated advertisement containing bogus Prefix Information
#        options with short Lifetimes could cause all of a node's
#        addresses to expire prematurely. The above rules insure that
#        legitimate advertisements (which are sent periodically) will
#        "cancel" the short lifetimes before they actually take effect.
# <BR>
# 5.5.4.  Address Lifetime Expiry
# <BR>
#    A preferred address becomes deprecated when its preferred lifetime
#    expires.  <B>A deprecated address SHOULD continue to be used as a source
#    address in existing communications, but SHOULD NOT be used in new
#    communications if an alternate (non-deprecated) address is available
#    and has sufficient scope.  IP and higher layers (e.g., TCP, UDP) MUST
#    continue to accept datagrams destined to a deprecated address since a
#    deprecated address is still a valid address for the interface.</B> An
#    implementation MAY prevent any new communication from using a
#    deprecated address, but system management MUST have the ability to
#    disable such a facility, and the facility MUST be disabled by
#    default.
# <BR>
#    <B>An address (and its association with an interface) becomes invalid
#    when its valid lifetime expires.  An invalid address MUST NOT be used
#    as a source address in outgoing communications and MUST NOT be
#    recognized as a destination on a receiving interface.</B>
# <BR>
#    (omit)
# </PRE>
# 
# =end html
# 

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
[RFC 7084],WAA-1
[RFC 4862],Section 5.5.3
</PRE>
</BLOCKQUOTE>

=end html

=head1 SEE ALSO

=begin html
<PRE>
 detail of v6eval tool option: see perldoc V6evalTool.pm, perldoc V6evalRemote.pm
</PRE>

=end html

=cut

