#!/usr/bin/perl
#
# Copyright (C) 2013, 2014, 2015
# Chunghwa Telecommunication Labratories (CHT-TL)
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# $CHT-TL: RA_wPXLLA.seq,v 1.2 2015/04/28 weifen Exp $
# 

########################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_2 $ '; }
use V6evalTool;
use SAA;

use lib '../.';
use CPE6_config;

if (!$GLOBAL_ADDR_SLAAC) {
	vLogHTML('<B>SKIP</B><BR>');
	exit $V6evalTool::exitNS;
}

#------------------------------------------------------
#----- get sequence arguments
#------------------------------------------------------
$howto_initNUT="none";
$send = "ok";
foreach (@ARGV) {
# How to configure address of CE-Router?
# sample: boot, ra, manual+_GLOBAL0A0N_UCAST
    /^addrconf=(\S+)/ && do {$SAA::howto_addrconf=$1; next; };

# How to initialize CE-Router?
# sample: none, DADSuccess_boot, DADFail_boot
    /^init=(\S+)/     && do {$howto_initNUT=$1; next; };

# "none" if send no pakcet to CE-Router in state DADPostSendNS
# sample: ok, none
    /^send=(\S+)/     && do {$send=$1; next; };

# sequence debug options
# sample: qR
    /^sd=(\S+)/       && do {$seqdebugopt=$1; next; };
    seqERROR("Unknown sequence option '$_'");
}
#------------------------------------------------------

#----- test condition
$IF=Link0;                 # network interface

$max_retry_count = 10;     # retry if CE-Router state becomes DADPostSendNS
$max_retry_count = 2 if $SAA::sd =~ /q/;    # quick retry
$send_interval  = 1;
	       # 1[sec] time between DAD NS and DAD NS, send to CE-Router
               #     (RandomDelay is 0-1sec  e.g. default RetransTimer 1000msec)


##########################################################
#----- initialize CE-Router
vLog("*** Target initialization phase ***");
if($V6evalTool::NutDef{System} ne "manual"){ vSleep($SAA::test_interval); }
$rret=vRemote("reboot_async.rmt","","timeout=$SAA::wait_rebootcmd");
vLog("reboot_async.rmt returned status $rret");

#----- start Capturing
vLog("*** Target testing phase ***");
vCapture($IF);

#----- LLA PHASE
#----- Wait DAD NS from CE-Router or timeout
vLog("TN wait DAD NS(DADNS_from_NUT) from CE-Router for $SAA::wait_dadns{$SAA::howto_addrconf} [sec],");

%ret1=vRecv($IF,$SAA::wait_dadns{$SAA::howto_addrconf},0,0,DADNS_from_NUT);

if ($ret1{status} != 0){
    vLog("TN wait DAD NS from CE-Router for $SAA::wait_dadns{$SAA::howto_addrconf}, but CE-Router had not transmit DAD NS");
    seqNG();
}

#----- RA PHASE
vLog("TN received DAD NS from CE-Router.");
vLog("OK! Let's go ahead!");
%ret2=vRecv($IF,$SAA::wait_rs,0,0,RS_from_NUT,RS_from_NUT_wSLL);

if ($ret2{status} != 0){
    vLog("Though TN had waited RS from CE-Router for $SAA::wait_rs,");
    vLog(" CE-Router seems not to send RS.");
    vLog(" Anyway TN is sending Unsolicited RA (Prefix=Link-Local)");
}else{
    vLog("TN received RS from CE-Router.");
    vLog("TN is sending RA (Prefix=Link-Local)");
}

vSend($IF, RA_LLA);

#----- Wait DAD NS from CE-Router or timeout
vLog("TN wait DAD NS for Link-local address from CE-Router for $SAA::wait_dadns{ra} [sec],");

%ret3=vRecv($IF,$SAA::wait_dadns{"ra"},0,0,DADNS_from_NUT);

if ($ret3{status} == 0){
    vLog("CE-Router had transmitted DAD NS for its Link-local address");
    vLog("by receiving RA with PrefixOption (Prefix==LLA).");
#----- check if CE-Router's address is configured
    vSleep($SAA::wait_addrconf_with_RA);

    if (seqCheckNUTAddrConfiguredGA($IF,
	SOLNS_from_TN_GA0Tgt, 
	NA_from_NUT_GA0Tgt, 
	NA_from_NUT_GA0Tgt_woTLL, 
	NA_from_GA0NUT_GA0Tgt, 
	NA_from_GA0NUT_GA0Tgt_woTLL) eq TRUE) {
       	vLog("CE-Router assigned Global address to the interface.");
        if ($DAD_GA eq "NO") {
            vLog("CE-Router transmit DAD NS though DADTransmitsGA == NO");
    	}
        seqNG();
    }else{
        vLog(" CE-Router had not assign Global address.");
       	seqNG();
    }

} elsif ($ret3{status} != 0){
    vLog("CE-Router had not transmitted DAD NS for Link-local address");
    vLog("by receiving RA with PrefixOption (Prefix==LLA).");
#----- check if CE-Router's address is configured
    if (seqCheckNUTAddrConfiguredGA($IF,
	SOLNS_from_TN_GA0Tgt, 
	NA_from_NUT_GA0Tgt, 
	NA_from_NUT_GA0Tgt_woTLL, 
	NA_from_GA0NUT_GA0Tgt, 
	NA_from_GA0NUT_GA0Tgt_woTLL) eq TRUE) {
       	vLog("CE-Router assigned Global address to the interface.");
        if ($DAD_GA eq "YES") {
            vLog("CE-Router did not transmit DAD NS though DADTransmitsGA == YES");
    	}
        seqNG();
    }else{
        vLog("CE-Router did not assign Global address.");
       	seqOK();
    }
}

##########################################################


#end
########################################################################
__END__

=head1 NAME

	Prefix-Information Option Processing
	Part C: Prefix is set to link-local Prefix

=head1 TARGET

CE-Router

=head1 SYNOPSIS

RA_wPXLLA.seq [-tooloption ...] -pkt <packetdef> [addrconf=<addrconfname>] 

  -tooloption   : v6eval tool option
  <packetdef>   : packet definition file (v6eval tool option)
  <addrconfname>: how to configure address on CE-Router; boot/reboot

=begin html
<PRE>
 detail of v6eval tool option: see perldoc V6evalTool.pm, perldoc V6evalRemote.pm
</PRE>

=end html


=head1 INITIALIZATION

=begin html
<PRE>
 Reboot CE-Router or Initialize interface of CE-Router or Initialize IPv6 stack of CE-Router.
</PRE>

=end html

=head1 TEST PROCEDURE

Verify that a host properly processes the Prefix Information Option in the Router Advertisement.

=over 1

=item Test for Unicast address autoconfiguration

The following tests are prepared in this test package. See INDEX file.

B<Test for host only>

   When CE-Router receives invalid RA which contains Link-local Prefix,
   CE-Router MUST NOT assign autoconfigured address. 

B<Test sequence>

  TN                            CE-Router
  ---------------------------------
  Initialize CE-Router

  Configure address of CE-Router (reboot or interface initialization etc...)

  TN wait the DAD NS sent from CE-Router
  <=== Judgement #1: DAD NS =======
        name: DADNS_from_NUT

  <=== Judgement #2: RS ===========
        name: RS_from_NUT, RS_from_NUT_wSLL

  ==== Action #1: RA =============>
        name: RA_LLA

  X<== Judgement #3: DAD NS =======
        name: DADNS_from_NUT

  Wait for 5+DupAddrDetectTransmits*(RetransTimer/1000)[sec]

  Check if CE-Router's address is configured
  ==== Action #2: SOL NS =========>
        name: SOLNS_from_TN_GA0Tgt

  X<== Judgement #4: SOL NA =======
        name: 
	      NA_from_NUT_GA0Tgt, 
	      NA_from_NUT_GA0Tgt_woTLL, 
	      NA_from_GA0NUT_GA0Tgt, 
	      NA_from_GA0NUT_GA0Tgt_woTLL



=back 1

=head1 JUDGEMENT

=over 1

=item Test for Unicast address autoconfiguration

B<Test for host only>

B<CE-Router performs Stateless Address Autoconfiguration on its interface>

   Judgement #1. CE-Router MUST transmit DAD NS for its autoconfigured Link-local address.
        name: DADNS_from_NUT
	src: ::0
	dst: solnode[CE-Router's tentative Link-local]
        TargetAddress: CE-Router's tentative Link-local

   Judgement #2. CE-Router SHOULD transmit RS.
        name: RS_from_NUT
	src: CE-Router's Link-local
	dst: allrouter

   Action #1. TN transmits RA which contains Link-local Prefix.
        name: RA_LLA
	src: TN's Link-local
	dst: allnode
	PXOPT: Link-local

   Judgement #3. CE-Router MUST NOT transmit DAD NS for its autoconfigured Link-local address in this timing.
        name: DADNS_from_NUT
        src: ::0
	dst: solnode[CE-Router's tentative Link-local]
        TargetAddress: CE-Router's tentative Link-local

   Action #2. TN transmits SOL NS to check if CE-Router's address is configured.
        name: SOLNS_from_TN_GA0Tgt
        src: TN's Link-local
	dst: solnode[CE-Router's Global0]
        TargetAddress: CE-Router's Global0

   Judgement #4. CE-Router MUST NOT transmit SOL NA for its autoconfigured  Global address.
        name: 
	      NA_from_NUT_GA0Tgt, 
	      NA_from_NUT_GA0Tgt_woTLL, 
	      NA_from_GA0NUT_GA0Tgt, 
	      NA_from_GA0NUT_GA0Tgt_woTLL
	src: CE-Router's any Unicast Address
	dst: TN's Link-local
        TargetAddress: CE-Router's Global0
        RFlag: 0
        SFlag: 1
        OFlag: 1
	TLLOPT: CE-Router's MAC address
	(* TLLOPT may be omitted)

=back 1

=head1 CLEANUP

NONE

=cut

# =head1 REFERENCE
# 
# =begin html
# <PRE>
# RFC2462
# <HR>
# 5.5.3.  Router Advertisement Processing <BR>
#    (omit)
#    For each Prefix-Information option in the Router Advertisement:
# <BR>
#     a) If the Autonomous flag is not set, silently ignore the
#        Prefix Information
#        option.
# <BR>
# <A NAME="REF"><B>
#     b) If the prefix is the link-local prefix, silently ignore the
#        Prefix Information option.
# </B></A>
# <BR>
#     c) If the preferred lifetime is greater than the valid lifetime,
#        silently ignore the Prefix Information option. A node MAY wish to
#        log a system management error in this case.
# <BR>
#     d) If the prefix advertised does not match the prefix of an address
#        already in the list, and the Valid Lifetime is not 0, form an
#        address (and add it to the list) by combining the advertised
#        prefix with the link's interface identifier as follows:
#    (omit)
# </PRE>
# <BR>
# 
# =end html
# 

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
[RFC 7084],WAA-1
[RFC 4862],Section 5.5.3
{ND},Section 4.6.2
</PRE>
</BLOCKQUOTE>

=end html

=head1 SEE ALSO

=begin html
<PRE>
 detail of v6eval tool option: see perldoc V6evalTool.pm, perldoc V6evalRemote.pm
</PRE>

=end html

=cut

