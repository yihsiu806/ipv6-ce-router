//
// Copyright (C) 2013
// Chunghwa Telecommunication Labratories (CHT-TL)
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
// $CHT-TL: LLA_SAA.def,v 1.0 2013/08/19 weifen Exp $
//
//  This file has some basic definition and frames for DAD test about
//  any tentative address, and may be included from other *.def files.
//
// DADV6ADDR              : v6 Tentative address for DAD
// NUT_HasNoLLOCAL        : if defined CE-Router has no link-local address
// DADNA_SRC              : IPv6 src address of DAD NA
// dadns_from_NUT         : DAD NS coming from CE-Router on DAD
// chkconf_dadns_to_NUT   : DAD NS send to CE-Router to check if address is configured
// chkconf_dadna_from_NUT : DAD NA coming from CE-Router if addrss is configured
//
// 

#include "../CPE6_common.def"
#include "SAA.def"


#define _TLLOPT_detail_define(_pNAME, _pLEN, _pLLA) \
Opt_ICMPv6_TLL  _pNAME { \
        Length=_pLEN; \
        LinkLayerAddress=_pLLA; \
}


#define LLA_SIMILAR_ADDRESS v6merge(   _LLOCAL_UCAST_PRFX, \
                88, \
                nutv6("Link1"))


//
// Ethernet Part
//

_HETHER_define(hether_nut_lan_to_tentsolnode,
	       nutether("Link1"), _ETHER_SOLNODE_MCAST(nutv6("Link1")))
_HETHER_define(hether_tn2_to_tentsolnode,
	       TN2_MAC_ADDR, _ETHER_SOLNODE_MCAST(nutv6("Link1")))
_HETHER_define(hether_tn2_to_nut_lan_solnode,
	       TN2_MAC_ADDR, _ETHER_SOLNODE_MCAST(nutv6("Link1")))
_HETHER_define(hether_tn2_to_tn2solnode,
	       TN2_MAC_ADDR, _ETHER_SOLNODE_MCAST(v6(TN2_LINKLOCAL)))

//
// IPv6 Part
//

//
// DADNS_from_NUT
//  Description: 
//    DAD NS coming from CE-Router on DAD
//  Spec:
//    valid DAD NS

FEM_ADDRCONF_dadns(DADNS_from_NUT, hether_nut_lan_to_tentsolnode,
		   DestinationAddress=_IPV6_SOLNODE_MCAST(nutv6("Link1"));
		   ,
		   TargetAddress=nutv6("Link1"); // Tentative Address
                   )

//
// DADNS_from_TN_SameDstSameTgt
//  Description: 
//    DAD NS send to CE-Router to check if address is configured
//  Spec:
//    valid DAD NS

FEM_ADDRCONF_dadns(DADNS_from_TN_SameDstSameTgt, hether_tn2_to_tentsolnode,
		   DestinationAddress=_IPV6_SOLNODE_MCAST(nutv6("Link1"));
		   ,
		   TargetAddress=nutv6("Link1"); // Tentative Address
                   )

//
// DADNS_from_TN_DiffDstDiffTgt
//  Description: 
//    DAD NS send to CE-Router to check independency
//  Spec:
//    valid DAD NS

FEM_ADDRCONF_dadns(DADNS_from_TN_DiffDstDiffTgt, hether_tn2_to_tn2solnode,
		   DestinationAddress=_IPV6_SOLNODE_MCAST(v6(TN2_LINKLOCAL));
		   ,
		   TargetAddress=v6(TN2_LINKLOCAL); // Tentative Address
                   )

//
// DADNS_from_TN_SameDstDiffTgt
//  Description: 
//    DAD NS send to CE-Router to check independency
//  Spec:
//    valid DAD NS

FEM_ADDRCONF_dadns(DADNS_from_TN_SameDstDiffTgt, hether_tn2_to_nut_lan_solnode,
		   DestinationAddress=_IPV6_SOLNODE_MCAST(nutv6("Link1"));
		   ,
		   TargetAddress=v6(TN2_LINKLOCAL); // Tentative Address
                   )


//
// DADNA_from_NUT
//  Description: 
//    DAD NA coming from CE-Router if addrss is configured
//  Spec:
//    valid DAD NA
//    CE-Router is a host 

FEM_ADDRCONF_dadna(DADNA_from_NUT, _HETHER_nut2allnodes,
		   SourceAddress=nutv6("Link1");
		   ,
	           TargetAddress=nutv6("Link1");
	           option=opt_tll_nut_lan;
		   )

//
// DADNA_from_NUT_woTLL
//  Description: 
//    DAD NA coming from CE-Router if addrss is configured
//  Spec:
//    valid DAD NA
//    CE-Router is a host 

FEM_ADDRCONF_dadna(DADNA_from_NUT_woTLL, _HETHER_nut2allnodes,
		   SourceAddress=nutv6("Link1");
		   ,
	           TargetAddress=nutv6("Link1");
		   )

//
// DADNA_from_TN_SameTgt
//  Description: 
//    DAD NA Transmitted by TN which has Target address same as CE-Router
//  Spec:
//    valid DAD NA
// 

FEM_ADDRCONF_dadna(DADNA_from_TN_SameTgt, _HETHER_tn2allnodes,
		   SourceAddress=nutv6("Link1");
		   ,
	           RFlag=0;
	           TargetAddress=nutv6("Link1");
	           //option=opt_tll_tn2; //not need this option(specification)
		   )

//
// DADNA_from_TN_DiffTgt
//  Description: 
//    DAD NA Transmitted by TN which has Target address same as CE-Router
//  Spec:
//    valid DAD NA
//

FEM_ADDRCONF_dadna(DADNA_from_TN_DiffTgt, _HETHER_tn2allnodes,
		   SourceAddress=v6(TN2_LINKLOCAL);
		   ,
	           RFlag=0;
	           TargetAddress=v6(TN2_LINKLOCAL);
	           option=opt_tll_tn2;
		   )


//
// SOLNS_from_TN_SameTgt
//  Description: 
//    Address resolution NS send to CE-Router to check if address is configured
//  Spec:
//    valid DAD NS

FEM_icmp6_ns (
        SOLNS_from_TN_SameTgt,
        hether_tn2_to_nut_lan_solnode,
                {
                _SRC(v6(TN2_LINKLOCAL));
                _DST(_IPV6_SOLNODE_MCAST(nutv6("Link1")));
                HopLimit=255;
        },
                {
                TargetAddress=nutv6("Link1");
                option=opt_sll_tn2;
        }
)


//
// na
// CE-Router's link local address
//           to  
// TN's link local  address
//
// Targetaddress TN's link local address
 
FEM_icmp6_na (
        NA_from_NUT,
        _HETHER_nut_to_tn2,
                {
                _SRC(nutv6("Link1"));
                _DST(v6(TN2_LINKLOCAL));
                HopLimit=255;
        },
                {
                RFlag=RFLAG;
                SFlag=1;
                OFlag=1;
                TargetAddress=nutv6("Link1");
                option=opt_tll_nut_lan;
        }
)

//
// na
// CE-Router's link local address
//           to  
// TN's link local  address
//
// Targetaddress TN's link local address
 
FEM_icmp6_na (
        NA_from_NUT_woTLL,
        _HETHER_nut_to_tn2,
                {
                _SRC(nutv6("Link1"));
                _DST(v6(TN2_LINKLOCAL));
                HopLimit=255;
        },
                {
                RFlag=RFLAG;
                SFlag=1;
                OFlag=0;
                TargetAddress=nutv6("Link1");
        }
)

//
// NS_from_TN_SrcDstUni for Address Resolution
//  Description: 
//    DAD NS send to CE-Router to check if address is configured
//  Spec:
//    invalid DAD NS

FEM_icmp6_ns (
        NS_from_TN_SrcDstUni,
        _HETHER_tn2_to_nut,
                {
                _SRC(v6(TN2_LINKLOCAL));
                _DST(nutv6("Link1"));
                HopLimit=255;
        },
                {
                TargetAddress=nutv6("Link1");
                option=opt_sll_tn2;
        }
)

//
// DADNS_from_TN_SameTgt w/ HopLimit=254
//  Description: 
//    DAD NS send to CE-Router to check if address is configured
//  Spec:
//    invalid DAD NS

FEM_icmp6_ns (
        DADNS_from_TN_HL254,
        hether_tn2_to_tentsolnode,
                {
                _SRC(UNSPEC_ADDR);
                _DST(_IPV6_SOLNODE_MCAST(nutv6("Link1")));
                HopLimit=254;
        },
                {
                TargetAddress=nutv6("Link1");
        }
)

//
// DADNS_from_TN_invalidCHKSUM w/ Invalid Checksum
//  Description: 
//    DAD NS send to CE-Router to check if address is configured
//  Spec:
//    invalid DAD NS

FEM_icmp6_ns (
        DADNS_from_TN_invalidCHKSUM,
        hether_tn2_to_tentsolnode,
                {
                _SRC(UNSPEC_ADDR);
                _DST(_IPV6_SOLNODE_MCAST(nutv6("Link1")));
                HopLimit=255;
        },
                {
                Checksum=0xffff;
                TargetAddress=nutv6("Link1");
        }
)

//
// DADNS_from_TN_CODEnon0 w/ non-Zero code
//  Description: 
//    DAD NS send to CE-Router to check if address is configured
//  Spec:
//    invalid DAD NS

FEM_icmp6_ns (
        DADNS_from_TN_CODEnon0,
        hether_tn2_to_tentsolnode,
                {
                _SRC(UNSPEC_ADDR);
                _DST(_IPV6_SOLNODE_MCAST(nutv6("Link1")));
                HopLimit=255;
        },
                {
                Code=0x01;
                TargetAddress=nutv6("Link1");
        }
)

//
// DADNS_from_TN_invalidLEN w/ invalid Payload Length
//  Description: 
//    DAD NS send to CE-Router to check if address is configured
//  Spec:
//    invalid DAD NS

FEM_icmp6_ns (
        DADNS_from_TN_invalidLEN,
        hether_tn2_to_tentsolnode,
                {
                _SRC(UNSPEC_ADDR);
                _DST(_IPV6_SOLNODE_MCAST(nutv6("Link1")));
                PayloadLength=0x10;
                HopLimit=255;
        },
                {
                TargetAddress=nutv6("Link1");
        }
)

//
// DADNS_from_TN_tgtMCAST w/ MULTICAST as Target
//  Description: 
//    DAD NS send to CE-Router to check if address is configured
//  Spec:
//    invalid DAD NS

FEM_icmp6_ns (
        DADNS_from_TN_tgtMCAST,
        hether_tn2_to_tentsolnode,
                {
                _SRC(UNSPEC_ADDR);
                _DST(_IPV6_SOLNODE_MCAST(nutv6("Link1")));
                HopLimit=255;
        },
                {
                TargetAddress=_IPV6_SOLNODE_MCAST(nutv6("Link1"));
        }
)

//
// DADNS_from_TN_Reserved w/ Reserved Field non-zero
//  Description: 
//    DAD NS send to CE-Router to check if address is configured
//  Spec:
//    invalid DAD NS

FEM_icmp6_ns (
        DADNS_from_TN_Reserved,
        hether_tn2_to_tentsolnode,
                {
                _SRC(UNSPEC_ADDR);
                _DST(_IPV6_SOLNODE_MCAST(nutv6("Link1")));
                HopLimit=255;
        },
                {
		Reserved=0xffffffff;
                TargetAddress=nutv6("Link1");
        }
)

//
// DADNS_from_TN_wTLL w/ TLL Option
//  Description: 
//    DAD NS send to CE-Router to check if address is configured
//  Spec:
//    invalid DAD NS

FEM_icmp6_ns (
        DADNS_from_TN_wTLL,
        hether_tn2_to_tentsolnode,
                {
                _SRC(UNSPEC_ADDR);
                _DST(_IPV6_SOLNODE_MCAST(nutv6("Link1")));
                HopLimit=255;
        },
                {
                TargetAddress=nutv6("Link1");
                option=opt_tll_tn2;
        }
)

//
// DADNS_from_TN_DstAll
//  Description: 
//    DAD NS send to CE-Router to check if address is configured
//  Spec:
//    invalid DAD NS

FEM_ADDRCONF_dadns(DADNS_from_TN_DstAll, _HETHER_tn2allnodes,
		   DestinationAddress=v6(_ALLNODES_MCAST_ADDR);
		   ,
		   TargetAddress=nutv6("Link1"); // Tentative Address
                   )


//
// DADNS_from_TN_DstTent
//  Description: 
//    DAD NS send to CE-Router to check if address is configured
//  Spec:
//    invalid DAD NS

FEM_ADDRCONF_dadns(DADNS_from_TN_DstTent, _HETHER_tn2_to_nut,
		   DestinationAddress=nutv6("Link1");
		   ,
		   TargetAddress=nutv6("Link1"); // Tentative Address
                   )


//
// DAD NA w/ HopLimit=254
// TN's link local  address
//           to  
// allnode multicast address
//
// Targetaddress TN's link local address
 
FEM_icmp6_na (
        DADNA_from_TN_HL254,
        _HETHER_tn2allnodes,
                {
                _SRC(v6(TN2_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
                HopLimit=254;
        },
                {
                RFlag=0;
                SFlag=0;
                OFlag=1;
                TargetAddress=nutv6("Link1");
                option=opt_tll_tn2;
        }
)

//
// DAD NA w/ Sflag==1
// TN's link local  address
//           to  
// allnode multicast address
//
// Targetaddress TN's link local address
 
FEM_icmp6_na (
        DADNA_from_TN_SF1,
        _HETHER_tn2allnodes,
                {
                _SRC(v6(TN2_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
                HopLimit=255;
        },
                {
                RFlag=0;
                SFlag=1;
                OFlag=1;
                TargetAddress=nutv6("Link1");
                option=opt_tll_tn2;
        }
)

//
// DAD NS w/ SLL
// unspecified  address
//           to  
// CE-Router's solicited multicast address
//
// Targetaddress TN's link local address

FEM_icmp6_ns (
        DADNS_from_TN_wSLL,
        hether_tn2_to_tentsolnode,
                {
                _SRC(UNSPEC_ADDR);
                _DST(_IPV6_SOLNODE_MCAST(nutv6("Link1")));
                HopLimit=255;
        },
                {
                TargetAddress=nutv6("Link1");
                option=opt_sll_tn2;   //invalid
        }
)

//
// DAD NA w/ SLL
// TN's link local  address
//           to  
// allnode multicast address
//
// Targetaddress TN's link local address
 
FEM_icmp6_na (
        DADNA_from_TN_wSLL,
        _HETHER_tn2allnodes,
                {
                _SRC(v6(TN2_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
                HopLimit=255;
        },
                {
                RFlag=0;
                SFlag=0;
                OFlag=1;
                TargetAddress=nutv6("Link1");
                //option=opt_tll_tn2; //not need TTL option(specification of phase II)
                option=opt_sll_nut_lan;
        }
)

//
// DAD NA w/o TLL
// TN's link local  address
//           to  
// allnode multicast address
//
// Targetaddress TN's link local address
 
FEM_icmp6_na (
        DADNA_from_TN_woTLL,
        _HETHER_tn2allnodes,
                {
                _SRC(v6(TN2_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
                HopLimit=255;
        },
                {
                RFlag=0;
                SFlag=0;
                OFlag=1;
                TargetAddress=nutv6("Link1");
        }
)

FEM_upp_no_next_header(
        PreparationPkt,
        _HETHER_tn2tn,
        {
                _SRC(nutv6("Link1"));
                _DST(v6(TN2_LINKLOCAL));
        },
        {}
)


//
// DAD NA w/ invalid Checksum
// TN's link local  address
//           to  
// allnode multicast address
//
// Targetaddress TN's link local address
 
FEM_icmp6_na (
        DADNA_from_TN_invalidCHKSUM,
        _HETHER_tn2allnodes,
                {
                _SRC(v6(TN2_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
                HopLimit=255;
        },
                {
                RFlag=0;
                SFlag=0;
                OFlag=1;
                Checksum=0xffff;
                TargetAddress=nutv6("Link1");
                option=opt_tll_tn2;
        }
)

//
// DAD NA w/ non-ZERO code
// TN's link local  address
//           to  
// allnode multicast address
//
// Targetaddress TN's link local address
 
FEM_icmp6_na (
        DADNA_from_TN_CODEnon0,
        _HETHER_tn2allnodes,
                {
                _SRC(v6(TN2_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
                HopLimit=255;
        },
                {
                Code=0x01;
                RFlag=0;
                SFlag=0;
                OFlag=1;
                TargetAddress=nutv6("Link1");
                option=opt_tll_tn2;
        }
)

//
// DAD NA w/ invalid Payload Length
// TN's link local  address
//           to  
// allnode multicast address
//
// Targetaddress TN's link local address
 
FEM_icmp6_na (
        DADNA_from_TN_invalidLEN,
        _HETHER_tn2allnodes,
                {
                _SRC(v6(TN2_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
                PayloadLength=0x10;
                HopLimit=255;
        },
                {
                RFlag=0;
                SFlag=0;
                OFlag=1;
                TargetAddress=nutv6("Link1");
                option=opt_tll_tn2;
        }
)

//
// DAD NA w/ MULTICAST as Target
// TN's link local  address
//           to  
// allnode multicast address
//
// Targetaddress TN's link local address
 
FEM_icmp6_na (
        DADNA_from_TN_tgtMCAST,
        _HETHER_tn2allnodes,
                {
                _SRC(v6(TN2_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
                HopLimit=255;
        },
                {
                RFlag=0;
                SFlag=0;
                OFlag=1;
                TargetAddress=_IPV6_SOLNODE_MCAST(nutv6("Link1"));
                option=opt_tll_tn2;
        }
)

//
// DAD NA w/ Reserved Field non-zero
// TN's link local  address
//           to  
// allnode multicast address
//
// Targetaddress TN's link local address
 
FEM_icmp6_na (
        DADNA_from_TN_Reserved,
        _HETHER_tn2allnodes,
                {
                _SRC(v6(TN2_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
                HopLimit=255;
        },
                {
                RFlag=0;
                SFlag=0;
                OFlag=1;
		Reserved=0x1fffffff;
                TargetAddress=nutv6("Link1");
                option=opt_tll_tn2;
        }
)

//
// DAD NA w/ Invalid Option Length
// TN's link local  address
//           to  
// allnode multicast address
//
// Targetaddress TN's link local address
 
FEM_icmp6_na (
        DADNA_from_TN_invalidOptLen,
        _HETHER_tn2allnodes,
                {
                _SRC(v6(TN2_LINKLOCAL));
                _DST(v6(_ALLNODES_MCAST_ADDR));
                HopLimit=255;
        },
                {
                RFlag=0;
                SFlag=0;
                OFlag=1;
                TargetAddress=nutv6("Link1");
                option=TLL_invalidLen_tn;
        }
)

_TLLOPT_detail_define(TLL_invalidLen_tn, 0, TN2_MAC_ADDR)


// RS

FEM_icmp6_rs(
	addrconf_rs_unspec,
	_HETHER_nut2allrouters,
	{
		HopLimit	= 255;
		_SRC(UNSPEC_ADDR);
		_DST(v6(_ALLROUTERS_MCAST_ADDR));
	},
	{}
)

FEM_icmp6_rs(
	addrconf_rs,
	_HETHER_nut2allrouters,
	{
		HopLimit	= 255;
		_SRC(nutv6("Link1"));
		_DST(v6(_ALLROUTERS_MCAST_ADDR));
	},
	{}
)

FEM_icmp6_rs(
	addrconf_rs_sll,
	_HETHER_nut2allrouters,
	{
		HopLimit	= 255;
		_SRC(nutv6("Link1"));
		_DST(v6(_ALLROUTERS_MCAST_ADDR));
	},
	{
		option	= opt_sll_nut_lan;
	}
)

//end
