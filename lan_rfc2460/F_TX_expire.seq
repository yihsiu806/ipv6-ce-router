#!/usr/bin/perl
#
# Copyright (C) 2013, 2014, 2015
# Chunghwa Telecommunication Labratories (CHT-TL)
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $CHT-TL: F_TX_expire.seq,v 1.1 2015/04/28  weifen Exp $
#
######################################################################
BEGIN {
	$V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_2 $';
}

use V6evalTool;
use CommonSPEC;

use lib '../';
use CPE6_config;
use DHCPv6_common;
use CPE6;

$discard_te = $CommonSPEC::exceed_max;
$delay	    = $CommonSPEC::exceed_max;
			# wait time for ICMP Time Exceeded (sec.)
$exceed_min = $CommonSPEC::exceed_min;
			# allow Time Exceeded this time after Send Fragment

$pktdesc{'echo_request_1st'}	= 'Send Echo Request (1st fragment)';
$pktdesc{'echo_request_2nd'}	= 'Send Echo Request (2nd fragment)';
$pktdesc{'echo_request_3rd'}	= 'Send Echo Request (3rd fragment)';
$pktdesc{'echo_reply'}		= 'Recv Echo Reply';
$pktdesc{'time_exceeded_1st'}	= 'Recv ICMPv6 Time Exceeded (1st fragment)';

$endStatus = $V6evalTool::exitPass;

#----- create Fragment ID
$id = time & 0x00000fff;
$fid = sprintf("0x0%07x", $id);
$rid = sprintf("0x0%03x", $id);
$sno = 0;

vCPP("-DFRAG_ID=$fid -DREQ_ID=$rid -DSEQ_NO=$sno");
################################################################
$IF0 = 'Link0';
$IF1 = 'Link1';

vCapture($IF0);
vCapture($IF1);

#----- Initialization
my $ra = $STATEFUL_CLIENT ? 'ra_MsetOset' : 'ra_MclearOset';
my ($ret,$tn2_prefix) = cpe_initialization($ra,$IF0,$IF1,$STATEFUL_CLIENT,0);
if ($ret != 0) {
    cpe6ExitFail("<B>CPE initialization fail!</B><BR>");
}
#======================================================================

#----- test
vSend($IF1, 'echo_request_1st');

($recv_time, %ret) = nr_vRecv_EN($IF1, $delay, 'time_exceeded_1st');

if ($ret{'status'} == 0 and $recv_time <= $exceed_min) {
	vLogHTML("Exceed too fast ($recv_time sec.)<BR>");
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
	$endStatus = $V6evalTool::exitFail;
} elsif ($ret{'status'} != 0) {
	vLogHTML('Cannot receive ICMP Time Exceeded message<BR>');
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
	$endStatus = $V6evalTool::exitFail;
}

vSend($IF1, 'echo_request_2nd');
vSend($IF1, 'echo_request_3rd');
%ret = nd_vRecv_EN($IF1, $CommonSPEC::wait_reply, 0, 0, 'echo_reply');

if ($ret{'status'} == 1) {
	vLogHTML('OK<BR>');
} else {
	vLogHTML('Received unexpected Echo Reply<BR>');
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
	vSleep($discard_te, "Discard Unexpected 'ICMP Time Exceeded' message ($discard_te sec)");
	$endStatus = $V6evalTool::exitFail;
}
#----- end test
vSleep(60, "Wait Frame2 3 expire.");
vClear($IF1);
vClear($IF0);
vStop($IF0);
vStop($IF1);
if ($endStatus == $V6evalTool::exitFail) {
	cpe6ExitFail();
} else {
	cpe6ExitPass($IF0);
}


######################################################################
__END__

=head1 NAME

  Reassembly Time Exceeded
  Part B: Time Exceeded Before Last Fragments Arrive

=head1 TARGET

  CE-Router

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./F_TX_expire.seq">F_TX_expire.seq</A> [-tooloption ...] -pkt <A HREF="./F_TX_expire.def">F_TX_expire.def</A>
    -tooloption : v6eval tool option
</PRE>

=end html

=head1 INITIALIZATION

  Common Test Setup 1.1

=head1 TEST PROCEDURE

Verify that a node takes the proper actions when th reassembly time has been exceeded for a packet.

   TN                          CE-Router
    |                           |
    |-------------------------->|
    |   Echo Request (1st)      |
    |                           |
    |                           |
    |   wait for 65 sec.        |
    |                           |
    |                           |
    |<--------------------------|
    |   ICMP Error              |
    |                           |
    |-------------------------->|
    |   Echo Request (2nd)      |
    |                           |
    |-------------------------->|
    |   Echo Request (3rd)      |
    |                           |
    |                           |
    v                           v


  1. TN transmits 1st, 2nd and 3rd Fragments in order.
     There is a 65-second delay between the transmission of 1st Fragment and 2nd, 3rd Fragments.
  2. Observe the packets transmitted by the CE-Router.

  Echo Request Data (original) is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 88
            NextHeader         = 58 (ICMPv6)
            SourceAddress      = TN Global Address
            DestinationAddress = CE-Router Global Address

        ICMP Echo Request
            Type           = 128 (Echo Request)
            Code           = 0
            Checksum       = (auto)
            Identifier     = (auto)
            SequenceNumber = 0
            PayloadData    = data repeat{0x1, 40}
                             data repeat{0x2, 40}

  Echo Request Data (1st fragment) is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 40
            NextHeader         = 44 (Fragment Header)
            SourceAddress      = TN Global Address
            DestinationAddress = CE-Router Global Address

        Fragment Header
            NextHeader         = 58 (ICMPv6)
            FragmentOffset     = 0
            MFlag              = 1
            Identification     = 32bit (Automatic generation)

        Payload
            data               = 32 octets from the head of ICMP Echo request

  Echo Request Data (2nd fragment) is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 40
            NextHeader         = 44 (Fragment Header)
            SourceAddress      = TN Global Address
            DestinationAddress = CE-Router Global Address

        Fragment Header
            NextHeader         = 58 (ICMPv6)
            FragmentOffset     = 4
            MFlag              = 1
            Identification     = 32bit (Automatic generation)

        Payload
            data               = 32 octets from the back of ICMP Echo request

  Echo Request Data (3rd fragment) is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 32
            NextHeader         = 44 (Fragment Header)
            SourceAddress      = TN Global Address
            DestinationAddress = CE-Router Global Address

        Fragment Header
            NextHeader         = 58 (ICMPv6)
            FragmentOffset     = 8
            MFlag              = 0
            Identification     = 32bit (Automatic generation)

        Payload
            data               = 24 octets from the back of ICMP Echo request

=head1 JUDGEMENT

  PASS: 2nd and 3rd Fragments arrive after the CE-Router's reassembly timer expires for 1st Fragment.
        The CE-Router must not transmit an Echo Reply to TN, as the Echo Request could not be reassembled in time.
        The CE-Router should transmit an ICMPv6 Time Exceeded Message to TN 
        sixty seconds after reception of 1st Fragment 
        with a code field value of 1(Fragment Reassembly Time Exceeded).

             - The unused field must be initialized to zero.
             - The Source Address of the Packet must be the same as the Global 
               Destination Address of TN's Echo Request packet.
             - The Destination Address should be the same as the Global 
               Source Address of TN's Echo Request packet.
             - The invoking Echo Request packet included in the Error 
               Message must not exceed minimum IPv6 MTU.

        IPv6 Header
            Version             = 6
            Traffic Class       = 0
            FlowLabel           = 0
            PayloadLength       = 88
            NextHeader          = 58 (ICMPv6)
            SourceAddress       = CE-Router Global Address
            Destination Address = TN Global Address

        ICMP Echo Reply
            Type           = 3 (Time Exceeded)
            Code           = 1 (Fragment reassembly time exceeded)
            Checksum       = (auto)
            Reserved       = 0
            PayloadData    = (Sent Packet (1st))

=head1 CLEANUP

Common Test Cleanup

=cut

# =head1 REFERENCE
# 
# RFC2460
# 
# 4.5  Fragment Header
# 
#    The following error conditions may arise when reassembling fragmented
#    packets:
# 
# =begin html
# <PRE>
#       <B>If insufficient fragments are received to complete reassembly of a
#       packet within 60 seconds of the reception of the first-arriving
#       fragment of that packet, reassembly of that packet must be
#       abandoned and all the fragments that have been received for that
#       packet must be discarded.  If the first fragment (i.e., the one
#       with a Fragment Offset of zero) has been received, an ICMP Time
#       Exceeded -- Fragment Reassembly Time Exceeded message should be
#       sent to the source of that fragment.</B>
# </PRE>
# 
# =end html
# 
#       If the length of a fragment, as derived from the fragment packet's
#       Payload Length field, is not a multiple of 8 octets and the M flag
#       of that fragment is 1, then that fragment must be discarded and an
#       ICMP Parameter Problem, Code 0, message should be sent to the
#       source of the fragment, pointing to the Payload Length field of
#       the fragment packet.
# 
#       If the length and offset of a fragment are such that the Payload
#       Length of the packet reassembled from that fragment would exceed
#       65,535 octets, then that fragment must be discarded and an ICMP
#       Parameter Problem, Code 0, message should be sent to the source of
#       the fragment, pointing to the Fragment Offset field of the
#       fragment packet.
# 
#    The following conditions are not expected to occur, but are not
#    considered errors if they do:
# 
#       The number and content of the headers preceding the Fragment
#       header of different fragments of the same original packet may
#       differ.  Whatever headers are present, preceding the Fragment
#       header in each fragment packet, are processed when the packets
#       arrive, prior to queueing the fragments for reassembly.  Only
#       those headers in the Offset zero fragment packet are retained in
#       the reassembled packet.
# 
#       The Next Header values in the Fragment headers of different
#       fragments of the same original packet may differ.  Only the value
#       from the Offset zero fragment packet is used for reassembly.
# 

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
[RFC 7084],G-1
[RFC 2460],Sections 4.5
</PRE>
</BLOCKQUOTE>

=end html

=head1 SEE ALSO

  perldoc V6evalTool

=cut

