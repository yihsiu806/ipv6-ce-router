#!/usr/bin/perl
#
# Copyright (C) 2013, 2014, 2015
# Chunghwa Telecommunication Labratories (CHT-TL)
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $CHT-TL: IP_FL_NonZeroEN.seq,v 1.1 2015/04/28  weifen Exp $
#
######################################################################
BEGIN {
	$V6evalTool::TestVersion = '$Name: CE-Router_Self_Test_1_0_1 $';
}

use V6evalTool;
use CommonSPEC;

use lib '../';
use CPE6_config;
use DHCPv6_common;
use CPE6;

$pktdesc{'echo_request'}	= 'Send Echo Request (Flow Label Non-Zero)';
$pktdesc{'echo_reply_fl'}	= 'Recv Echo Reply (Flow Label Non-Zero)';
$pktdesc{'echo_reply'}		= 'Recv Echo Reply (Flow Label Zero)';

$endStatus = $V6evalTool::exitPass;
$IF0 = 'Link0';
$IF1 = 'Link1';

vCapture($IF0);
vCapture($IF1);

#----- Initialization
my $ra = $STATEFUL_CLIENT ? 'ra_MsetOset' : 'ra_MclearOset';
my ($ret,$tn2_prefix) = cpe_initialization($ra,$IF0,$IF1,$STATEFUL_CLIENT,0);
if ($ret != 0) {
    cpe6ExitFail("<B>CPE initialization fail!</B><BR>");
}

#----- test
vSend($IF1, 'echo_request');
%ret = nd_vRecv_EN($IF1, $CommonSPEC::wait_reply, 0, 0, 'echo_reply_fl', 'echo_reply');

if ($ret{'status'} == 0) {
	if ($ret{'recvFrame'} eq 'echo_reply_fl') {
		vLogHTML('OK<BR>');
	} elsif ($ret{'recvFrame'} eq 'echo_reply') {
		vLogHTML('OK (But CE-Router does not support Flow-Label)<BR>');
	}
} else {
	vLogHTML('Cannot receive Echo Reply<BR>');
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
	$endStatus = $V6evalTool::exitFail;
}
#----- end test
vClear($IF1);
vClear($IF0);
vStop($IF0);
vStop($IF1);
if ($endStatus == $V6evalTool::exitFail) {
	cpe6ExitFail();
} else {
	cpe6ExitPass($IF0);
}

######################################################################
__END__

=head1 NAME

  Flow Label Non-Zero

=head1 TARGET

  CE-Router

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./IP_FL_NonZeroEN.seq">IP_FL_NonZeroEN.seq</A> [-tooloption ...] -pkt <A HREF="./IP_FL_NonZeroEN.def">IP_FL_NonZeroEN.def</A>
    -tooloption : v6eval tool option
</PRE>

=end html

=head1 INITIALIZATION

  Common Test Setup is performed at the beginning of this test part.

=head1 TEST PROCEDURE

Verify that a node properly processes the Flow Label field of received packets and generates a valid value in transmitted packets.

   TN                          CE-Router
    |                           |
    |-------------------------->|
    |   Echo Request            |
    |                           |
    |                           | 
    |<--------------------------|
    |   Echo Reply              |
    |                           |
    |                           |
    v                           v


  1. TN transmits an Send Echo Request with a Flow Label of 0x34567 to the CE-Router.
  2. Observe the packets transmitted by the CE-Router.

  Echo Request Data is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0x34567 (20 bit)
            PayloadLength      = 16
            NextHeader         = 58 (ICMPv6)
            SourceAddress      = TN Link Local Address
            DestinationAddress = CE-Router Link Local Address

        ICMP Echo Request
            Type           = 128 (Echo Request)
            Code           = 0
            Checksum       = (auto)
            Identifier     = 0xffff
            SequenceNumber = 1
            PayloadData    = {1, 2, 3, 4, 5, 6, 7, 8}


=head1 JUDGEMENT

  The CE-Router must generate an Echo Reply.
  If the CE-Router supports use of the Flow Label field, 
  the Flow Label in the Echo Reply may be non-zero.
  Otherwise, the Flow Label field must be zero.
  
  PASS: Echo Reply Received

        IPv6 Header
            Version             = 6
            Traffic Class       = 0
            FlowLabel           = any (20 bit)
            PayloadLength       = 16
            NextHeader          = 58 (ICMPv6)
            SourceAddress       = CE-Router Link Local Address
            Destination Address = TN Link Local Address

        ICMP Echo Reply
            Type           = 129 (Echo Reply)
            Code           = 0
            Checksum       = (auto)
            Identifier     = 0xffff (same as Echo Request)
            SequenceNumber = 1 (same as Echo Request)
            PayloadData    = {1, 2, 3, 4, 5, 6, 7, 8} (same as Echo Request)

	or

  PASS: Echo Reply Received

        IPv6 Header
            Version             = 6
            Traffic Class       = 0
            FlowLabel           = 0 (Hosts or routers that do not support the Flow Label field)
            PayloadLength       = 16
            NextHeader          = 58 (ICMPv6)
            SourceAddress       = TN Link Local Address
            Destination Address = CE-Router Link Local Address

        ICMP Echo Reply
            Type           = 129 (Echo Reply)
            Code           = 0
            Checksum       = (auto)
            Identifier     = 0xffff (same as Echo Request)
            SequenceNumber = 1 (same as Echo Request)
            PayloadData    = {1, 2, 3, 4, 5, 6, 7, 8} (same as Echo Request)

=head1 CLEANUP

Common Test Cleanup

=cut

# =head1 REFERENCE
# 
# RFC2460
# 
# 3.  IPv6 Header Format
# 
#    Flow Label           20-bit flow label.  See section 6.
# 
# 6.  Flow Labels
# 
# =begin html
# <PRE>
#    The 20-bit Flow Label field in the IPv6 header may be used by a
#    source to label sequences of packets for which it requests special
#    handling by the IPv6 routers, such as non-default quality of service
#    or "real-time" service.  This aspect of IPv6 is, at the time of
#    writing, still experimental and subject to change as the requirements
#    for flow support in the Internet become clearer.  <B>Hosts or routers
#    that do not support the functions of the Flow Label field are
#    required to set the field to zero when originating a packet, pass the
#    field on unchanged when forwarding a packet, and ignore the field
#    when receiving a packet.</B>
# </PRE>
# 
# =end html
# 

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
[RFC 7084],G-1
[RFC 2460],Section 6, Appendix A
</PRE>
</BLOCKQUOTE>

=end html

=head1 SEE ALSO

  perldoc V6evalTool

=cut

