//
// Copyright (C) 2013
// Chunghwa Telecommunication Labratories (CHT-TL)
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $CHT-TL: F_Reassembly_1500.def,v 1.0 2013/08/19 weifen Exp $
//

#include "./CommonHost.def"

#ifndef	FRAG_ID_SEND
#define	FRAG_ID_SEND	0x00000100
#endif

// for fragment
#ifndef	FRAG_ID
#define	FRAG_ID	any
#endif

#ifdef FRAG_DEF
#include "pkt_frag.def"
#endif

#ifdef FRAG_DEF_TN2
#include "pkt_frag_tn2.def"
#endif

#ifndef MAX_MTU
#define MAX_MTU 1400
#endif



//--------------------------------------------------------------------//
// Resolution Wait Queue Issue                                        //
//--------------------------------------------------------------------//
FEM_icmp6_echo_request(
	echo_request_small,
	_HETHER_tn2_to_nut,
	{
		HopLimit	= 255;
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
	},
	{
		Identifier	= PING_ID;
		SequenceNumber	= PING_SN;
		payload		= echo_data_small;
	}
)

FEM_icmp6_echo_reply(
	echo_reply_small,
	_HETHER_nut_to_tn2,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TN2_LINKLOCAL));
	},
	{
		Identifier	= PING_ID;
		SequenceNumber	= PING_SN;
		payload		= echo_data_small;
	}
)

Payload echo_data_small {
	data = repeat(0x00, 64);
}
//--------------------------------------------------------------------//



//======================================================================
// ICMP echo request (original)
//======================================================================

FEM_icmp6_echo_request(
	echo_request1500,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
		HopLimit = 255;
	},
	{
		Identifier = PING_ID;
		SequenceNumber = PING_SN;
		payload = echo_data1452;
	}
)


//
// ICMP echo request (1st fragment)
//

FEM_hdr_ipv6_exth(
	echo_request1500_1st,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
		HopLimit = 255;
	},
	{
		header = _HDR_IPV6_NAME(echo_request1500_1st);
		exthdr = frag1500_1st;
		upper = payload1500_1st;
	}
)


//
// ICMP echo request (2nd fragment)
//

FEM_hdr_ipv6_exth(
	echo_request1500_2nd,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
		HopLimit = 255;
	},
	{
		header = _HDR_IPV6_NAME(echo_request1500_2nd);
		exthdr = frag1500_2nd;
		upper = payload1500_2nd;
	}
)


//
// ICMP echo request (3rd fragment)
//

FEM_hdr_ipv6_exth(
	echo_request1500_3rd,
	_HETHER_tn2_to_nut,
	{
		_SRC(v6(TN2_LINKLOCAL));
		_DST(nutv6("Link1"));
		HopLimit = 255;
	},
	{
		header = _HDR_IPV6_NAME(echo_request1500_3rd);
		exthdr = frag1500_3rd;
		upper = payload1500_3rd;
	}
)


Hdr_Fragment frag1500_1st {
	NextHeader = 58;
	FragmentOffset = 0;
	MFlag = 1;
	Identification = FRAG_ID_SEND;
}

Hdr_Fragment frag1500_2nd {
	NextHeader = 58;	// ignored
	FragmentOffset = 65;	// 520/8
	MFlag = 1;
	Identification = FRAG_ID_SEND;
}

Hdr_Fragment frag1500_3rd {
	NextHeader = 58;	// ignored
	FragmentOffset = 130;	// 1040/8
	MFlag = 0;
	Identification = FRAG_ID_SEND;
}

Payload echo_data1452 {
	data = repeat(1, 512);
	data = repeat(2, 512);
	data = repeat(3, 428);
}

Payload payload1500_1st {
	data = substr(_PACKET_IPV6_NAME(echo_request1500), 40, 520);
}

Payload payload1500_2nd {
	data = substr(_PACKET_IPV6_NAME(echo_request1500), 560, 520);
}

Payload payload1500_3rd {
	data = substr(_PACKET_IPV6_NAME(echo_request1500), 1080, 420);
}


//
// ICMP echo reply
//

FEM_icmp6_echo_reply(
	echo_reply1500,
	_HETHER_nut_to_tn2,
	{
		_SRC(nutv6("Link1"));
		_DST(v6(TN2_LINKLOCAL));
	},
	{
		Identifier = PING_ID;
		SequenceNumber = PING_SN;
		payload = echo_data1452;
	}
)

